<!-- Modified by Yu-Hsuan Yen -->
<!-- Post Header -->
<%
function CRC32(str, radix = 10) {
  const Utf8Encode = function(string) {
    string = string.replace(/\r\n/g, "\n");
    let text = "";
    for (let n = 0; n < string.length; n++) {
      const c = string.charCodeAt(n);
      if (c < 128) {
        text += String.fromCharCode(c);
      } else if ((c > 127) && (c < 2048)) {
        text += String.fromCharCode((c >> 6) | 192);
        text += String.fromCharCode((c & 63) | 128);
      } else {
        text += String.fromCharCode((c >> 12) | 224);
        text += String.fromCharCode(((c >> 6) & 63) | 128);
        text += String.fromCharCode((c & 63) | 128);
      }
    }
    return text;
  }

  const makeCRCTable = function(){
    let c;
    const crcTable = [];
    for(let n =0; n < 256; n++){
      c = n;
      for(let k =0; k < 8; k++){
        c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      crcTable[n] = c;
    }
    return crcTable;
  }

  const crcTable = makeCRCTable();
  const strUTF8 = Utf8Encode(str);
  let crc = 0 ^ (-1);
  for (let i = 0; i < strUTF8.length; i++ ) {
    crc = (crc >>> 8) ^ crcTable[(crc ^ strUTF8.charCodeAt(i)) & 0xFF];
  }
  crc = (crc ^ (-1)) >>> 0;
  return crc.toString(radix);
};

if (is_post() || is_page()) {
var autoArchivesImgs = config["archives-img"].split(",").filter(item => item != '');
var hashcode = CRC32(page["title"])
var autoArchivesImg = autoArchivesImgs[hashcode % autoArchivesImgs.length].trim()
}
%>
<% if(config['jsdelivr']) { %>
  <!-- CDN: jsdelivr start -->
  <style type="text/css">
    .body--light {
      /* intro-header */
      <% if(config['header-img'].substr(0, 4) == 'http') { %>
      --intro-header-background-image-url-home: url('<%= config["header-img"] %>');
      <% } else  { %>
      --intro-header-background-image-url-home: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root + config["header-img"] %>');
      <% } %> 
      <% if(!(page["header-img"] && page["header-img"].substr(0, 4) != 'http')) { %>
      --intro-header-background-image-url-post: url('<%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: url('<%= page["header-img"] || autoArchivesImg %>');
      <% } else  { %>
      --intro-header-background-image-url-post: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      <% } %>
    }
    .body--dark {
      <% if(config['header-img'].substr(0, 4) == 'http') { %>
      --intro-header-background-image-url-home: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config["header-img"] %>');
      <% } else  { %>
      --intro-header-background-image-url-home: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root + config["header-img"] %>');
      <% } %> 
      <% if(!(page["header-img"] && page["header-img"].substr(0, 4) != 'http')) { %>
      --intro-header-background-image-url-post: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= page["header-img"] || autoArchivesImg %>');
      <% } else  { %>
      --intro-header-background-image-url-post: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      <% } %>
    }
    header.intro-header {
      <% if (is_home()) { %> /*config*/
        background-image: var(--intro-header-background-image-url-home);
        /* background-image: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root + config["header-img"] %>'); */
      <% } else if (is_post()) { %> /*post*/
        background-image: var(--intro-header-background-image-url-post);
        /* background-image: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>'); */
      <% } else { %> /*page*/
        background-image: var(--intro-header-background-image-url-page);
        /* background-image: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>'); */
      <% } %>
    }

    <% if (config.signature) { %>
      #signature {/*signature*/
        background-image: url('<%= config.root + config["signature-img"] %>');
      }
    <% } %>
  </style>
  <!-- CDN: jsdelivr end -->
<% } else  { %>
  <style type="text/css">
    .body--light {
      <% if(config['header-img'].substr(0, 4) == 'http') { %>
      --intro-header-background-image-url-home: url('<%= config["header-img"] %>');
      <% } else  { %>
      --intro-header-background-image-url-home: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root + config["header-img"] %>');
      <% } %> 
      <% if(!(page["header-img"] && page["header-img"].substr(0, 4) != 'http')) { %>
      --intro-header-background-image-url-post: url('<%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: url('<%= page["header-img"] || autoArchivesImg %>');
      <% } else  { %>
      --intro-header-background-image-url-post: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      <% } %>
    }
    .body--dark {
      <% if(config['header-img'].substr(0, 4) == 'http') { %>
      --intro-header-background-image-url-home: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config["header-img"] %>');
      <% } else  { %>
      --intro-header-background-image-url-home: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root + config["header-img"] %>');
      <% } %> 
      <% if(!(page["header-img"] && page["header-img"].substr(0, 4) != 'http')) { %>
      --intro-header-background-image-url-post: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= page["header-img"] || autoArchivesImg %>');
      <% } else  { %>
      --intro-header-background-image-url-post: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      --intro-header-background-image-url-page: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2)), url('<%= config.jsdelivr.jsdelivr_url + config.jsdelivr.github_username + "/" + config.jsdelivr.github_username %>.github.io@gh-pages<%= config.root %><%= page["header-img"] || autoArchivesImg %>');
      <% } %>
    }

    header.intro-header {
      <% if (is_home()) { %> /*config*/
        background-image: var(--intro-header-background-image-url-home);
        /* background-image: url('<%= config.root + config["header-img"] %>'); */
      <% } else if (is_post()) { %> /*post*/
        background-image: var(--intro-header-background-image-url-post);
        /* background-image: url('<%= config.root %><%= page["header-img"] || autoArchivesImg %>'); */
      <% } else { %> /*page*/
        background-image: var(--intro-header-background-image-url-page);
        /* background-image: url('<%= config.root %><%= page["header-img"] || autoArchivesImg %>'); */
      <% } %>
    }

    <% if (config.signature) { %>
      #signature {/*signature*/
        background-image: url('<%= config.root + config["signature-img"] %>');
      }
    <% } %>
  </style>
<% } %>



<% if (page.layout != 404) { %>
<header class="intro-header">
  <!-- Signature -->
  <div id="signature">
    <div class="container">
      <div class="row">
        <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
          <% if (is_post()) { %>
          <div class="post-heading">
            <div class="tags">
              <% page.tags.forEach(function(tag){ %>
              <a class="tag" href="<%= config.root %>tags/#<%= tag.name %>" title="<%= tag.name %>"><%= tag.name %></a>
              <% }) %>
            </div>
            <h1><%= page.title %></h1>
            <h2 class="subheading"><%= page.subtitle || "" %></h2>
            <span class="meta">
              Posted by <%- page.author || config.author %> on
              <%= page.date.format(config.date_format) %>
            </span>


            <% if(config.wordcount) { %>
            <!-- WordCount start -->
            <div class="blank_box"></div>
            <span class="meta">
              Estimated Reading Time <span class="post-count"><%= min2read(page.content) %></span> Minutes
            </span>
            <div class="blank_box"></div>
            <span class="meta">
              Words <span class="post-count"><%= wordcount(page.content) %></span> In Total
            </span>
            <div class="blank_box"></div>
            <!-- WordCount end -->
            <% } %>
            <% if(config.busuanzi) { %>
            <!-- 不蒜子统计 start -->
            <!-- <span class="meta" id="busuanzi_container_page_pv">
              Viewed <span id="busuanzi_value_page_pv"><i class="fa fa-spinner fa-spin"></i></span> Times
            </span> -->
            <!-- 不蒜子统计 end -->
            <% } %>


          </div>
          <% } else { %>
          <div class="site-heading">
            <h1><%= page.title || config.title %></h1>
            <!--<hr class="small">-->
            <span class="subheading"><%= page.description || config.subtitle || "" %></span>
          </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <% if (config.wave) { %>
  <!-- waveoverlay start -->
  <div class="preview-overlay">
    <svg class="preview-waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
      <defs>
        <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path>
      </defs>
      <g class="preview-parallax">
        <use xlink:href="#gentle-wave" x="48" y="0" fill=var(--gentle-wave1)></use>
        <use xlink:href="#gentle-wave" x="48" y="3" fill=var(--gentle-wave2)></use>
        <use xlink:href="#gentle-wave" x="48" y="5" fill=var(--gentle-wave3)></use>
        <use xlink:href="#gentle-wave" x="48" y="7" fill=var(--gentle-wave)></use>
      </g>
    </svg>
  </div>
  <!-- waveoverlay end -->
  <% } %>

</header>
<% } %>
