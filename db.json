{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","path":"js/third-party/nprogress.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d5cf9631bd208967f35c5ef41bbc763725f39783","modified":1629233630341},{"_id":"source/_posts/.DS_Store","hash":"6d11f468c7fb928c4f3c9ad2792c4961d5dda502","modified":1629233800565},{"_id":"source/categories/index.md","hash":"514576f47747cfb63a4bec9da44c113984fac5e1","modified":1629232626341},{"_id":"source/about/index.md","hash":"92b0427690600b1850426c124900f6e2cfd7bdd9","modified":1629232677051},{"_id":"source/tags/index.md","hash":"a9c9615c832d7b1486f0eb0489865f07eadb7938","modified":1629232644219},{"_id":"source/_posts/Java并发编程/20180830-Java并发编程-CPU缓存.md","hash":"c8790544c347913f446a1536f3af2ff78be737a8","modified":1620128618461},{"_id":"source/_posts/Java并发编程/20180830-Java并发编程-什么是高并发.md","hash":"89aa6d79edbf718a718a8d38a70ae58a626f3139","modified":1620128618461},{"_id":"source/_posts/Linux/.DS_Store","hash":"278e6d32b26c8d6ebc89b1980daa2f99e2382313","modified":1629233668615},{"_id":"source/_posts/Java并发编程/.DS_Store","hash":"c9e0149537931559668ecc76d1ffb16e872caa6e","modified":1629233630340},{"_id":"source/_posts/Linux/20181113-常用Linux命令.md","hash":"412803924f2223953eabea82b8a1e54b6d59253c","modified":1629217308470},{"_id":"source/_posts/Java并发编程/20180830-Java并发编程-线程安全性.md","hash":"7ab9717454c0c3e58da11e4fa8d94eea6e032a13","modified":1620128618462},{"_id":"source/_posts/NIO与网络编程/20190624-实现 NIO Socket.md","hash":"334a57767bc9733effe843e179a5b63602f83192","modified":1620128618462},{"_id":"source/_posts/NIO与网络编程/.DS_Store","hash":"c691b56200263b23e3f963ec76188074c5e76f93","modified":1629233712394},{"_id":"source/_posts/NIO与网络编程/20200601-TCP RST 相关理解.md","hash":"a42f2d091aeb03a948856ad478e746b704802bab","modified":1620128618462},{"_id":"source/_posts/NIO与网络编程/20200601-epoll.md","hash":"da8a58a739b80e22ea908301ff33aaf82d76ec57","modified":1620128618462},{"_id":"source/_posts/分布式/20210817-Google论文、开源与云计算.md","hash":"90be8e079aadf14b6cf5130bd41de3c35016641a","modified":1629230610909},{"_id":"source/_posts/容器化/.DS_Store","hash":"a16f0565de7cd2f7b8315f2496618e47312f41a0","modified":1629234175826},{"_id":"source/_posts/分布式/.DS_Store","hash":"86252f7f92ca8404955e1bd812699ac6568993a2","modified":1629233726195},{"_id":"source/_posts/容器化/20210718-docker.md","hash":"03b4253f0131ebcb319e43836c8cc1ef461363cb","modified":1629225934836},{"_id":"source/_posts/微服务/20180803-Dubbo+Zookeeper-使用-SpringBoot-(dubbo-spring-boot-starter)-快速搭建RPC分布式.md","hash":"905bc6d82ab8904ccf55463c1f9fba2f28089d3e","modified":1620128618463},{"_id":"source/_posts/微服务/.DS_Store","hash":"ac5ad17c2ac70dd5e465ed67379f485c679cc470","modified":1629233526555},{"_id":"source/_posts/微服务/20180803-SpringCloud-服务消费者（rest+ribbon-Feign）.md","hash":"e00e80c77ed605a564ee709d7993294982f47644","modified":1620128618463},{"_id":"source/_posts/微服务/20180803-什么是微服务.md","hash":"51d498c22a84b75d31eb9e5428ff8b3c3f375465","modified":1620128618463},{"_id":"source/_posts/容器化/20210801-kubernetes.md","hash":"e68d62c75d4a1fb03339fa81cbb150786f125086","modified":1629225934836},{"_id":"source/_posts/机器学习/.DS_Store","hash":"2e6d031eccc164c60454bdd860b55cbdf14f963f","modified":1629233777605},{"_id":"source/_posts/微服务/20180803-SpringCloud-服务的注册与发现Eureka.md","hash":"313a51ce8fb7cee4543b075ef5da5642b7a8a2f5","modified":1629217308472},{"_id":"source/_posts/机器学习/20181204-机器学习-线性模型.md","hash":"5a534c995780d2fb7cda4d3b2bb908ad0240f67c","modified":1629234361498},{"_id":"source/_posts/机器学习/20181204-使用Logistic 增长模型拟合感染人数 (2.11 日更新).md","hash":"da03b9420b8b4203c76de94d4c24bdcff74d4666","modified":1629225934768},{"_id":"source/_posts/机器学习/20181204-机器学习(ML)-入门知识.md","hash":"6b27b743b81d60e988b6dd2cadda7a9616ed3aef","modified":1629225934768},{"_id":"source/_posts/机器学习/20181204-深度学习概述.md","hash":"72f0ab2ae56719029fd94b2b9875560af00d16ad","modified":1629225934769},{"_id":"source/_posts/机器学习/20181204-神经网络.md","hash":"e2abd9afb87d6914d8efed4e70e9d0334f1d7f22","modified":1629225934770},{"_id":"source/_posts/机器学习/20181204-机器学习利器之Numpy.md","hash":"ca61e81a6c715097890667f6361bf3a0fe5930bf","modified":1629225934769},{"_id":"source/_posts/杂记/.DS_Store","hash":"de6ef0c18e206ac3ff15eacfc3afbdf9b09aef0e","modified":1629233587010},{"_id":"source/_posts/杂记/20181116subList()-的坑.md","hash":"aaa2172c3d0b0c9cbfacfb19ef16667ea0975579","modified":1620128618464},{"_id":"source/_posts/杂记/20181016-@Autowired-与@Resource.md","hash":"350eed637db7ec544d1ab8e7b93e18379738aff5","modified":1620128618464},{"_id":"source/_posts/杂记/20181113-Python-数据类型.md","hash":"b2562678ec7283361d9eeaf49f88576ebeef95a9","modified":1620128618464},{"_id":"source/_posts/算法集/.DS_Store","hash":"4539abd15019ebf3c2546d5278600c6ca37978e2","modified":1629233492696},{"_id":"source/_posts/算法集/20180818-算法集-LeetCode-167-两数之和II---输入有序数组.md","hash":"213abfa306845abcb99c4cc39bf26cea0ccf8739","modified":1629217308473},{"_id":"source/_posts/算法集/20180818-算法集-leetcode-两数之和(Two-Sum).md","hash":"cf932266a6bb9dbc60852b9e200b7e42d70caf80","modified":1629217308473},{"_id":"source/_posts/算法集/20180818-算法集-LeetCode-215-寻找数组中第k大元素.md","hash":"28cc530aa089e250f4f4d98b8811615fa9a2ad03","modified":1629217308473},{"_id":"source/_posts/算法集/20180818-算法集-leetcode-两数相加(Add-Two-Numbers).md","hash":"b9c79facdc289927c01b6c22ec179b3aa6ad7d84","modified":1629217308473},{"_id":"source/_posts/算法集/20180818-算法集-找出缺失的数字.md","hash":"441d25fa81b8b624d9e8281dfae66f33a7b2df7d","modified":1629217308473},{"_id":"source/_posts/计算机基础/20180813-数据结构-基本概念.md","hash":"1605129bda8d40556d638a2b8d16fab993492ef5","modified":1629225934805},{"_id":"source/_posts/算法集/20180818-算法集-初篇.md","hash":"ef4b2e8ea294b3ad981f4f4fa9ce963bf0047763","modified":1629217308473},{"_id":"source/_posts/计算机基础/20180814-数据结构-线性表.md","hash":"c3766e59b4f9e112fa4d8c9e2908fc628b54cf2e","modified":1629225934805},{"_id":"source/_posts/计算机基础/20200420-二进制、计算机编码、位运算.md","hash":"ed7f847eecda647160de539fe932d6502eadf5be","modified":1629225934804},{"_id":"source/_posts/计算机基础/.DS_Store","hash":"c97234a8459e924aa3d35d7bdc40a093eadd2161","modified":1629234175825},{"_id":"source/_posts/计算机基础/20180814-数据结构-排序.md","hash":"cfd19702c82229615e3e6199cb233654a5813f4a","modified":1629225934805},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"eff30232f668f47d1f734fdd914fec0d18095817","modified":499162500000},{"_id":"node_modules/hexo-theme-next/package.json","hash":"855fc9da3922da2b26d340cd43185252822a6d56","modified":1629234205711},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"2924be391e4841e2166e83d4d18515c4d247653f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2a9861db4547a524b2609c1e7e1061d2e9d48ee4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"99ab10d9aef1ee5ae5e8f3572ac0de25c3cc4416","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"13e7badc036e989307069f65b179deb107012435","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"454ed1fac07be972c7ec911092f0995cd925aab3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"80fd1a45e91207fc16df1136e12b8b71b4f65dea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"2ecaa30ec42d28ef769d875cf2d26959b8de7d24","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"1084e38df2f05a2f58df7f987e660775e9be1bf2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"cdf2a692baa5cd34104ffabced2c5ef608b62cf5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"13b3301aa9b613975630502d93e6ae82c5293aa8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"dbac7197ebffecf4bf32f8a3cddef434f17f2ca1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4f482514230c941c9475e1272188e53a54975463","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":499162500000},{"_id":"public/content.json","hash":"27bae24a859058bf2e0d46ed235e8f693a92a057","modified":1629234734918},{"_id":"public/categories/index.html","hash":"2f61b67a10ad18bb7b05f75086a3d70c513f2739","modified":1629234734918},{"_id":"public/tags/index.html","hash":"4176671d26cc165b81654d0107c00411a33d1a4e","modified":1629234734918},{"_id":"public/about/index.html","hash":"45828b29d2586895a4a1d8827a897fc61475217a","modified":1629234734918},{"_id":"public/2020/06/01/NIO与网络编程/20200601-TCP RST 相关理解/index.html","hash":"f4596e7a3d766b0fca1391f133a16f248c18e779","modified":1629234734918},{"_id":"public/2020/06/01/NIO与网络编程/20200601-epoll/index.html","hash":"ce110079bf0f1eaf30beb5ab24d07cc16ce364f7","modified":1629234734918},{"_id":"public/2018/12/04/机器学习/20181204-深度学习概述/index.html","hash":"c07abb4473c4ec9e5ab6529b7e318543ec94355e","modified":1629234734918},{"_id":"public/2018/12/04/机器学习/20181204-神经网络/index.html","hash":"18df380fa61807ac6f06bf82283a4ecda262df39","modified":1629234734918},{"_id":"public/2018/11/16/杂记/20181116subList()-的坑/index.html","hash":"0cb0fdfd86fba4c82820bac8b15951e4809cfac5","modified":1629234734918},{"_id":"public/2018/10/16/杂记/20181016-@Autowired-与@Resource/index.html","hash":"5edeecb817630baa96fdb6d9579b52fae5cee076","modified":1629234734918},{"_id":"public/2018/08/30/Java并发编程/20180830-Java并发编程-什么是高并发/index.html","hash":"17bf28ce6b6039a37bd565f7b66084a5c206bdb0","modified":1629234734918},{"_id":"public/2018/08/30/Java并发编程/20180830-Java并发编程-CPU缓存/index.html","hash":"439f20ed83ab1fe0a150d61a5f1459aea700a47a","modified":1629234734918},{"_id":"public/2018/08/18/算法集/20180818-算法集-初篇/index.html","hash":"c702b6b4c2891408281b75c15c3a25aefbeb3112","modified":1629234734918},{"_id":"public/2018/08/03/微服务/20180803-什么是微服务/index.html","hash":"f960b195f497bb363f9b01df55bc79e81f4fcc14","modified":1629234734918},{"_id":"public/archives/index.html","hash":"5cc54d2c2e85c9274e14d6ea55fdcfe6f494323d","modified":1629234734918},{"_id":"public/archives/page/2/index.html","hash":"19e609d2a34862f30a1ab080906a924c141ef442","modified":1629234734918},{"_id":"public/archives/page/3/index.html","hash":"684528ce78f0039797678deca1169e6acf10baad","modified":1629234734918},{"_id":"public/archives/page/4/index.html","hash":"31a52c58d44ca67b9253f26f3c1d83f344a92dfc","modified":1629234734918},{"_id":"public/archives/2018/index.html","hash":"f2526032e8544d5342dc6ac6eb9fa4b2e47f5fa6","modified":1629234734918},{"_id":"public/archives/2018/page/2/index.html","hash":"24a6f5693f74c5fe1a2b5bce38c48f7495f99fb2","modified":1629234734918},{"_id":"public/archives/2018/page/3/index.html","hash":"33d45e0ee60737587f5b648403460c01f300865f","modified":1629234734918},{"_id":"public/archives/2018/08/index.html","hash":"34c5a83dbb5de1d004e0722897b5a6b924f5ca72","modified":1629234734918},{"_id":"public/archives/2018/08/page/2/index.html","hash":"3d2676a5b7ec5dfa158a51c8ad6056cad89b0ce0","modified":1629234734918},{"_id":"public/archives/2018/10/index.html","hash":"e68e9e84c16d543b123008c332516780f52f4081","modified":1629234734918},{"_id":"public/archives/2018/11/index.html","hash":"28fabf39489e2b21bd1c35f6bdfc5210964edf14","modified":1629234734918},{"_id":"public/archives/2018/12/index.html","hash":"dfaa5b0c439e272bf1e4260fd433835b407f1543","modified":1629234734918},{"_id":"public/archives/2019/index.html","hash":"df920e058e58dd4e498c2f6f3fbf6184d997579f","modified":1629234734918},{"_id":"public/archives/2020/index.html","hash":"5eedd781f3df677c39b40b1a00d82a53da96d956","modified":1629234734918},{"_id":"public/archives/2020/04/index.html","hash":"d067d6e90344fce61e8efdcc42f6cc4775eba317","modified":1629234734918},{"_id":"public/archives/2019/06/index.html","hash":"e35adafeb21d165313765df76b002b9f92cfd26e","modified":1629234734918},{"_id":"public/archives/2020/06/index.html","hash":"d68e2ee1ae83760a6ccf640a48a5e32c1cf0482c","modified":1629234734918},{"_id":"public/archives/2021/index.html","hash":"190809e0a384fd1a059c4ef6e7e9747fedbb2c2c","modified":1629234734918},{"_id":"public/archives/2021/07/index.html","hash":"abc8a269fd9d1d2921a659eef75dd20220c9c2fe","modified":1629234734918},{"_id":"public/archives/2021/08/index.html","hash":"9f20a9e73d2e04ca49926149bfd6296163f23e96","modified":1629234734918},{"_id":"public/categories/Java并发编程/index.html","hash":"fa45113a740a6b4ac778230e3763d0c618b7caf6","modified":1629234734918},{"_id":"public/categories/Linux/index.html","hash":"07f1db98b5b4ecba51812144c00c1a923dc9a00e","modified":1629234734918},{"_id":"public/categories/NIO与网络编程/index.html","hash":"6176a07af0613199e68f8ca816026a404b957e16","modified":1629234734918},{"_id":"public/categories/容器化/index.html","hash":"8b1c5a158c7b158fc3d580a488e10bd68a670f90","modified":1629234734918},{"_id":"public/categories/微服务/index.html","hash":"9943b820a2722162383f28e321bd404ca8e70c5d","modified":1629234734918},{"_id":"public/categories/机器学习/index.html","hash":"d66f5fd9e673a548304b25e4e579eedc6c094164","modified":1629234734918},{"_id":"public/categories/杂记/index.html","hash":"d0fe3840022e1ac5dcf9e8321cc80b7043348d1c","modified":1629234734918},{"_id":"public/categories/算法集/index.html","hash":"1d4e3cebc3d64855de7a554aec6cf3ec8b9c05a6","modified":1629234734918},{"_id":"public/categories/计算机基础/index.html","hash":"552559a581efb23d86bbfae9d51edfa34afbe65b","modified":1629234734918},{"_id":"public/categories/分布式/index.html","hash":"9224d6de526b585b734fb09d93841c0a99b8c901","modified":1629234734918},{"_id":"public/2021/08/17/分布式/20210817-Google论文、开源与云计算/index.html","hash":"c6f9cf73840bbc7eece83e046f8b147d85d802c9","modified":1629234734918},{"_id":"public/2021/08/01/容器化/20210801-kubernetes/index.html","hash":"d467f2746ef3049e644936af54937da24752c4d4","modified":1629234734918},{"_id":"public/2021/07/18/容器化/20210718-docker/index.html","hash":"a761fd2db1a651f7e7a072773e391316eaf4ed4c","modified":1629234734918},{"_id":"public/2020/04/20/计算机基础/20200420-二进制、计算机编码、位运算/index.html","hash":"4b51b1d78601e2443564b9ccf449276fa93e2ddf","modified":1629234734918},{"_id":"public/2019/06/24/NIO与网络编程/20190624-实现 NIO Socket/index.html","hash":"d70af018f5523825977523b891d06417021f6492","modified":1629234734918},{"_id":"public/2018/12/04/机器学习/20181204-使用Logistic 增长模型拟合感染人数 (2.11 日更新)/index.html","hash":"292e1fd44cd404442d3f13fbce96327fef28df5f","modified":1629234734918},{"_id":"public/2018/12/04/机器学习/20181204-机器学习(ML)-入门知识/index.html","hash":"d6597f240a8c3f05f8dbd49dff0ab4078592abc3","modified":1629234734918},{"_id":"public/2018/12/04/机器学习/20181204-机器学习-线性模型/index.html","hash":"774be9f7c7ece822e75f2d2ddc815949f43adeeb","modified":1629234734918},{"_id":"public/2018/12/04/机器学习/20181204-机器学习利器之Numpy/index.html","hash":"6f5490a6d1776577910298156cd713b43ff0adc7","modified":1629234734918},{"_id":"public/2018/11/13/Linux/20181113-常用Linux命令/index.html","hash":"10e21d7763655353893e3d278dab681d33149338","modified":1629234734918},{"_id":"public/2018/11/13/杂记/20181113-Python-数据类型/index.html","hash":"a04464c81337901b77af0b88b2b0f0ac981bfd06","modified":1629234734918},{"_id":"public/2018/08/30/Java并发编程/20180830-Java并发编程-线程安全性/index.html","hash":"fe6d316e5b1b77c8c23fd019c49872531d8e0039","modified":1629234734918},{"_id":"public/2018/08/18/算法集/20180818-算法集-LeetCode-167-两数之和II---输入有序数组/index.html","hash":"db0b322365ef1fc79c74d8017404ee44509015ea","modified":1629234734918},{"_id":"public/2018/08/18/算法集/20180818-算法集-LeetCode-215-寻找数组中第k大元素/index.html","hash":"71830f60e982f28a677f9ff9160e48d086f5291d","modified":1629234734918},{"_id":"public/2018/08/18/算法集/20180818-算法集-leetcode-两数之和(Two-Sum)/index.html","hash":"29286e4dca48f77ef905433ec872b63ac3c1beb2","modified":1629234734918},{"_id":"public/2018/08/18/算法集/20180818-算法集-leetcode-两数相加(Add-Two-Numbers)/index.html","hash":"387f7c50a7ea43fac1e29b84bbde949e7a6cda9b","modified":1629234734918},{"_id":"public/2018/08/18/算法集/20180818-算法集-找出缺失的数字/index.html","hash":"e97431a8e451104bee9f63b5916dff1f11284fd6","modified":1629234734918},{"_id":"public/2018/08/14/计算机基础/20180814-数据结构-排序/index.html","hash":"4692b2abcf59a3ef84adaf19848f8f19307a0f4d","modified":1629234734918},{"_id":"public/2018/08/14/计算机基础/20180814-数据结构-线性表/index.html","hash":"5584481e40449ceee7a06b4aab336336df1c0f5e","modified":1629234734918},{"_id":"public/2018/08/13/计算机基础/20180813-数据结构-基本概念/index.html","hash":"9d4c8146225ec25d346ad2386922d85de8af50ba","modified":1629234734918},{"_id":"public/2018/08/03/微服务/20180803-Dubbo+Zookeeper-使用-SpringBoot-(dubbo-spring-boot-starter)-快速搭建RPC分布式/index.html","hash":"00394138a05e80a006783fa2893fd16794daaadc","modified":1629234734918},{"_id":"public/2018/08/03/微服务/20180803-SpringCloud-服务消费者（rest+ribbon-Feign）/index.html","hash":"27f8dfaa81c17fa37eeba261ffa8868d48bb71e7","modified":1629234734918},{"_id":"public/2018/08/03/微服务/20180803-SpringCloud-服务的注册与发现Eureka/index.html","hash":"d1747d17ee3e9e0ceabfcac1b0162087464ba186","modified":1629234734918},{"_id":"public/index.html","hash":"51250845f5c8b2bb9779b8e633580026d2e18c62","modified":1629234734918},{"_id":"public/page/2/index.html","hash":"e975ba2dc7618c114e5bc93b38c9556dfde820f0","modified":1629234734918},{"_id":"public/page/3/index.html","hash":"702a30ec5b1f692433854e111a98fc4804007c04","modified":1629234734918},{"_id":"public/page/4/index.html","hash":"6ce2d7af486cdc3bd15d8ba08cb78a7f1ed26724","modified":1629234734918},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629234734918},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629234734918},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1629234734918},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629234734918},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1629234734918},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1629234734918},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1629234734918},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1629234734918},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1629234734918},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1629234734918},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1629234734918},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1629234734918},{"_id":"public/js/next-boot.js","hash":"2ecaa30ec42d28ef769d875cf2d26959b8de7d24","modified":1629234734918},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1629234734918},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1629234734918},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1629234734918},{"_id":"public/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1629234734918},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1629234734918},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1629234734918},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1629234734918},{"_id":"public/js/utils.js","hash":"cdf2a692baa5cd34104ffabced2c5ef608b62cf5","modified":1629234734918},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1629234734918},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1629234734918},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1629234734918},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1629234734918},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1629234734918},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1629234734918},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1629234734918},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1629234734918},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1629234734918},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1629234734918},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1629234734918},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1629234734918},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1629234734918},{"_id":"public/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":1629234734918},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1629234734918},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1629234734918},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1629234734918},{"_id":"public/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1629234734918},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1629234734918},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1629234734918},{"_id":"public/css/main.css","hash":"a7e5e84512664cafeea2d5c647aed8cb1550a27d","modified":1629234734918}],"Category":[{"name":"Java并发编程","_id":"cksgjzedc0012nnvb9hzv09bp"},{"name":"Linux","_id":"cksgjzegb0014nnvb0gh7ckzp"},{"name":"NIO与网络编程","_id":"cksgjzegk0017nnvbce0wcs9k"},{"name":"容器化","_id":"cksgjzegk001annvb3p4125a3"},{"name":"微服务","_id":"cksgjzegl001ennvbhodj70fb"},{"name":"机器学习","_id":"cksgjzegm001mnnvb2hrgcxkd"},{"name":"杂记","_id":"cksgjzegn001ynnvbera58zen"},{"name":"算法集","_id":"cksgjzego0024nnvbehg07xwc"},{"name":"计算机基础","_id":"cksgjzegp002gnnvba82f79ha"},{"name":"分布式","_id":"cksgjzegr002snnvb4u6vdywy"}],"Data":[],"Page":[{"title":"categories","date":"2021-08-17T20:35:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-08-18 04:35:51\ntype: \"categories\"\n---\n","updated":"2021-08-17T20:37:06.341Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cksgjze070000nnvb6c9i8jvo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-08-17T20:33:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-18 04:33:25\ntype: \"tags\"\n---\n","updated":"2021-08-17T20:37:24.219Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cksgjze0e0002nnvbc1cbf331","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-08-17T20:36:02.000Z","_content":"## 自我介绍","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-18 04:36:02\n---\n## 自我介绍","updated":"2021-08-17T20:37:57.051Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksgjze1v000znnvb56347141","content":"<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2>","site":{"data":{}},"excerpt":"自我介绍","more":"<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2>"}],"Post":[{"_content":"最近想把并发编程系统的学一下，于是参考慕课网视频边学边写博客，记录一下。\n\n基本概念：\n* **并发**：同时拥有两个或多个现场，如果出现在单核处理器上运行,多个线程将交替地换入或换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态。如果在多核处理器上，程序中的每个线程都将分配到一个处理器核心上，此时则成为 ***并行***\n* **高并发**：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑因素之一，它通常指，通过设计保证系统能够**同时并行处理**很多请求\n\n![基础知识.png](https://upload-images.jianshu.io/upload_images/12637001-09a7a98b8c724672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![并发线程安全处理.png](https://upload-images.jianshu.io/upload_images/12637001-3016e15c6c7df571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![高并发处理手段.png](https://upload-images.jianshu.io/upload_images/12637001-7f2f6a6fa7729dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Java并发编程/20180830-Java并发编程-什么是高并发.md","raw":"最近想把并发编程系统的学一下，于是参考慕课网视频边学边写博客，记录一下。\n\n基本概念：\n* **并发**：同时拥有两个或多个现场，如果出现在单核处理器上运行,多个线程将交替地换入或换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态。如果在多核处理器上，程序中的每个线程都将分配到一个处理器核心上，此时则成为 ***并行***\n* **高并发**：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑因素之一，它通常指，通过设计保证系统能够**同时并行处理**很多请求\n\n![基础知识.png](https://upload-images.jianshu.io/upload_images/12637001-09a7a98b8c724672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![并发线程安全处理.png](https://upload-images.jianshu.io/upload_images/12637001-3016e15c6c7df571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![高并发处理手段.png](https://upload-images.jianshu.io/upload_images/12637001-7f2f6a6fa7729dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Java并发编程/20180830-Java并发编程-什么是高并发","published":1,"date":"2018-08-29T16:00:00.000Z","updated":"2021-05-04T11:43:38.461Z","title":"Java并发编程-什么是高并发","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0a0001nnvbam8f811o","content":"<p>最近想把并发编程系统的学一下，于是参考慕课网视频边学边写博客，记录一下。</p>\n<p>基本概念：</p>\n<ul>\n<li><strong>并发</strong>：同时拥有两个或多个现场，如果出现在单核处理器上运行,多个线程将交替地换入或换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态。如果在多核处理器上，程序中的每个线程都将分配到一个处理器核心上，此时则成为 <em><strong>并行</strong></em></li>\n<li><strong>高并发</strong>：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑因素之一，它通常指，通过设计保证系统能够<strong>同时并行处理</strong>很多请求</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-09a7a98b8c724672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"基础知识.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3016e15c6c7df571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"并发线程安全处理.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-7f2f6a6fa7729dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"高并发处理手段.png\"></p>\n","site":{"data":{}},"abbrlink":"9FS8XE","excerpt":"最近想把并发编程系统的学一下，于是参考慕课网视频边学边写博客，记录一下。\n\n基本概念：\n\n * 并发：同时拥有两个或多个现场，如果出现在单核处理器上运行,多个线程将交替地换入或换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态。如果在多核处理器上，程序中的每个线程都将分配到一个处理器核心上，此时则成为 并行\n * 高并发：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑因素之一，它通常指，通过设计保证系统能够同时并行处理很多请求","more":"<p>最近想把并发编程系统的学一下，于是参考慕课网视频边学边写博客，记录一下。</p>\n<p>基本概念：</p>\n<ul>\n<li><strong>并发</strong>：同时拥有两个或多个现场，如果出现在单核处理器上运行,多个线程将交替地换入或换出内存，这些线程是同时“存在”的，每个线程都处于执行过程中的某个状态。如果在多核处理器上，程序中的每个线程都将分配到一个处理器核心上，此时则成为 <em><strong>并行</strong></em></li>\n<li><strong>高并发</strong>：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑因素之一，它通常指，通过设计保证系统能够<strong>同时并行处理</strong>很多请求</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-09a7a98b8c724672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"基础知识.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3016e15c6c7df571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"并发线程安全处理.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-7f2f6a6fa7729dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"高并发处理手段.png\"></p>\n"},{"_content":"### 什么是线程安全性\n线程安全性：当多个线程访问某个类时，不管运行时采用**何种调度方式**或者这些线程将被如何交替执行，并且在主调代码中**不需要任何额外的同步或协同**，这个类都能表现出**正确的行为**，那么就称这个类是线程安全的。\n\n### 并发中三个特性（解决线程安全问题的主要关注点）\n* 原子性：提供了互斥操作，**同一时刻只允许一个线程**对共享资源进行操作\n* 可见性：当一个线程修改了共享变量的值，其他线程可以**立即得知这个修改**\n* 有序性：一个线程观察其他线程指令的执行顺序，由于**指令重排序**的存在，该观察结果一般是**无序**的\n\n### 原子性\n###### JDK提供了Atomic包来实现原子性（CAS）\n>CAS（compareAndSwap）：一个原子操作有三个操作数，V为变量的内存位置，A为期望的旧职，B为要跟新的新值。CAS执行时，当且仅当v取出主内存中变量的当前值与A相等时，处理器才会用新值B去更新V的值，否在不执行更新。\n\nCAS存在的问题：CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作\n1.  ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。\n关于ABA问题参考文档: http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\n\n2. 循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。\n\n3. 只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\n* AtomicXXX: CAS、Unsafe.compareAndSwapInt、AtomicReference（操作对象）、AtomicIntegerFieldUpdater、LongAdder、AtomicStampedReference\n\n* LongAdder在AtomicLong的基础上将单点的更新压力分散到各个节点，在低并发的时候通过对base的直接更新可以很好的保障和AtomicLong的性能基本保持一致，而在高并发的时候通过分散提高了性能。\n缺点是LongAdder在统计的时候如果有并发更新，可能导致统计的数据有误差。\n\n* AtomicStampedReference 解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\n\n ###### synchronized（依赖jvm）\n一种同步锁，修饰对象有四种\n* 修饰this：同步范围大括号括起来的代码，作用于**调用对象**\n* 修饰方法：同步范围整个方法，作用于**调用对象**\n* 修饰静态方法：同步范围整个静态方法，作用于**所有对象**\n* 修饰类class：同步范围大括号括起来的代码，作用于**所有对象**\n\n*synchronized 不会被继承*\n\n ###### Lock （依赖特殊CPU指令，代码实现，ReentrantLock）\n\n###### 原子性总结：\nsynchronized: 不可中断的锁，适合竞争不激烈，代码可读性好\nLock: 可中断锁，竞争激烈时能维持常态\nAtomic: 竞争激烈时刻维持常态，比Lock性能好；但只能同步一个值\n\n### 可见性\n导致共享变量在线程间不可见的原因：\n* 线程交叉执行\n* 指令重排序结合线程交叉执行\n* 共享变量更新后的值没有在工作内存与主存间及时更新\n\nJMM关于synchronized 两条规则：\n1. 线程解锁前，必须把共享变量的最新值刷新到主内存\n2. 线程解锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意加速解锁是同一把锁）\n\nJMM关于volatitle两条规则：\n1. 对volatile变量写操作时，会在写操作后加入一条store指令，将本地内存中的共享变量的值刷新到主内存\n2.  对volatile变量读操作时，会在读操作前加入一条load指令，从主内存中读取共享变量\n\n### 有序性\n禁止指令重排序\n","source":"_posts/Java并发编程/20180830-Java并发编程-线程安全性.md","raw":"### 什么是线程安全性\n线程安全性：当多个线程访问某个类时，不管运行时采用**何种调度方式**或者这些线程将被如何交替执行，并且在主调代码中**不需要任何额外的同步或协同**，这个类都能表现出**正确的行为**，那么就称这个类是线程安全的。\n\n### 并发中三个特性（解决线程安全问题的主要关注点）\n* 原子性：提供了互斥操作，**同一时刻只允许一个线程**对共享资源进行操作\n* 可见性：当一个线程修改了共享变量的值，其他线程可以**立即得知这个修改**\n* 有序性：一个线程观察其他线程指令的执行顺序，由于**指令重排序**的存在，该观察结果一般是**无序**的\n\n### 原子性\n###### JDK提供了Atomic包来实现原子性（CAS）\n>CAS（compareAndSwap）：一个原子操作有三个操作数，V为变量的内存位置，A为期望的旧职，B为要跟新的新值。CAS执行时，当且仅当v取出主内存中变量的当前值与A相等时，处理器才会用新值B去更新V的值，否在不执行更新。\n\nCAS存在的问题：CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作\n1.  ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。\n关于ABA问题参考文档: http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\n\n2. 循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。\n\n3. 只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。\n* AtomicXXX: CAS、Unsafe.compareAndSwapInt、AtomicReference（操作对象）、AtomicIntegerFieldUpdater、LongAdder、AtomicStampedReference\n\n* LongAdder在AtomicLong的基础上将单点的更新压力分散到各个节点，在低并发的时候通过对base的直接更新可以很好的保障和AtomicLong的性能基本保持一致，而在高并发的时候通过分散提高了性能。\n缺点是LongAdder在统计的时候如果有并发更新，可能导致统计的数据有误差。\n\n* AtomicStampedReference 解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\n\n ###### synchronized（依赖jvm）\n一种同步锁，修饰对象有四种\n* 修饰this：同步范围大括号括起来的代码，作用于**调用对象**\n* 修饰方法：同步范围整个方法，作用于**调用对象**\n* 修饰静态方法：同步范围整个静态方法，作用于**所有对象**\n* 修饰类class：同步范围大括号括起来的代码，作用于**所有对象**\n\n*synchronized 不会被继承*\n\n ###### Lock （依赖特殊CPU指令，代码实现，ReentrantLock）\n\n###### 原子性总结：\nsynchronized: 不可中断的锁，适合竞争不激烈，代码可读性好\nLock: 可中断锁，竞争激烈时能维持常态\nAtomic: 竞争激烈时刻维持常态，比Lock性能好；但只能同步一个值\n\n### 可见性\n导致共享变量在线程间不可见的原因：\n* 线程交叉执行\n* 指令重排序结合线程交叉执行\n* 共享变量更新后的值没有在工作内存与主存间及时更新\n\nJMM关于synchronized 两条规则：\n1. 线程解锁前，必须把共享变量的最新值刷新到主内存\n2. 线程解锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意加速解锁是同一把锁）\n\nJMM关于volatitle两条规则：\n1. 对volatile变量写操作时，会在写操作后加入一条store指令，将本地内存中的共享变量的值刷新到主内存\n2.  对volatile变量读操作时，会在读操作前加入一条load指令，从主内存中读取共享变量\n\n### 有序性\n禁止指令重排序\n","slug":"Java并发编程/20180830-Java并发编程-线程安全性","published":1,"date":"2018-08-29T16:00:00.000Z","updated":"2021-05-04T11:43:38.462Z","title":"Java并发编程-线程安全性","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0f0003nnvb0qpm6zg3","content":"<h3 id=\"什么是线程安全性\"><a href=\"#什么是线程安全性\" class=\"headerlink\" title=\"什么是线程安全性\"></a>什么是线程安全性</h3><p>线程安全性：当多个线程访问某个类时，不管运行时采用<strong>何种调度方式</strong>或者这些线程将被如何交替执行，并且在主调代码中<strong>不需要任何额外的同步或协同</strong>，这个类都能表现出<strong>正确的行为</strong>，那么就称这个类是线程安全的。</p>\n<h3 id=\"并发中三个特性（解决线程安全问题的主要关注点）\"><a href=\"#并发中三个特性（解决线程安全问题的主要关注点）\" class=\"headerlink\" title=\"并发中三个特性（解决线程安全问题的主要关注点）\"></a>并发中三个特性（解决线程安全问题的主要关注点）</h3><ul>\n<li>原子性：提供了互斥操作，<strong>同一时刻只允许一个线程</strong>对共享资源进行操作</li>\n<li>可见性：当一个线程修改了共享变量的值，其他线程可以<strong>立即得知这个修改</strong></li>\n<li>有序性：一个线程观察其他线程指令的执行顺序，由于<strong>指令重排序</strong>的存在，该观察结果一般是<strong>无序</strong>的</li>\n</ul>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><h6 id=\"JDK提供了Atomic包来实现原子性（CAS）\"><a href=\"#JDK提供了Atomic包来实现原子性（CAS）\" class=\"headerlink\" title=\"JDK提供了Atomic包来实现原子性（CAS）\"></a>JDK提供了Atomic包来实现原子性（CAS）</h6><blockquote>\n<p>CAS（compareAndSwap）：一个原子操作有三个操作数，V为变量的内存位置，A为期望的旧职，B为要跟新的新值。CAS执行时，当且仅当v取出主内存中变量的当前值与A相等时，处理器才会用新值B去更新V的值，否在不执行更新。</p>\n</blockquote>\n<p>CAS存在的问题：CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</p>\n<ol>\n<li><p> ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。<br>关于ABA问题参考文档: <a href=\"http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\">http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html</a></p>\n</li>\n<li><p>循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p>\n</li>\n<li><p>只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</p>\n</li>\n</ol>\n<ul>\n<li><p>AtomicXXX: CAS、Unsafe.compareAndSwapInt、AtomicReference（操作对象）、AtomicIntegerFieldUpdater、LongAdder、AtomicStampedReference</p>\n</li>\n<li><p>LongAdder在AtomicLong的基础上将单点的更新压力分散到各个节点，在低并发的时候通过对base的直接更新可以很好的保障和AtomicLong的性能基本保持一致，而在高并发的时候通过分散提高了性能。<br>缺点是LongAdder在统计的时候如果有并发更新，可能导致统计的数据有误差。</p>\n</li>\n<li><p>AtomicStampedReference 解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>\n</li>\n</ul>\n<h6 id=\"synchronized（依赖jvm）\"><a href=\"#synchronized（依赖jvm）\" class=\"headerlink\" title=\"synchronized（依赖jvm）\"></a>synchronized（依赖jvm）</h6><p>一种同步锁，修饰对象有四种</p>\n<ul>\n<li>修饰this：同步范围大括号括起来的代码，作用于<strong>调用对象</strong></li>\n<li>修饰方法：同步范围整个方法，作用于<strong>调用对象</strong></li>\n<li>修饰静态方法：同步范围整个静态方法，作用于<strong>所有对象</strong></li>\n<li>修饰类class：同步范围大括号括起来的代码，作用于<strong>所有对象</strong></li>\n</ul>\n<p><em>synchronized 不会被继承</em></p>\n<h6 id=\"Lock-（依赖特殊CPU指令，代码实现，ReentrantLock）\"><a href=\"#Lock-（依赖特殊CPU指令，代码实现，ReentrantLock）\" class=\"headerlink\" title=\"Lock （依赖特殊CPU指令，代码实现，ReentrantLock）\"></a>Lock （依赖特殊CPU指令，代码实现，ReentrantLock）</h6><h6 id=\"原子性总结：\"><a href=\"#原子性总结：\" class=\"headerlink\" title=\"原子性总结：\"></a>原子性总结：</h6><p>synchronized: 不可中断的锁，适合竞争不激烈，代码可读性好<br>Lock: 可中断锁，竞争激烈时能维持常态<br>Atomic: 竞争激烈时刻维持常态，比Lock性能好；但只能同步一个值</p>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><p>导致共享变量在线程间不可见的原因：</p>\n<ul>\n<li>线程交叉执行</li>\n<li>指令重排序结合线程交叉执行</li>\n<li>共享变量更新后的值没有在工作内存与主存间及时更新</li>\n</ul>\n<p>JMM关于synchronized 两条规则：</p>\n<ol>\n<li>线程解锁前，必须把共享变量的最新值刷新到主内存</li>\n<li>线程解锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意加速解锁是同一把锁）</li>\n</ol>\n<p>JMM关于volatitle两条规则：</p>\n<ol>\n<li>对volatile变量写操作时，会在写操作后加入一条store指令，将本地内存中的共享变量的值刷新到主内存</li>\n<li> 对volatile变量读操作时，会在读操作前加入一条load指令，从主内存中读取共享变量</li>\n</ol>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><p>禁止指令重排序</p>\n","site":{"data":{}},"abbrlink":"1J5YDN3","excerpt":"什么是线程安全性\n线程安全性：当多个线程访问某个类时，不管运行时采用何种调度方式或者这些线程将被如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。\n\n并发中三个特性（解决线程安全问题的主要关注点）\n * 原子性：提供了互斥操作，同一时刻只允许一个线程对共享资源进行操作\n * 可见性：当一个线程修改了共享变量的值，其他线程可以立即得知这个修改\n * 有序性：一个线程观察其他线程指令的执行顺序，由于指令重排序的存在，该观察结果一般是无序的\n\n原子性\nJDK提供了Atomic包来实现原子性（CAS）\nCAS（compareAndSwap","more":"<h3 id=\"什么是线程安全性\"><a href=\"#什么是线程安全性\" class=\"headerlink\" title=\"什么是线程安全性\"></a>什么是线程安全性</h3><p>线程安全性：当多个线程访问某个类时，不管运行时采用<strong>何种调度方式</strong>或者这些线程将被如何交替执行，并且在主调代码中<strong>不需要任何额外的同步或协同</strong>，这个类都能表现出<strong>正确的行为</strong>，那么就称这个类是线程安全的。</p>\n<h3 id=\"并发中三个特性（解决线程安全问题的主要关注点）\"><a href=\"#并发中三个特性（解决线程安全问题的主要关注点）\" class=\"headerlink\" title=\"并发中三个特性（解决线程安全问题的主要关注点）\"></a>并发中三个特性（解决线程安全问题的主要关注点）</h3><ul>\n<li>原子性：提供了互斥操作，<strong>同一时刻只允许一个线程</strong>对共享资源进行操作</li>\n<li>可见性：当一个线程修改了共享变量的值，其他线程可以<strong>立即得知这个修改</strong></li>\n<li>有序性：一个线程观察其他线程指令的执行顺序，由于<strong>指令重排序</strong>的存在，该观察结果一般是<strong>无序</strong>的</li>\n</ul>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><h6 id=\"JDK提供了Atomic包来实现原子性（CAS）\"><a href=\"#JDK提供了Atomic包来实现原子性（CAS）\" class=\"headerlink\" title=\"JDK提供了Atomic包来实现原子性（CAS）\"></a>JDK提供了Atomic包来实现原子性（CAS）</h6><blockquote>\n<p>CAS（compareAndSwap）：一个原子操作有三个操作数，V为变量的内存位置，A为期望的旧职，B为要跟新的新值。CAS执行时，当且仅当v取出主内存中变量的当前值与A相等时，处理器才会用新值B去更新V的值，否在不执行更新。</p>\n</blockquote>\n<p>CAS存在的问题：CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</p>\n<ol>\n<li><p> ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。<br>关于ABA问题参考文档: <a href=\"http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html\">http://blog.hesey.net/2011/09/resolve-aba-by-atomicstampedreference.html</a></p>\n</li>\n<li><p>循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p>\n</li>\n<li><p>只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</p>\n</li>\n</ol>\n<ul>\n<li><p>AtomicXXX: CAS、Unsafe.compareAndSwapInt、AtomicReference（操作对象）、AtomicIntegerFieldUpdater、LongAdder、AtomicStampedReference</p>\n</li>\n<li><p>LongAdder在AtomicLong的基础上将单点的更新压力分散到各个节点，在低并发的时候通过对base的直接更新可以很好的保障和AtomicLong的性能基本保持一致，而在高并发的时候通过分散提高了性能。<br>缺点是LongAdder在统计的时候如果有并发更新，可能导致统计的数据有误差。</p>\n</li>\n<li><p>AtomicStampedReference 解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>\n</li>\n</ul>\n<h6 id=\"synchronized（依赖jvm）\"><a href=\"#synchronized（依赖jvm）\" class=\"headerlink\" title=\"synchronized（依赖jvm）\"></a>synchronized（依赖jvm）</h6><p>一种同步锁，修饰对象有四种</p>\n<ul>\n<li>修饰this：同步范围大括号括起来的代码，作用于<strong>调用对象</strong></li>\n<li>修饰方法：同步范围整个方法，作用于<strong>调用对象</strong></li>\n<li>修饰静态方法：同步范围整个静态方法，作用于<strong>所有对象</strong></li>\n<li>修饰类class：同步范围大括号括起来的代码，作用于<strong>所有对象</strong></li>\n</ul>\n<p><em>synchronized 不会被继承</em></p>\n<h6 id=\"Lock-（依赖特殊CPU指令，代码实现，ReentrantLock）\"><a href=\"#Lock-（依赖特殊CPU指令，代码实现，ReentrantLock）\" class=\"headerlink\" title=\"Lock （依赖特殊CPU指令，代码实现，ReentrantLock）\"></a>Lock （依赖特殊CPU指令，代码实现，ReentrantLock）</h6><h6 id=\"原子性总结：\"><a href=\"#原子性总结：\" class=\"headerlink\" title=\"原子性总结：\"></a>原子性总结：</h6><p>synchronized: 不可中断的锁，适合竞争不激烈，代码可读性好<br>Lock: 可中断锁，竞争激烈时能维持常态<br>Atomic: 竞争激烈时刻维持常态，比Lock性能好；但只能同步一个值</p>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><p>导致共享变量在线程间不可见的原因：</p>\n<ul>\n<li>线程交叉执行</li>\n<li>指令重排序结合线程交叉执行</li>\n<li>共享变量更新后的值没有在工作内存与主存间及时更新</li>\n</ul>\n<p>JMM关于synchronized 两条规则：</p>\n<ol>\n<li>线程解锁前，必须把共享变量的最新值刷新到主内存</li>\n<li>线程解锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意加速解锁是同一把锁）</li>\n</ol>\n<p>JMM关于volatitle两条规则：</p>\n<ol>\n<li>对volatile变量写操作时，会在写操作后加入一条store指令，将本地内存中的共享变量的值刷新到主内存</li>\n<li> 对volatile变量读操作时，会在读操作前加入一条load指令，从主内存中读取共享变量</li>\n</ol>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><p>禁止指令重排序</p>\n"},{"_content":"![shell](https://upload-images.jianshu.io/upload_images/12637001-94ce2b0bc8e55fb4.gif?imageMogr2/auto-orient/strip)\n\n#### 服务器常用\n```shell\n##### 统计含有空指针异常文件数\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" -l | wc -l\n\n##### 统计含有空指针异常行数\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" | wc -l\n\n##### 搜索含有空指针异常的行，并高亮\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" --color\n\n##### 不递归子目录搜索（深度为 1）\nfind ~/ -maxdepth 1 -name \".*\"\n\n##### 查看进程相应信息\nps -ef | grep kafka\n\n##### 查看端口对应的进程号\nlsof -i:9092\n\n##### 查看最后1000行数据\ntail -n 1000 error.log\n\n##### 直接讲GBK换为utf-8并输出\ncat error.log | iconv -f GBK -t UTF-8\n\n##### 统计8080端口实时连接并发数\nnetstat -na|grep ESTAB|grep 8080 | wc -l\n\n##### 通过端口号查出进程，在通过awk，拿到进程号，最后通过jmap查询对应的堆信息\njmap -heap $(lsof -i:8080 | awk '{if(NR==2) print $2}')\n\n##### 逐行读取1.txt内容 转化为：File-->{系统时间}-->{原值+1} 写入2.txt中\n#####   > 会重写文件，如果文件里面有内容会覆盖；>> 追加内容到文件,不会覆盖\n##### 双引号会识别$等保留字，单引号则不会；echo > 1.txt 意思是清空 1.txt内容\nfor i in $(cat 1.txt)\ndo\necho \"File-->`date`-->$(($i+1))\" >> 2.txt\ndone\n\n##### grep 使用正则提取网址\ngrep -ohr -E \"https?://[a-zA-Z0-9\\.\\/_&=@$%~?#-]*\" 1.txt\n\n```\n#### 文件合并、去重、拆分\n```shell\n##### 1. 两个文件合并 (一个文件在上，一个文件在下)\n cat file1 file2 > file3\n\n##### 2. 两个文件合并 (一个文件在左，一个文件在右)\n paste file1 file2 > file3\n\n##### 3. 归并连续出现的重复行\nuniq file3 > file4\n\n##### 4. 输出仅连续出现一次的行列。\nuniq -u file3 > file4\n\n##### 5. 对文本按ASCII 码 正序列排列(-r 逆序 -u相当于sort file3|uniq)\nsort -ru file3 > file4\n\n##### 6.保留原有顺序去重(awk 大法好)\nawk '!a[$0]++' file3 > file4\n\n##### 7.合并file1和file2 在去重后写入file3\ncat file1 file2| awk '!a[$0]++' > file3\n\n##### 8.以2行为单位分割file文件 生成的子文件前缀为split1_\nsplit -2 file split1_\n\n##### 9.以10个字节为单位分割file文件 生成的子文件前缀为split2_\nsplit -b 10 file split2_\n\n##### 10.以10个字节为单位分割file文件 生成的子文件前缀为split3_ ,但-C参数会尽量保持每行的完整性，\n##### 举例：一行有13个字节，那么会切割成两个文件，一个10字节，一个3字节，而-b参数会将8字节累计到下一行凑足十字节再切\nsplit -C 10 file split3_\n\n##### 去掉空行\ncat 1.txt |tr -s '\\n'\n\n##### 并集\nsort 1.txt 2.txt | uniq\n\n##### 交集\ngrep -F -f 1.txt 2.txt | sort | uniq\n\n##### 差集\ngrep -F -v -f 2.txt 1.txt | sort | uniq\n\n```\n\n```shell\n# 查看java版本\n/usr/libexec/java_home -V\n```\n解释下 awk '!a[$0]++' file：https://blog.csdn.net/zhang_red/article/details/8585457\n\n```shell\n# 使用curl 分析请求时间\ncurl -o /dev/null --connect-timeout 5 --max-time 10 -s -w \"http_code=%{http_code},time_namelookup=%{time_namelookup},time_connect=%{time_connect},time_appconnect=%{time_appconnect},time_redirect=%{time_redirect},num_redirects=%{num_redirects},time_pretransfer=%{time_pretransfer},time_starttransfer=%{time_starttransfer},time_total=%{time_total},size_download=%{size_download},speed_download=%{speed_download}\\n\" 'https://www.baidu.com'\n```\n\n```shell\n# 根据每个文件第一行第一列 给文件排序\nfind ./ -maxdepth 1 -name \"*.txt\" -exec awk -v filename={} 'NR==1{print filename,$1}' {} \\; | sort -k2 -n\n```\n\n```shell\n# 统计第二列（以空格为分隔符）含有 \"B\" 的行数\ncut -f 2 -d \" \" ./1.txt | grep \"B\" | wc -l\n```","source":"_posts/Linux/20181113-常用Linux命令.md","raw":"![shell](https://upload-images.jianshu.io/upload_images/12637001-94ce2b0bc8e55fb4.gif?imageMogr2/auto-orient/strip)\n\n#### 服务器常用\n```shell\n##### 统计含有空指针异常文件数\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" -l | wc -l\n\n##### 统计含有空指针异常行数\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" | wc -l\n\n##### 搜索含有空指针异常的行，并高亮\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" --color\n\n##### 不递归子目录搜索（深度为 1）\nfind ~/ -maxdepth 1 -name \".*\"\n\n##### 查看进程相应信息\nps -ef | grep kafka\n\n##### 查看端口对应的进程号\nlsof -i:9092\n\n##### 查看最后1000行数据\ntail -n 1000 error.log\n\n##### 直接讲GBK换为utf-8并输出\ncat error.log | iconv -f GBK -t UTF-8\n\n##### 统计8080端口实时连接并发数\nnetstat -na|grep ESTAB|grep 8080 | wc -l\n\n##### 通过端口号查出进程，在通过awk，拿到进程号，最后通过jmap查询对应的堆信息\njmap -heap $(lsof -i:8080 | awk '{if(NR==2) print $2}')\n\n##### 逐行读取1.txt内容 转化为：File-->{系统时间}-->{原值+1} 写入2.txt中\n#####   > 会重写文件，如果文件里面有内容会覆盖；>> 追加内容到文件,不会覆盖\n##### 双引号会识别$等保留字，单引号则不会；echo > 1.txt 意思是清空 1.txt内容\nfor i in $(cat 1.txt)\ndo\necho \"File-->`date`-->$(($i+1))\" >> 2.txt\ndone\n\n##### grep 使用正则提取网址\ngrep -ohr -E \"https?://[a-zA-Z0-9\\.\\/_&=@$%~?#-]*\" 1.txt\n\n```\n#### 文件合并、去重、拆分\n```shell\n##### 1. 两个文件合并 (一个文件在上，一个文件在下)\n cat file1 file2 > file3\n\n##### 2. 两个文件合并 (一个文件在左，一个文件在右)\n paste file1 file2 > file3\n\n##### 3. 归并连续出现的重复行\nuniq file3 > file4\n\n##### 4. 输出仅连续出现一次的行列。\nuniq -u file3 > file4\n\n##### 5. 对文本按ASCII 码 正序列排列(-r 逆序 -u相当于sort file3|uniq)\nsort -ru file3 > file4\n\n##### 6.保留原有顺序去重(awk 大法好)\nawk '!a[$0]++' file3 > file4\n\n##### 7.合并file1和file2 在去重后写入file3\ncat file1 file2| awk '!a[$0]++' > file3\n\n##### 8.以2行为单位分割file文件 生成的子文件前缀为split1_\nsplit -2 file split1_\n\n##### 9.以10个字节为单位分割file文件 生成的子文件前缀为split2_\nsplit -b 10 file split2_\n\n##### 10.以10个字节为单位分割file文件 生成的子文件前缀为split3_ ,但-C参数会尽量保持每行的完整性，\n##### 举例：一行有13个字节，那么会切割成两个文件，一个10字节，一个3字节，而-b参数会将8字节累计到下一行凑足十字节再切\nsplit -C 10 file split3_\n\n##### 去掉空行\ncat 1.txt |tr -s '\\n'\n\n##### 并集\nsort 1.txt 2.txt | uniq\n\n##### 交集\ngrep -F -f 1.txt 2.txt | sort | uniq\n\n##### 差集\ngrep -F -v -f 2.txt 1.txt | sort | uniq\n\n```\n\n```shell\n# 查看java版本\n/usr/libexec/java_home -V\n```\n解释下 awk '!a[$0]++' file：https://blog.csdn.net/zhang_red/article/details/8585457\n\n```shell\n# 使用curl 分析请求时间\ncurl -o /dev/null --connect-timeout 5 --max-time 10 -s -w \"http_code=%{http_code},time_namelookup=%{time_namelookup},time_connect=%{time_connect},time_appconnect=%{time_appconnect},time_redirect=%{time_redirect},num_redirects=%{num_redirects},time_pretransfer=%{time_pretransfer},time_starttransfer=%{time_starttransfer},time_total=%{time_total},size_download=%{size_download},speed_download=%{speed_download}\\n\" 'https://www.baidu.com'\n```\n\n```shell\n# 根据每个文件第一行第一列 给文件排序\nfind ./ -maxdepth 1 -name \"*.txt\" -exec awk -v filename={} 'NR==1{print filename,$1}' {} \\; | sort -k2 -n\n```\n\n```shell\n# 统计第二列（以空格为分隔符）含有 \"B\" 的行数\ncut -f 2 -d \" \" ./1.txt | grep \"B\" | wc -l\n```","slug":"Linux/20181113-常用Linux命令","published":1,"date":"2018-11-12T16:00:00.000Z","updated":"2021-08-17T16:21:48.470Z","title":"常用Linux命令","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0h0004nnvbf72m38gf","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-94ce2b0bc8e55fb4.gif?imageMogr2/auto-orient/strip\" alt=\"shell\"></p>\n<h4 id=\"服务器常用\"><a href=\"#服务器常用\" class=\"headerlink\" title=\"服务器常用\"></a>服务器常用</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 统计含有空指针异常文件数</span></span></span><br><span class=\"line\">find ~/ -name &quot;*.log&quot;  | xargs grep &quot;NullPointerException&quot; -l | wc -l</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 统计含有空指针异常行数</span></span></span><br><span class=\"line\">find ~/ -name &quot;*.log&quot;  | xargs grep &quot;NullPointerException&quot; | wc -l</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 搜索含有空指针异常的行，并高亮</span></span></span><br><span class=\"line\">find ~/ -name &quot;*.log&quot;  | xargs grep &quot;NullPointerException&quot; --color</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 不递归子目录搜索（深度为 1）</span></span></span><br><span class=\"line\">find ~/ -maxdepth 1 -name &quot;.*&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 查看进程相应信息</span></span></span><br><span class=\"line\">ps -ef | grep kafka</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 查看端口对应的进程号</span></span></span><br><span class=\"line\">lsof -i:9092</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 查看最后1000行数据</span></span></span><br><span class=\"line\">tail -n 1000 error.log</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 直接讲GBK换为utf-8并输出</span></span></span><br><span class=\"line\">cat error.log | iconv -f GBK -t UTF-8</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 统计8080端口实时连接并发数</span></span></span><br><span class=\"line\">netstat -na|grep ESTAB|grep 8080 | wc -l</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 通过端口号查出进程，在通过awk，拿到进程号，最后通过jmap查询对应的堆信息</span></span></span><br><span class=\"line\">jmap -heap $(lsof -i:8080 | awk &#x27;&#123;if(NR==2) print $2&#125;&#x27;)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 逐行读取1.txt内容 转化为：File--&gt;&#123;系统时间&#125;--&gt;&#123;原值+1&#125; 写入2.txt中</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">####   &gt; 会重写文件，如果文件里面有内容会覆盖；&gt;&gt; 追加内容到文件,不会覆盖</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 双引号会识别$等保留字，单引号则不会；echo &gt; 1.txt 意思是清空 1.txt内容</span></span></span><br><span class=\"line\">for i in $(cat 1.txt)</span><br><span class=\"line\">do</span><br><span class=\"line\">echo &quot;File--&gt;`date`--&gt;$(($i+1))&quot; &gt;&gt; 2.txt</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### grep 使用正则提取网址</span></span></span><br><span class=\"line\">grep -ohr -E &quot;https?://[a-zA-Z0-9\\.\\/_&amp;=@$%~?#-]*&quot; 1.txt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件合并、去重、拆分\"><a href=\"#文件合并、去重、拆分\" class=\"headerlink\" title=\"文件合并、去重、拆分\"></a>文件合并、去重、拆分</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 1. 两个文件合并 (一个文件在上，一个文件在下)</span></span></span><br><span class=\"line\"> cat file1 file2 &gt; file3</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 2. 两个文件合并 (一个文件在左，一个文件在右)</span></span></span><br><span class=\"line\"> paste file1 file2 &gt; file3</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 3. 归并连续出现的重复行</span></span></span><br><span class=\"line\">uniq file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 4. 输出仅连续出现一次的行列。</span></span></span><br><span class=\"line\">uniq -u file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 5. 对文本按ASCII 码 正序列排列(-r 逆序 -u相当于sort file3|uniq)</span></span></span><br><span class=\"line\">sort -ru file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 6.保留原有顺序去重(awk 大法好)</span></span></span><br><span class=\"line\">awk &#x27;!a[$0]++&#x27; file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 7.合并file1和file2 在去重后写入file3</span></span></span><br><span class=\"line\">cat file1 file2| awk &#x27;!a[$0]++&#x27; &gt; file3</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 8.以2行为单位分割file文件 生成的子文件前缀为split1_</span></span></span><br><span class=\"line\">split -2 file split1_</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 9.以10个字节为单位分割file文件 生成的子文件前缀为split2_</span></span></span><br><span class=\"line\">split -b 10 file split2_</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 10.以10个字节为单位分割file文件 生成的子文件前缀为split3_ ,但-C参数会尽量保持每行的完整性，</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 举例：一行有13个字节，那么会切割成两个文件，一个10字节，一个3字节，而-b参数会将8字节累计到下一行凑足十字节再切</span></span></span><br><span class=\"line\">split -C 10 file split3_</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 去掉空行</span></span></span><br><span class=\"line\">cat 1.txt |tr -s &#x27;\\n&#x27;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 并集</span></span></span><br><span class=\"line\">sort 1.txt 2.txt | uniq</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 交集</span></span></span><br><span class=\"line\">grep -F -f 1.txt 2.txt | sort | uniq</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 差集</span></span></span><br><span class=\"line\">grep -F -v -f 2.txt 1.txt | sort | uniq</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看java版本</span></span><br><span class=\"line\">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure>\n<p>解释下 awk ‘!a[$0]++’ file：<a href=\"https://blog.csdn.net/zhang_red/article/details/8585457\">https://blog.csdn.net/zhang_red/article/details/8585457</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用curl 分析请求时间</span></span><br><span class=\"line\">curl -o /dev/null --connect-timeout 5 --max-time 10 -s -w &quot;http_code=%&#123;http_code&#125;,time_namelookup=%&#123;time_namelookup&#125;,time_connect=%&#123;time_connect&#125;,time_appconnect=%&#123;time_appconnect&#125;,time_redirect=%&#123;time_redirect&#125;,num_redirects=%&#123;num_redirects&#125;,time_pretransfer=%&#123;time_pretransfer&#125;,time_starttransfer=%&#123;time_starttransfer&#125;,time_total=%&#123;time_total&#125;,size_download=%&#123;size_download&#125;,speed_download=%&#123;speed_download&#125;\\n&quot; &#x27;https://www.baidu.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 根据每个文件第一行第一列 给文件排序</span></span><br><span class=\"line\">find ./ -maxdepth 1 -name &quot;*.txt&quot; -exec awk -v filename=&#123;&#125; &#x27;NR==1&#123;print filename,$1&#125;&#x27; &#123;&#125; \\; | sort -k2 -n</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 统计第二列（以空格为分隔符）含有 <span class=\"string\">&quot;B&quot;</span> 的行数</span></span><br><span class=\"line\">cut -f 2 -d &quot; &quot; ./1.txt | grep &quot;B&quot; | wc -l</span><br></pre></td></tr></table></figure>","site":{"data":{}},"abbrlink":"329MKZ0","excerpt":"服务器常用\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n##### 统计含有空指针异常文件数\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" -l | wc -l\n\n##### 统计含有空指针异常行数\nfind ~/ -name \"*.log\"  | xargs grep \"NullPointerException\" | wc -l\n\n##","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-94ce2b0bc8e55fb4.gif?imageMogr2/auto-orient/strip\" alt=\"shell\"></p>\n<h4 id=\"服务器常用\"><a href=\"#服务器常用\" class=\"headerlink\" title=\"服务器常用\"></a>服务器常用</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 统计含有空指针异常文件数</span></span></span><br><span class=\"line\">find ~/ -name &quot;*.log&quot;  | xargs grep &quot;NullPointerException&quot; -l | wc -l</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 统计含有空指针异常行数</span></span></span><br><span class=\"line\">find ~/ -name &quot;*.log&quot;  | xargs grep &quot;NullPointerException&quot; | wc -l</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 搜索含有空指针异常的行，并高亮</span></span></span><br><span class=\"line\">find ~/ -name &quot;*.log&quot;  | xargs grep &quot;NullPointerException&quot; --color</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 不递归子目录搜索（深度为 1）</span></span></span><br><span class=\"line\">find ~/ -maxdepth 1 -name &quot;.*&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 查看进程相应信息</span></span></span><br><span class=\"line\">ps -ef | grep kafka</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 查看端口对应的进程号</span></span></span><br><span class=\"line\">lsof -i:9092</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 查看最后1000行数据</span></span></span><br><span class=\"line\">tail -n 1000 error.log</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 直接讲GBK换为utf-8并输出</span></span></span><br><span class=\"line\">cat error.log | iconv -f GBK -t UTF-8</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 统计8080端口实时连接并发数</span></span></span><br><span class=\"line\">netstat -na|grep ESTAB|grep 8080 | wc -l</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 通过端口号查出进程，在通过awk，拿到进程号，最后通过jmap查询对应的堆信息</span></span></span><br><span class=\"line\">jmap -heap $(lsof -i:8080 | awk &#x27;&#123;if(NR==2) print $2&#125;&#x27;)</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 逐行读取1.txt内容 转化为：File--&gt;&#123;系统时间&#125;--&gt;&#123;原值+1&#125; 写入2.txt中</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">####   &gt; 会重写文件，如果文件里面有内容会覆盖；&gt;&gt; 追加内容到文件,不会覆盖</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 双引号会识别$等保留字，单引号则不会；echo &gt; 1.txt 意思是清空 1.txt内容</span></span></span><br><span class=\"line\">for i in $(cat 1.txt)</span><br><span class=\"line\">do</span><br><span class=\"line\">echo &quot;File--&gt;`date`--&gt;$(($i+1))&quot; &gt;&gt; 2.txt</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### grep 使用正则提取网址</span></span></span><br><span class=\"line\">grep -ohr -E &quot;https?://[a-zA-Z0-9\\.\\/_&amp;=@$%~?#-]*&quot; 1.txt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"文件合并、去重、拆分\"><a href=\"#文件合并、去重、拆分\" class=\"headerlink\" title=\"文件合并、去重、拆分\"></a>文件合并、去重、拆分</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 1. 两个文件合并 (一个文件在上，一个文件在下)</span></span></span><br><span class=\"line\"> cat file1 file2 &gt; file3</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 2. 两个文件合并 (一个文件在左，一个文件在右)</span></span></span><br><span class=\"line\"> paste file1 file2 &gt; file3</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 3. 归并连续出现的重复行</span></span></span><br><span class=\"line\">uniq file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 4. 输出仅连续出现一次的行列。</span></span></span><br><span class=\"line\">uniq -u file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 5. 对文本按ASCII 码 正序列排列(-r 逆序 -u相当于sort file3|uniq)</span></span></span><br><span class=\"line\">sort -ru file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 6.保留原有顺序去重(awk 大法好)</span></span></span><br><span class=\"line\">awk &#x27;!a[$0]++&#x27; file3 &gt; file4</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 7.合并file1和file2 在去重后写入file3</span></span></span><br><span class=\"line\">cat file1 file2| awk &#x27;!a[$0]++&#x27; &gt; file3</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 8.以2行为单位分割file文件 生成的子文件前缀为split1_</span></span></span><br><span class=\"line\">split -2 file split1_</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 9.以10个字节为单位分割file文件 生成的子文件前缀为split2_</span></span></span><br><span class=\"line\">split -b 10 file split2_</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 10.以10个字节为单位分割file文件 生成的子文件前缀为split3_ ,但-C参数会尽量保持每行的完整性，</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 举例：一行有13个字节，那么会切割成两个文件，一个10字节，一个3字节，而-b参数会将8字节累计到下一行凑足十字节再切</span></span></span><br><span class=\"line\">split -C 10 file split3_</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 去掉空行</span></span></span><br><span class=\"line\">cat 1.txt |tr -s &#x27;\\n&#x27;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 并集</span></span></span><br><span class=\"line\">sort 1.txt 2.txt | uniq</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 交集</span></span></span><br><span class=\"line\">grep -F -f 1.txt 2.txt | sort | uniq</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#### 差集</span></span></span><br><span class=\"line\">grep -F -v -f 2.txt 1.txt | sort | uniq</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看java版本</span></span><br><span class=\"line\">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure>\n<p>解释下 awk ‘!a[$0]++’ file：<a href=\"https://blog.csdn.net/zhang_red/article/details/8585457\">https://blog.csdn.net/zhang_red/article/details/8585457</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用curl 分析请求时间</span></span><br><span class=\"line\">curl -o /dev/null --connect-timeout 5 --max-time 10 -s -w &quot;http_code=%&#123;http_code&#125;,time_namelookup=%&#123;time_namelookup&#125;,time_connect=%&#123;time_connect&#125;,time_appconnect=%&#123;time_appconnect&#125;,time_redirect=%&#123;time_redirect&#125;,num_redirects=%&#123;num_redirects&#125;,time_pretransfer=%&#123;time_pretransfer&#125;,time_starttransfer=%&#123;time_starttransfer&#125;,time_total=%&#123;time_total&#125;,size_download=%&#123;size_download&#125;,speed_download=%&#123;speed_download&#125;\\n&quot; &#x27;https://www.baidu.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 根据每个文件第一行第一列 给文件排序</span></span><br><span class=\"line\">find ./ -maxdepth 1 -name &quot;*.txt&quot; -exec awk -v filename=&#123;&#125; &#x27;NR==1&#123;print filename,$1&#125;&#x27; &#123;&#125; \\; | sort -k2 -n</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 统计第二列（以空格为分隔符）含有 <span class=\"string\">&quot;B&quot;</span> 的行数</span></span><br><span class=\"line\">cut -f 2 -d &quot; &quot; ./1.txt | grep &quot;B&quot; | wc -l</span><br></pre></td></tr></table></figure>"},{"_content":"### 一、出现RST包的情况\n\n1、连接请求到达时，目的端口不存在情况\n\n2、向一个已经关闭的连接发送数据\n\n3、向一个已经崩溃的对端发送数据（连接之前已经被建立）\n\n4、请求超时。 使用setsockopt的SO_RCVTIMEO选项设置recv的超时时间。接收数据超时时，会发送RST包\n\n5、close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由SO_LINGER选项来控制的\n\n6、TCP收到了一个根本不存在的连接上的分节\n\n7、处理半打开连接，  一方关闭了连接，另一方却没有收到结束报文（如网络故障），此时另一方还维持着原来的连接。而一方即使重启，也没有该连接的任何信息。这种状态 就叫做半打开连接。而此时另一方往处于半打开状态的连接写数据，则对方回应RST复位报文\n\n8、应用层可以通过 设置SO_LINGER 来发送RST\n\n```c\n#include <sys/socket.h>\nstruct linger {\nint l_onoff //0=off, nonzero=on(开关)\nint l_linger //linger time(延迟时间)\n}\n```\n\n### 二、收到RST包后的表现\n\n1、TCP socket在任何状态下，只要收到RST包，即可进入CLOSED初始状态\n\n2、值得注意的是RST报文段不会导致另一端产生任何响应，另一端根本不进行确认。收到RST的一方将终止该连接\n\n### 三、程序中表现\n\n1、阻塞模型下，内核无法主动通知应用层出错，只有应用层主动调用read()或者write()这样的IO系统调用时，内核才会利用出错来通知应用层对端RST\n\n2、非阻塞模型下，select或者epoll会返回sockfd可读,应用层对其进行读取时，read()会报错RST **这点很重要，这也是大多数Connection reset by peer的原因，我们需要捕获这个异常并关闭连接**\n","source":"_posts/NIO与网络编程/20200601-TCP RST 相关理解.md","raw":"### 一、出现RST包的情况\n\n1、连接请求到达时，目的端口不存在情况\n\n2、向一个已经关闭的连接发送数据\n\n3、向一个已经崩溃的对端发送数据（连接之前已经被建立）\n\n4、请求超时。 使用setsockopt的SO_RCVTIMEO选项设置recv的超时时间。接收数据超时时，会发送RST包\n\n5、close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由SO_LINGER选项来控制的\n\n6、TCP收到了一个根本不存在的连接上的分节\n\n7、处理半打开连接，  一方关闭了连接，另一方却没有收到结束报文（如网络故障），此时另一方还维持着原来的连接。而一方即使重启，也没有该连接的任何信息。这种状态 就叫做半打开连接。而此时另一方往处于半打开状态的连接写数据，则对方回应RST复位报文\n\n8、应用层可以通过 设置SO_LINGER 来发送RST\n\n```c\n#include <sys/socket.h>\nstruct linger {\nint l_onoff //0=off, nonzero=on(开关)\nint l_linger //linger time(延迟时间)\n}\n```\n\n### 二、收到RST包后的表现\n\n1、TCP socket在任何状态下，只要收到RST包，即可进入CLOSED初始状态\n\n2、值得注意的是RST报文段不会导致另一端产生任何响应，另一端根本不进行确认。收到RST的一方将终止该连接\n\n### 三、程序中表现\n\n1、阻塞模型下，内核无法主动通知应用层出错，只有应用层主动调用read()或者write()这样的IO系统调用时，内核才会利用出错来通知应用层对端RST\n\n2、非阻塞模型下，select或者epoll会返回sockfd可读,应用层对其进行读取时，read()会报错RST **这点很重要，这也是大多数Connection reset by peer的原因，我们需要捕获这个异常并关闭连接**\n","slug":"NIO与网络编程/20200601-TCP RST 相关理解","published":1,"date":"2020-05-31T16:00:00.000Z","updated":"2021-05-04T11:43:38.462Z","title":"TCP RST 相关理解","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0j0005nnvb0oic31wy","content":"<h3 id=\"一、出现RST包的情况\"><a href=\"#一、出现RST包的情况\" class=\"headerlink\" title=\"一、出现RST包的情况\"></a>一、出现RST包的情况</h3><p>1、连接请求到达时，目的端口不存在情况</p>\n<p>2、向一个已经关闭的连接发送数据</p>\n<p>3、向一个已经崩溃的对端发送数据（连接之前已经被建立）</p>\n<p>4、请求超时。 使用setsockopt的SO_RCVTIMEO选项设置recv的超时时间。接收数据超时时，会发送RST包</p>\n<p>5、close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由SO_LINGER选项来控制的</p>\n<p>6、TCP收到了一个根本不存在的连接上的分节</p>\n<p>7、处理半打开连接，  一方关闭了连接，另一方却没有收到结束报文（如网络故障），此时另一方还维持着原来的连接。而一方即使重启，也没有该连接的任何信息。这种状态 就叫做半打开连接。而此时另一方往处于半打开状态的连接写数据，则对方回应RST复位报文</p>\n<p>8、应用层可以通过 设置SO_LINGER 来发送RST</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">linger</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> l_onoff <span class=\"comment\">//0=off, nonzero=on(开关)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> l_linger <span class=\"comment\">//linger time(延迟时间)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、收到RST包后的表现\"><a href=\"#二、收到RST包后的表现\" class=\"headerlink\" title=\"二、收到RST包后的表现\"></a>二、收到RST包后的表现</h3><p>1、TCP socket在任何状态下，只要收到RST包，即可进入CLOSED初始状态</p>\n<p>2、值得注意的是RST报文段不会导致另一端产生任何响应，另一端根本不进行确认。收到RST的一方将终止该连接</p>\n<h3 id=\"三、程序中表现\"><a href=\"#三、程序中表现\" class=\"headerlink\" title=\"三、程序中表现\"></a>三、程序中表现</h3><p>1、阻塞模型下，内核无法主动通知应用层出错，只有应用层主动调用read()或者write()这样的IO系统调用时，内核才会利用出错来通知应用层对端RST</p>\n<p>2、非阻塞模型下，select或者epoll会返回sockfd可读,应用层对其进行读取时，read()会报错RST <strong>这点很重要，这也是大多数Connection reset by peer的原因，我们需要捕获这个异常并关闭连接</strong></p>\n","site":{"data":{}},"abbrlink":"2KZ34QF","excerpt":"一、出现RST包的情况\n1、连接请求到达时，目的端口不存在情况\n\n2、向一个已经关闭的连接发送数据\n\n3、向一个已经崩溃的对端发送数据（连接之前已经被建立）\n\n4、请求超时。 使用setsockopt的SO_RCVTIMEO选项设置recv的超时时间。接收数据超时时，会发送RST包\n\n5、close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由SO_LINGER选项来控制的\n\n6、TCP收到了一个根本不存在的连接上的分节\n\n7、处理半打开连接， 一方关闭了连接，另一方却没有收到结束报文（如网络故障），此时另一方还维持着原来的连接。而一方即使重启，也没有该连接","more":"<h3 id=\"一、出现RST包的情况\"><a href=\"#一、出现RST包的情况\" class=\"headerlink\" title=\"一、出现RST包的情况\"></a>一、出现RST包的情况</h3><p>1、连接请求到达时，目的端口不存在情况</p>\n<p>2、向一个已经关闭的连接发送数据</p>\n<p>3、向一个已经崩溃的对端发送数据（连接之前已经被建立）</p>\n<p>4、请求超时。 使用setsockopt的SO_RCVTIMEO选项设置recv的超时时间。接收数据超时时，会发送RST包</p>\n<p>5、close(sockfd)时，直接丢弃接收缓冲区未读取的数据，并给对方发一个RST。这个是由SO_LINGER选项来控制的</p>\n<p>6、TCP收到了一个根本不存在的连接上的分节</p>\n<p>7、处理半打开连接，  一方关闭了连接，另一方却没有收到结束报文（如网络故障），此时另一方还维持着原来的连接。而一方即使重启，也没有该连接的任何信息。这种状态 就叫做半打开连接。而此时另一方往处于半打开状态的连接写数据，则对方回应RST复位报文</p>\n<p>8、应用层可以通过 设置SO_LINGER 来发送RST</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">linger</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> l_onoff <span class=\"comment\">//0=off, nonzero=on(开关)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> l_linger <span class=\"comment\">//linger time(延迟时间)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、收到RST包后的表现\"><a href=\"#二、收到RST包后的表现\" class=\"headerlink\" title=\"二、收到RST包后的表现\"></a>二、收到RST包后的表现</h3><p>1、TCP socket在任何状态下，只要收到RST包，即可进入CLOSED初始状态</p>\n<p>2、值得注意的是RST报文段不会导致另一端产生任何响应，另一端根本不进行确认。收到RST的一方将终止该连接</p>\n<h3 id=\"三、程序中表现\"><a href=\"#三、程序中表现\" class=\"headerlink\" title=\"三、程序中表现\"></a>三、程序中表现</h3><p>1、阻塞模型下，内核无法主动通知应用层出错，只有应用层主动调用read()或者write()这样的IO系统调用时，内核才会利用出错来通知应用层对端RST</p>\n<p>2、非阻塞模型下，select或者epoll会返回sockfd可读,应用层对其进行读取时，read()会报错RST <strong>这点很重要，这也是大多数Connection reset by peer的原因，我们需要捕获这个异常并关闭连接</strong></p>\n"},{"_content":"函数主要功能\n\n#### 1、epoll_create\n从slab缓存中创建一个eventpoll对象,并且创建一个匿名的fd跟fd对应的file对象,而eventpoll对象保存在struct file结构的private指针中,并且返回,\n\n该fd对应的file operations只是实现了poll跟release操作，创建eventpoll对象的初始化操作\n获取当前用户信息,是不是root,最大监听fd数目等并且保存到eventpoll对象中\n\n初始化等待队列,初始化就绪链表,初始化红黑树的头结点\n\n#### 2、epoll_ctl\n将epoll_event结构拷贝到内核空间中，并且判断加入的fd是否支持poll结(epoll,poll,selectI/O多路复用必须支持poll操作).\n\n从epfd->file->privatedata获取event_poll对象,根据op区分是添加删除还是修改,\n\n首先在eventpoll结构中的红黑树查找是否已经存在了相对应的fd,没找到就支持插入操作,否则报重复的错误，还有修改,删除操作。\n\n插入操作时,会创建一个与fd对应的epitem结构,并且初始化相关成员，并指定调用poll_wait时的回调函数用于数据就绪时唤醒进程,(其内部,初始化设备的等待队列,将该进程注册到等待队列)完成这一步,\n\nepitem就跟这个socket关联起来了, 当它有状态变化时,会通过ep_poll_callback()来通知.\n\n最后调用加入的fd的fileoperation->poll函数(最后会调用poll_wait操作)用于完注册操作，将epitem结构添加到红黑树中。\n\n#### 3、epoll_wait\n计算睡眠时间(如果有),判断eventpoll对象的链表是否为空,不为空那就干活不睡明.并且初始化一个等待队列,把自己挂上去,设置自己的进程状态\n\n若是可睡眠状态.判断是否有信号到来(有的话直接被中断醒来,),如果没有那就调用schedule_timeout进行睡眠,\n\n如果超时或者被唤醒,首先从自己初始化的等待队列删除,\n然后通过调用`ffd.file->f_op->poll()`再次检查每个文件描述符是否真的准备好了,然后开始拷贝资源给用户空间了\n\n拷贝资源则是先把就绪事件链表转移到中间链表,然后挨个遍历拷贝到用户空间,并且挨个判断其是否为水平触发,是的话再次插入到就绪链表\n\n[epoll 剖析](http://blog.chinaunix.net/uid-28541347-id-4273856.html)\n[epoll源码剖析](http://gityuan.com/2019/01/06/linux-epoll/)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200330014401253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)","source":"_posts/NIO与网络编程/20200601-epoll.md","raw":"函数主要功能\n\n#### 1、epoll_create\n从slab缓存中创建一个eventpoll对象,并且创建一个匿名的fd跟fd对应的file对象,而eventpoll对象保存在struct file结构的private指针中,并且返回,\n\n该fd对应的file operations只是实现了poll跟release操作，创建eventpoll对象的初始化操作\n获取当前用户信息,是不是root,最大监听fd数目等并且保存到eventpoll对象中\n\n初始化等待队列,初始化就绪链表,初始化红黑树的头结点\n\n#### 2、epoll_ctl\n将epoll_event结构拷贝到内核空间中，并且判断加入的fd是否支持poll结(epoll,poll,selectI/O多路复用必须支持poll操作).\n\n从epfd->file->privatedata获取event_poll对象,根据op区分是添加删除还是修改,\n\n首先在eventpoll结构中的红黑树查找是否已经存在了相对应的fd,没找到就支持插入操作,否则报重复的错误，还有修改,删除操作。\n\n插入操作时,会创建一个与fd对应的epitem结构,并且初始化相关成员，并指定调用poll_wait时的回调函数用于数据就绪时唤醒进程,(其内部,初始化设备的等待队列,将该进程注册到等待队列)完成这一步,\n\nepitem就跟这个socket关联起来了, 当它有状态变化时,会通过ep_poll_callback()来通知.\n\n最后调用加入的fd的fileoperation->poll函数(最后会调用poll_wait操作)用于完注册操作，将epitem结构添加到红黑树中。\n\n#### 3、epoll_wait\n计算睡眠时间(如果有),判断eventpoll对象的链表是否为空,不为空那就干活不睡明.并且初始化一个等待队列,把自己挂上去,设置自己的进程状态\n\n若是可睡眠状态.判断是否有信号到来(有的话直接被中断醒来,),如果没有那就调用schedule_timeout进行睡眠,\n\n如果超时或者被唤醒,首先从自己初始化的等待队列删除,\n然后通过调用`ffd.file->f_op->poll()`再次检查每个文件描述符是否真的准备好了,然后开始拷贝资源给用户空间了\n\n拷贝资源则是先把就绪事件链表转移到中间链表,然后挨个遍历拷贝到用户空间,并且挨个判断其是否为水平触发,是的话再次插入到就绪链表\n\n[epoll 剖析](http://blog.chinaunix.net/uid-28541347-id-4273856.html)\n[epoll源码剖析](http://gityuan.com/2019/01/06/linux-epoll/)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200330014401253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)","slug":"NIO与网络编程/20200601-epoll","published":1,"date":"2020-05-31T16:00:00.000Z","updated":"2021-05-04T11:43:38.462Z","title":"epoll","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0k0006nnvb1np02nwh","content":"<p>函数主要功能</p>\n<h4 id=\"1、epoll-create\"><a href=\"#1、epoll-create\" class=\"headerlink\" title=\"1、epoll_create\"></a>1、epoll_create</h4><p>从slab缓存中创建一个eventpoll对象,并且创建一个匿名的fd跟fd对应的file对象,而eventpoll对象保存在struct file结构的private指针中,并且返回,</p>\n<p>该fd对应的file operations只是实现了poll跟release操作，创建eventpoll对象的初始化操作<br>获取当前用户信息,是不是root,最大监听fd数目等并且保存到eventpoll对象中</p>\n<p>初始化等待队列,初始化就绪链表,初始化红黑树的头结点</p>\n<h4 id=\"2、epoll-ctl\"><a href=\"#2、epoll-ctl\" class=\"headerlink\" title=\"2、epoll_ctl\"></a>2、epoll_ctl</h4><p>将epoll_event结构拷贝到内核空间中，并且判断加入的fd是否支持poll结(epoll,poll,selectI/O多路复用必须支持poll操作).</p>\n<p>从epfd-&gt;file-&gt;privatedata获取event_poll对象,根据op区分是添加删除还是修改,</p>\n<p>首先在eventpoll结构中的红黑树查找是否已经存在了相对应的fd,没找到就支持插入操作,否则报重复的错误，还有修改,删除操作。</p>\n<p>插入操作时,会创建一个与fd对应的epitem结构,并且初始化相关成员，并指定调用poll_wait时的回调函数用于数据就绪时唤醒进程,(其内部,初始化设备的等待队列,将该进程注册到等待队列)完成这一步,</p>\n<p>epitem就跟这个socket关联起来了, 当它有状态变化时,会通过ep_poll_callback()来通知.</p>\n<p>最后调用加入的fd的fileoperation-&gt;poll函数(最后会调用poll_wait操作)用于完注册操作，将epitem结构添加到红黑树中。</p>\n<h4 id=\"3、epoll-wait\"><a href=\"#3、epoll-wait\" class=\"headerlink\" title=\"3、epoll_wait\"></a>3、epoll_wait</h4><p>计算睡眠时间(如果有),判断eventpoll对象的链表是否为空,不为空那就干活不睡明.并且初始化一个等待队列,把自己挂上去,设置自己的进程状态</p>\n<p>若是可睡眠状态.判断是否有信号到来(有的话直接被中断醒来,),如果没有那就调用schedule_timeout进行睡眠,</p>\n<p>如果超时或者被唤醒,首先从自己初始化的等待队列删除,<br>然后通过调用<code>ffd.file-&gt;f_op-&gt;poll()</code>再次检查每个文件描述符是否真的准备好了,然后开始拷贝资源给用户空间了</p>\n<p>拷贝资源则是先把就绪事件链表转移到中间链表,然后挨个遍历拷贝到用户空间,并且挨个判断其是否为水平触发,是的话再次插入到就绪链表</p>\n<p><a href=\"http://blog.chinaunix.net/uid-28541347-id-4273856.html\">epoll 剖析</a><br><a href=\"http://gityuan.com/2019/01/06/linux-epoll/\">epoll源码剖析</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200330014401253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"abbrlink":"S0GAKS","excerpt":"函数主要功能\n\n1、epoll_create\n从slab缓存中创建一个eventpoll对象,并且创建一个匿名的fd跟fd对应的file对象,而eventpoll对象保存在struct file结构的private指针中,并且返回,\n\n该fd对应的file operations只是实现了poll跟release操作，创建eventpoll对象的初始化操作\n获取当前用户信息,是不是root,最大监听fd数目等并且保存到eventpoll对象中\n\n初始化等待队列,初始化就绪链表,初始化红黑树的头结点\n\n2、epoll_ctl\n将epoll_event结构拷贝到内核空间中，并且判断加入的fd是否支持","more":"<p>函数主要功能</p>\n<h4 id=\"1、epoll-create\"><a href=\"#1、epoll-create\" class=\"headerlink\" title=\"1、epoll_create\"></a>1、epoll_create</h4><p>从slab缓存中创建一个eventpoll对象,并且创建一个匿名的fd跟fd对应的file对象,而eventpoll对象保存在struct file结构的private指针中,并且返回,</p>\n<p>该fd对应的file operations只是实现了poll跟release操作，创建eventpoll对象的初始化操作<br>获取当前用户信息,是不是root,最大监听fd数目等并且保存到eventpoll对象中</p>\n<p>初始化等待队列,初始化就绪链表,初始化红黑树的头结点</p>\n<h4 id=\"2、epoll-ctl\"><a href=\"#2、epoll-ctl\" class=\"headerlink\" title=\"2、epoll_ctl\"></a>2、epoll_ctl</h4><p>将epoll_event结构拷贝到内核空间中，并且判断加入的fd是否支持poll结(epoll,poll,selectI/O多路复用必须支持poll操作).</p>\n<p>从epfd-&gt;file-&gt;privatedata获取event_poll对象,根据op区分是添加删除还是修改,</p>\n<p>首先在eventpoll结构中的红黑树查找是否已经存在了相对应的fd,没找到就支持插入操作,否则报重复的错误，还有修改,删除操作。</p>\n<p>插入操作时,会创建一个与fd对应的epitem结构,并且初始化相关成员，并指定调用poll_wait时的回调函数用于数据就绪时唤醒进程,(其内部,初始化设备的等待队列,将该进程注册到等待队列)完成这一步,</p>\n<p>epitem就跟这个socket关联起来了, 当它有状态变化时,会通过ep_poll_callback()来通知.</p>\n<p>最后调用加入的fd的fileoperation-&gt;poll函数(最后会调用poll_wait操作)用于完注册操作，将epitem结构添加到红黑树中。</p>\n<h4 id=\"3、epoll-wait\"><a href=\"#3、epoll-wait\" class=\"headerlink\" title=\"3、epoll_wait\"></a>3、epoll_wait</h4><p>计算睡眠时间(如果有),判断eventpoll对象的链表是否为空,不为空那就干活不睡明.并且初始化一个等待队列,把自己挂上去,设置自己的进程状态</p>\n<p>若是可睡眠状态.判断是否有信号到来(有的话直接被中断醒来,),如果没有那就调用schedule_timeout进行睡眠,</p>\n<p>如果超时或者被唤醒,首先从自己初始化的等待队列删除,<br>然后通过调用<code>ffd.file-&gt;f_op-&gt;poll()</code>再次检查每个文件描述符是否真的准备好了,然后开始拷贝资源给用户空间了</p>\n<p>拷贝资源则是先把就绪事件链表转移到中间链表,然后挨个遍历拷贝到用户空间,并且挨个判断其是否为水平触发,是的话再次插入到就绪链表</p>\n<p><a href=\"http://blog.chinaunix.net/uid-28541347-id-4273856.html\">epoll 剖析</a><br><a href=\"http://gityuan.com/2019/01/06/linux-epoll/\">epoll源码剖析</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200330014401253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"_content":"## 1. 什么是Docker\n\n官方解释：Package Software into Standardized Units for Development, Shipment and Deployment.\n\n![image-20210510153806631](https://gitee.com/coderzc/blogimage/raw/master/20210510153816.png)\n\n## 2. Docker namespace 隔离原理\n\nDocker通过 Namespace 实现进程隔离\n\n```c\nint clone(int (*child_func)(void *), void *child_stack, int flags, void *arg);\n```\n\n模拟隔离\n\n```shell\n# 创建一个隔离环境\nunshare --fork --pid --mount-proc bash\n```\n\n## 3. Docker 的资源配额 CGroups\n\n### 3.1 Docker 使用CGroups实现资源的配额管理\n\n- Cgroups (control groups)\n- 2007年由谷歌工程师研发\n- 2008年并入 Linux Kernel 2.6.24\n- C语言实现\n\n### 3.2 CGroups 限制进程的 CPU使用时间\n\nDocker中的 CPU，内存，网络的限制均通过 cgroups 实现 \n\n![cgroups层级结构示意图](https://gitee.com/coderzc/blogimage/raw/master/20210510173423.png)\n\n### 3.3 实践\n\n```shell\n# 在宿主机上创建一个让 CPU 飙升到100%的进程： （此操作有风险，慎用）\nwhile : ; do : ; done &\n# 记录下 PID = 5004\n\ncd /sys/fs/cgroup/cpu\nmkdir cgroups_test\n\n# 查看配额\ncat cpu.cfs_quota_us\n\n# 设定20%cpu时间的上限\necho 20000 > cpu.cfs_quota_us\n\n# 绑定进程号\necho 27358 > /sys/fs/cgroup/cpu/cgroups_test/tasks\n\n# 清理该进程\nkill -9 5004\n```\n\n### 3.4 docker 里如何加参数进行资源配额\n\n```shell\n# 分配一个50%的cpu时间配额\ndocker run -it --cpus=\".5\" nginx /bin/sh\n\n# 查看是否有对应的cgroup\ncat /sys/fs/cgroup/cpu/cpu.cfs_quota_us\n# 配置显示 500000，证明--cpus=\".5\"的参数已经生效\n```\n\n## Docker 镜像\n\n### 4.1 Docker 镜像由来与特性\n\n- 虽然 Docker 实现了运行环境的隔离，但如何将一个运行的容器快速进行启动，复制，迁移到其他的主机上运行？\n- 如果容器无法快速进行复制，迁移，那么和以 VMware 为代表的虚拟化技术相比并没有太多优势\n- Docker 镜像具备了应用运行所需要的所有依赖\n- 一次构建，处处运行\n\n- Docker 镜像的存储是基于 checksum 的去重存储，大大降低存储空间\n\n### 4.2 编写Dockerfile\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n\nLABEL maintainer=\"coderzc async-nio-concurrent\"\n\nVOLUME /tmp\nADD async-nio-concurrent-0.0.1-SNAPSHOT.jar async-nio-concurrent.jar\n\nENV mysql_hostname=mysql57\n\n# 开放容器的端口\nEXPOSE 8088 8081\n\nENTRYPOINT [\"JAVA\", \"-jar\", \"async-nio-concurrent.jar\"]\n```\n\n### 4.3 构建并上传 Docker 镜像\n\n```shell\n# 把 async-nio-concurrent-0.0.1-SNAPSHOT.jar 放到与 Dockerfile 同级目录\n> async-nio-concurrent-0.0.1-SNAPSHOT.jar  Dockerfile\n\n# 构建根据 Dockerfile 构建镜像\ndocker build -t async-nio-concurrent:1.0 .\n\n# 登陆 docker hub\ndocker login\n\n# 把本地镜像归入仓库\ndocker tag async-nio-concurrent:1.0 czcoder/async-nio-concurrent:1.0\n\n# push\ndocker push czcoder/async-nio-concurrent:1.0\n```\n\n### 4.4 Docker run --link 运行\n\n```shell\n# 把 mysql 与 async-nio-concurrent 网络打通, 并增加一条 mysql57 的 hosts 记录\ndocker run --name async-nio-concurrent -d -p 18081:8081 -p 8088:8088 --link mysql57 async-nio-concurrent:1.0\n\n# 查看日志\ndocker logs async-nio-concurrent\n\n# 进入容器\ndocker exec -it async-nio-concurrent /bin/bash\n```\n\n### 4.5 外网访问\n\n[http://${宿主机ip}:18081/index.html](http://${宿主机ip}:18081/index.html)\n\n## 5. Docker 常见命令\n\n```shell\n# 查看 docker 基本信息\ndocker info\n\n# 查看 docker 镜像\ndocker images\n\n# 删除 docker 镜像\ndocker rmi $image_name\n\n# 查看 docker 容器\ndocker ps -a\n\n# 启动/停止/重启容器\ndocker start/stop/restart $CONTAINER\n```\n\n","source":"_posts/容器化/20210718-docker.md","raw":"## 1. 什么是Docker\n\n官方解释：Package Software into Standardized Units for Development, Shipment and Deployment.\n\n![image-20210510153806631](https://gitee.com/coderzc/blogimage/raw/master/20210510153816.png)\n\n## 2. Docker namespace 隔离原理\n\nDocker通过 Namespace 实现进程隔离\n\n```c\nint clone(int (*child_func)(void *), void *child_stack, int flags, void *arg);\n```\n\n模拟隔离\n\n```shell\n# 创建一个隔离环境\nunshare --fork --pid --mount-proc bash\n```\n\n## 3. Docker 的资源配额 CGroups\n\n### 3.1 Docker 使用CGroups实现资源的配额管理\n\n- Cgroups (control groups)\n- 2007年由谷歌工程师研发\n- 2008年并入 Linux Kernel 2.6.24\n- C语言实现\n\n### 3.2 CGroups 限制进程的 CPU使用时间\n\nDocker中的 CPU，内存，网络的限制均通过 cgroups 实现 \n\n![cgroups层级结构示意图](https://gitee.com/coderzc/blogimage/raw/master/20210510173423.png)\n\n### 3.3 实践\n\n```shell\n# 在宿主机上创建一个让 CPU 飙升到100%的进程： （此操作有风险，慎用）\nwhile : ; do : ; done &\n# 记录下 PID = 5004\n\ncd /sys/fs/cgroup/cpu\nmkdir cgroups_test\n\n# 查看配额\ncat cpu.cfs_quota_us\n\n# 设定20%cpu时间的上限\necho 20000 > cpu.cfs_quota_us\n\n# 绑定进程号\necho 27358 > /sys/fs/cgroup/cpu/cgroups_test/tasks\n\n# 清理该进程\nkill -9 5004\n```\n\n### 3.4 docker 里如何加参数进行资源配额\n\n```shell\n# 分配一个50%的cpu时间配额\ndocker run -it --cpus=\".5\" nginx /bin/sh\n\n# 查看是否有对应的cgroup\ncat /sys/fs/cgroup/cpu/cpu.cfs_quota_us\n# 配置显示 500000，证明--cpus=\".5\"的参数已经生效\n```\n\n## Docker 镜像\n\n### 4.1 Docker 镜像由来与特性\n\n- 虽然 Docker 实现了运行环境的隔离，但如何将一个运行的容器快速进行启动，复制，迁移到其他的主机上运行？\n- 如果容器无法快速进行复制，迁移，那么和以 VMware 为代表的虚拟化技术相比并没有太多优势\n- Docker 镜像具备了应用运行所需要的所有依赖\n- 一次构建，处处运行\n\n- Docker 镜像的存储是基于 checksum 的去重存储，大大降低存储空间\n\n### 4.2 编写Dockerfile\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n\nLABEL maintainer=\"coderzc async-nio-concurrent\"\n\nVOLUME /tmp\nADD async-nio-concurrent-0.0.1-SNAPSHOT.jar async-nio-concurrent.jar\n\nENV mysql_hostname=mysql57\n\n# 开放容器的端口\nEXPOSE 8088 8081\n\nENTRYPOINT [\"JAVA\", \"-jar\", \"async-nio-concurrent.jar\"]\n```\n\n### 4.3 构建并上传 Docker 镜像\n\n```shell\n# 把 async-nio-concurrent-0.0.1-SNAPSHOT.jar 放到与 Dockerfile 同级目录\n> async-nio-concurrent-0.0.1-SNAPSHOT.jar  Dockerfile\n\n# 构建根据 Dockerfile 构建镜像\ndocker build -t async-nio-concurrent:1.0 .\n\n# 登陆 docker hub\ndocker login\n\n# 把本地镜像归入仓库\ndocker tag async-nio-concurrent:1.0 czcoder/async-nio-concurrent:1.0\n\n# push\ndocker push czcoder/async-nio-concurrent:1.0\n```\n\n### 4.4 Docker run --link 运行\n\n```shell\n# 把 mysql 与 async-nio-concurrent 网络打通, 并增加一条 mysql57 的 hosts 记录\ndocker run --name async-nio-concurrent -d -p 18081:8081 -p 8088:8088 --link mysql57 async-nio-concurrent:1.0\n\n# 查看日志\ndocker logs async-nio-concurrent\n\n# 进入容器\ndocker exec -it async-nio-concurrent /bin/bash\n```\n\n### 4.5 外网访问\n\n[http://${宿主机ip}:18081/index.html](http://${宿主机ip}:18081/index.html)\n\n## 5. Docker 常见命令\n\n```shell\n# 查看 docker 基本信息\ndocker info\n\n# 查看 docker 镜像\ndocker images\n\n# 删除 docker 镜像\ndocker rmi $image_name\n\n# 查看 docker 容器\ndocker ps -a\n\n# 启动/停止/重启容器\ndocker start/stop/restart $CONTAINER\n```\n\n","slug":"容器化/20210718-docker","published":1,"date":"2021-07-17T16:00:00.000Z","updated":"2021-08-17T18:45:34.836Z","title":"docker","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0k0007nnvb5d875iuq","content":"<h2 id=\"1-什么是Docker\"><a href=\"#1-什么是Docker\" class=\"headerlink\" title=\"1. 什么是Docker\"></a>1. 什么是Docker</h2><p>官方解释：Package Software into Standardized Units for Development, Shipment and Deployment.</p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210510153816.png\" alt=\"image-20210510153806631\"></p>\n<h2 id=\"2-Docker-namespace-隔离原理\"><a href=\"#2-Docker-namespace-隔离原理\" class=\"headerlink\" title=\"2. Docker namespace 隔离原理\"></a>2. Docker namespace 隔离原理</h2><p>Docker通过 Namespace 实现进程隔离</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">clone</span><span class=\"params\">(<span class=\"keyword\">int</span> (*child_func)(<span class=\"keyword\">void</span> *), <span class=\"keyword\">void</span> *child_stack, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>模拟隔离</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个隔离环境</span></span><br><span class=\"line\">unshare --fork --pid --mount-proc bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Docker-的资源配额-CGroups\"><a href=\"#3-Docker-的资源配额-CGroups\" class=\"headerlink\" title=\"3. Docker 的资源配额 CGroups\"></a>3. Docker 的资源配额 CGroups</h2><h3 id=\"3-1-Docker-使用CGroups实现资源的配额管理\"><a href=\"#3-1-Docker-使用CGroups实现资源的配额管理\" class=\"headerlink\" title=\"3.1 Docker 使用CGroups实现资源的配额管理\"></a>3.1 Docker 使用CGroups实现资源的配额管理</h3><ul>\n<li>Cgroups (control groups)</li>\n<li>2007年由谷歌工程师研发</li>\n<li>2008年并入 Linux Kernel 2.6.24</li>\n<li>C语言实现</li>\n</ul>\n<h3 id=\"3-2-CGroups-限制进程的-CPU使用时间\"><a href=\"#3-2-CGroups-限制进程的-CPU使用时间\" class=\"headerlink\" title=\"3.2 CGroups 限制进程的 CPU使用时间\"></a>3.2 CGroups 限制进程的 CPU使用时间</h3><p>Docker中的 CPU，内存，网络的限制均通过 cgroups 实现 </p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210510173423.png\" alt=\"cgroups层级结构示意图\"></p>\n<h3 id=\"3-3-实践\"><a href=\"#3-3-实践\" class=\"headerlink\" title=\"3.3 实践\"></a>3.3 实践</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在宿主机上创建一个让 CPU 飙升到100%的进程： （此操作有风险，慎用）</span></span><br><span class=\"line\">while : ; do : ; done &amp;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 记录下 PID = 5004</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /sys/fs/cgroup/cpu</span><br><span class=\"line\">mkdir cgroups_test</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看配额</span></span><br><span class=\"line\">cat cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设定20%cpu时间的上限</span></span><br><span class=\"line\">echo 20000 &gt; cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 绑定进程号</span></span><br><span class=\"line\">echo 27358 &gt; /sys/fs/cgroup/cpu/cgroups_test/tasks</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清理该进程</span></span><br><span class=\"line\">kill -9 5004</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-docker-里如何加参数进行资源配额\"><a href=\"#3-4-docker-里如何加参数进行资源配额\" class=\"headerlink\" title=\"3.4 docker 里如何加参数进行资源配额\"></a>3.4 docker 里如何加参数进行资源配额</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 分配一个50%的cpu时间配额</span></span><br><span class=\"line\">docker run -it --cpus=&quot;.5&quot; nginx /bin/sh</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看是否有对应的cgroup</span></span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置显示 500000，证明--cpus=<span class=\"string\">&quot;.5&quot;</span>的参数已经生效</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h2><h3 id=\"4-1-Docker-镜像由来与特性\"><a href=\"#4-1-Docker-镜像由来与特性\" class=\"headerlink\" title=\"4.1 Docker 镜像由来与特性\"></a>4.1 Docker 镜像由来与特性</h3><ul>\n<li><p>虽然 Docker 实现了运行环境的隔离，但如何将一个运行的容器快速进行启动，复制，迁移到其他的主机上运行？</p>\n</li>\n<li><p>如果容器无法快速进行复制，迁移，那么和以 VMware 为代表的虚拟化技术相比并没有太多优势</p>\n</li>\n<li><p>Docker 镜像具备了应用运行所需要的所有依赖</p>\n</li>\n<li><p>一次构建，处处运行</p>\n</li>\n<li><p>Docker 镜像的存储是基于 checksum 的去重存储，大大降低存储空间</p>\n</li>\n</ul>\n<h3 id=\"4-2-编写Dockerfile\"><a href=\"#4-2-编写Dockerfile\" class=\"headerlink\" title=\"4.2 编写Dockerfile\"></a>4.2 编写Dockerfile</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"bash\"> maintainer=<span class=\"string\">&quot;coderzc async-nio-concurrent&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /tmp</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> async-nio-concurrent-0.0.1-SNAPSHOT.jar async-nio-concurrent.jar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> mysql_hostname=mysql57</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开放容器的端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8088</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">&quot;JAVA&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;async-nio-concurrent.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-构建并上传-Docker-镜像\"><a href=\"#4-3-构建并上传-Docker-镜像\" class=\"headerlink\" title=\"4.3 构建并上传 Docker 镜像\"></a>4.3 构建并上传 Docker 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把 async-nio-concurrent-0.0.1-SNAPSHOT.jar 放到与 Dockerfile 同级目录</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> async-nio-concurrent-0.0.1-SNAPSHOT.jar  Dockerfile</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 构建根据 Dockerfile 构建镜像</span></span><br><span class=\"line\">docker build -t async-nio-concurrent:1.0 .</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登陆 docker hub</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把本地镜像归入仓库</span></span><br><span class=\"line\">docker tag async-nio-concurrent:1.0 czcoder/async-nio-concurrent:1.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> push</span></span><br><span class=\"line\">docker push czcoder/async-nio-concurrent:1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-Docker-run-–link-运行\"><a href=\"#4-4-Docker-run-–link-运行\" class=\"headerlink\" title=\"4.4 Docker run –link 运行\"></a>4.4 Docker run –link 运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把 mysql 与 async-nio-concurrent 网络打通, 并增加一条 mysql57 的 hosts 记录</span></span><br><span class=\"line\">docker run --name async-nio-concurrent -d -p 18081:8081 -p 8088:8088 --link mysql57 async-nio-concurrent:1.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看日志</span></span><br><span class=\"line\">docker logs async-nio-concurrent</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器</span></span><br><span class=\"line\">docker exec -it async-nio-concurrent /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-外网访问\"><a href=\"#4-5-外网访问\" class=\"headerlink\" title=\"4.5 外网访问\"></a>4.5 外网访问</h3><p><a href=\"http://${宿主机ip}:18081/index.html\">http://${宿主机ip}:18081/index.html</a></p>\n<h2 id=\"5-Docker-常见命令\"><a href=\"#5-Docker-常见命令\" class=\"headerlink\" title=\"5. Docker 常见命令\"></a>5. Docker 常见命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 docker 基本信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 docker 镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除 docker 镜像</span></span><br><span class=\"line\">docker rmi $image_name</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 docker 容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动/停止/重启容器</span></span><br><span class=\"line\">docker start/stop/restart $CONTAINER</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"abbrlink":"3S5BZXD","excerpt":"1. 什么是Docker\n官方解释：Package Software into Standardized Units for Development, Shipment and Deployment.\n\n\n\n2. Docker namespace 隔离原理\nDocker通过 Namespace 实现进程隔离\n\n1\n\n\nint clone(int (*child_func)(void *), void *child_stack, int flags, void *arg);\n\n\n模拟隔离\n\n1\n2\n\n\n# 创建一个隔离环境\nunshare --fork --pid --mount-proc ba","more":"<h2 id=\"1-什么是Docker\"><a href=\"#1-什么是Docker\" class=\"headerlink\" title=\"1. 什么是Docker\"></a>1. 什么是Docker</h2><p>官方解释：Package Software into Standardized Units for Development, Shipment and Deployment.</p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210510153816.png\" alt=\"image-20210510153806631\"></p>\n<h2 id=\"2-Docker-namespace-隔离原理\"><a href=\"#2-Docker-namespace-隔离原理\" class=\"headerlink\" title=\"2. Docker namespace 隔离原理\"></a>2. Docker namespace 隔离原理</h2><p>Docker通过 Namespace 实现进程隔离</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">clone</span><span class=\"params\">(<span class=\"keyword\">int</span> (*child_func)(<span class=\"keyword\">void</span> *), <span class=\"keyword\">void</span> *child_stack, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>模拟隔离</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个隔离环境</span></span><br><span class=\"line\">unshare --fork --pid --mount-proc bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Docker-的资源配额-CGroups\"><a href=\"#3-Docker-的资源配额-CGroups\" class=\"headerlink\" title=\"3. Docker 的资源配额 CGroups\"></a>3. Docker 的资源配额 CGroups</h2><h3 id=\"3-1-Docker-使用CGroups实现资源的配额管理\"><a href=\"#3-1-Docker-使用CGroups实现资源的配额管理\" class=\"headerlink\" title=\"3.1 Docker 使用CGroups实现资源的配额管理\"></a>3.1 Docker 使用CGroups实现资源的配额管理</h3><ul>\n<li>Cgroups (control groups)</li>\n<li>2007年由谷歌工程师研发</li>\n<li>2008年并入 Linux Kernel 2.6.24</li>\n<li>C语言实现</li>\n</ul>\n<h3 id=\"3-2-CGroups-限制进程的-CPU使用时间\"><a href=\"#3-2-CGroups-限制进程的-CPU使用时间\" class=\"headerlink\" title=\"3.2 CGroups 限制进程的 CPU使用时间\"></a>3.2 CGroups 限制进程的 CPU使用时间</h3><p>Docker中的 CPU，内存，网络的限制均通过 cgroups 实现 </p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210510173423.png\" alt=\"cgroups层级结构示意图\"></p>\n<h3 id=\"3-3-实践\"><a href=\"#3-3-实践\" class=\"headerlink\" title=\"3.3 实践\"></a>3.3 实践</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在宿主机上创建一个让 CPU 飙升到100%的进程： （此操作有风险，慎用）</span></span><br><span class=\"line\">while : ; do : ; done &amp;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 记录下 PID = 5004</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /sys/fs/cgroup/cpu</span><br><span class=\"line\">mkdir cgroups_test</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看配额</span></span><br><span class=\"line\">cat cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设定20%cpu时间的上限</span></span><br><span class=\"line\">echo 20000 &gt; cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 绑定进程号</span></span><br><span class=\"line\">echo 27358 &gt; /sys/fs/cgroup/cpu/cgroups_test/tasks</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清理该进程</span></span><br><span class=\"line\">kill -9 5004</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-docker-里如何加参数进行资源配额\"><a href=\"#3-4-docker-里如何加参数进行资源配额\" class=\"headerlink\" title=\"3.4 docker 里如何加参数进行资源配额\"></a>3.4 docker 里如何加参数进行资源配额</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 分配一个50%的cpu时间配额</span></span><br><span class=\"line\">docker run -it --cpus=&quot;.5&quot; nginx /bin/sh</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看是否有对应的cgroup</span></span><br><span class=\"line\">cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置显示 500000，证明--cpus=<span class=\"string\">&quot;.5&quot;</span>的参数已经生效</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h2><h3 id=\"4-1-Docker-镜像由来与特性\"><a href=\"#4-1-Docker-镜像由来与特性\" class=\"headerlink\" title=\"4.1 Docker 镜像由来与特性\"></a>4.1 Docker 镜像由来与特性</h3><ul>\n<li><p>虽然 Docker 实现了运行环境的隔离，但如何将一个运行的容器快速进行启动，复制，迁移到其他的主机上运行？</p>\n</li>\n<li><p>如果容器无法快速进行复制，迁移，那么和以 VMware 为代表的虚拟化技术相比并没有太多优势</p>\n</li>\n<li><p>Docker 镜像具备了应用运行所需要的所有依赖</p>\n</li>\n<li><p>一次构建，处处运行</p>\n</li>\n<li><p>Docker 镜像的存储是基于 checksum 的去重存储，大大降低存储空间</p>\n</li>\n</ul>\n<h3 id=\"4-2-编写Dockerfile\"><a href=\"#4-2-编写Dockerfile\" class=\"headerlink\" title=\"4.2 编写Dockerfile\"></a>4.2 编写Dockerfile</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"bash\"> maintainer=<span class=\"string\">&quot;coderzc async-nio-concurrent&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /tmp</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> async-nio-concurrent-0.0.1-SNAPSHOT.jar async-nio-concurrent.jar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> mysql_hostname=mysql57</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开放容器的端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8088</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">&quot;JAVA&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;async-nio-concurrent.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-构建并上传-Docker-镜像\"><a href=\"#4-3-构建并上传-Docker-镜像\" class=\"headerlink\" title=\"4.3 构建并上传 Docker 镜像\"></a>4.3 构建并上传 Docker 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把 async-nio-concurrent-0.0.1-SNAPSHOT.jar 放到与 Dockerfile 同级目录</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> async-nio-concurrent-0.0.1-SNAPSHOT.jar  Dockerfile</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 构建根据 Dockerfile 构建镜像</span></span><br><span class=\"line\">docker build -t async-nio-concurrent:1.0 .</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登陆 docker hub</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把本地镜像归入仓库</span></span><br><span class=\"line\">docker tag async-nio-concurrent:1.0 czcoder/async-nio-concurrent:1.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> push</span></span><br><span class=\"line\">docker push czcoder/async-nio-concurrent:1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-Docker-run-–link-运行\"><a href=\"#4-4-Docker-run-–link-运行\" class=\"headerlink\" title=\"4.4 Docker run –link 运行\"></a>4.4 Docker run –link 运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把 mysql 与 async-nio-concurrent 网络打通, 并增加一条 mysql57 的 hosts 记录</span></span><br><span class=\"line\">docker run --name async-nio-concurrent -d -p 18081:8081 -p 8088:8088 --link mysql57 async-nio-concurrent:1.0</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看日志</span></span><br><span class=\"line\">docker logs async-nio-concurrent</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入容器</span></span><br><span class=\"line\">docker exec -it async-nio-concurrent /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-外网访问\"><a href=\"#4-5-外网访问\" class=\"headerlink\" title=\"4.5 外网访问\"></a>4.5 外网访问</h3><p><a href=\"http://${宿主机ip}:18081/index.html\">http://${宿主机ip}:18081/index.html</a></p>\n<h2 id=\"5-Docker-常见命令\"><a href=\"#5-Docker-常见命令\" class=\"headerlink\" title=\"5. Docker 常见命令\"></a>5. Docker 常见命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 docker 基本信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 docker 镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除 docker 镜像</span></span><br><span class=\"line\">docker rmi $image_name</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 docker 容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动/停止/重启容器</span></span><br><span class=\"line\">docker start/stop/restart $CONTAINER</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"## 1. kubernetes 起源与发展\n\n![20210512181906](https://gitee.com/coderzc/blogimage/raw/master/20210513152302.png)\n\n### 1.1 kubernetes 起源\n\n- Kubernetes最初源于谷歌内部的Borg，Kubernetes 的最初目标是为应用的容器化编排部署提供一个最小化的平台，包含几个基本功能：\n  1. 将应用水平扩容到多个集群\n  2. 为扩容的实例提供负载均衡的策略\n  3. 提供基本的健康检查和自愈能力\n  4. 实现任务的统一调度\n\n### 1.2 kubernetes 发展\n\n- 2014年6月 谷歌云计算专家Eric Brewer在旧金山的发布会为这款新的开源工具揭牌。\n- 2015年7月22日K8S迭代到 v1.0并在OSCON大会上正式对外公布。\n- 为了建立容器编排领域的标准和规范，Google、RedHat 等开源基础设施领域玩家们，在 2015 年共同牵头发起了名为 CNCF（Cloud Native Computing Foundation）的基金会。Kubernetes 成为 CNCF 最核心的项目。发起成员：AT&T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks。\n- 2018年，超过 1700 开发者成为 Kubernetes 项目社区贡献者，全球有 500 多场沙龙。国内出现大量基于 Kubernetes 的创业公司。\n- 2020 年，Kubernetes 项目已经成为贡献者仅次于 Linux 项目的第二大开源项目。成为了业界容器编排的事实标准，各大厂商纷纷宣布支持 Kubernetes 作为容器编排的方案。\n\n## 2. 为什么需要kubernetes\n\n### 2.1 传统的容器编排痛点\n\n容器技术虽然解决了应用和基础设施异构的问题，让应用可以做到一次构建，多次部署，但在复杂的微服务场景，单靠 Docker 技术还不够，它仍然有以下问题没有解决：\n\n- 集成和编排微服务模块\n- 提供按需自动扩容，缩容能力\n- 故障自愈\n- 集群内的通信\n\n### 2.2 Kubernetes 能解决的问题\n\n- 按需的垂直扩容，新的服务器(node)能够轻易的增加或删除\n- 按需的水平扩容，容器实例能够轻松扩容，缩容\n- 副本控制器，你不用担心副本的状态\n- 服务发现和路由\n- 自动部署和回滚，如果应用状态错误，可以实现自动回滚\n\n### 2.3 什么时候使用 Kubernetes？\n\n- 当你的应用是微服务架构\n- 开发者需要快速部署自己的新功能到测试环境进行验证\n- 降低硬件资源成本，提高使用率\n\n### 2.4 什么时候不适合使用 Kubernetes\n\n- 应用是轻量级的单体应用，没有高并发的需求\n- 团队文化不适应变革\n\n## 3. Kubernetes 架构与核心概念\n\n![Components of Kubernetes](https://gitee.com/coderzc/blogimage/raw/master/20210513152213.svg)\n\n### 3.1 主控制节点组件\n\n主控制节点组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。\n\n主控制节点组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有主控制节点组件，并且不会在此计算机上运行用户容器。\n\n- apiserver\n  主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端组件。\n- etcd\n  etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。\n\n- kube-scheduler\n  主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。\n  调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。\n- kube-controller-manager\n  在主节点上运行控制器的组件。\n  从逻辑上讲，每个控制器都是一个单独的进程，但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。这些控制器包括:\n      1. 节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。\n      2. 副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。\n      3. 终端控制器（Endpoints Controller）: 填充终端(Endpoints)对象(即加入 Service 与 Pod)。\n      4. 服务帐户和令牌控制器（Service Account & Token Controllers），为新的命名空间创建默认帐户和 API 访问令牌.\n\n### 3.2 从节点组件\n\n节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。\n\n- kubelet \n  一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。kubelet 不会管理不是由 Kubernetes 创建的容器。\n- kube-proxy\n  kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。\n  kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。\n- 容器运行时（Container Runtime）\n  容器运行环境是负责运行容器的软件。\n  Kubernetes 支持多个容器运行环境: Docker、 containerd、cri-o、 rktlet 以及任何实现 Kubernetes CRI (容器运行环境接口)。\n\n### 3.3 插件（Addons）\n\n- Kubeadm \n\n  Kubeadm 是Kubernetes的自动化部署工具，降低了部署难度，提高效率。\n\n- Kubectl \n\n  Kubectl 是Kubernetes集群管理工具相当于客户端。\n\n- DNS\n  尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有集群 DNS， 因为很多示例都需要 DNS 服务。\n\n- Web 界面（仪表盘）\n  Dashboard 是K ubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。\n\n- 容器资源监控\n  容器资源监控 将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中，并提供用于浏览这些数据的界面。\n\n- 集群层面日志\n  集群层面日志 机制负责将容器的日志数据 保存到一个集中的日志存储中，该存储能够提供搜索和浏览接口。\n\n## 4. 初始化基础环境\n\n```shell\n# 下载yum 源\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 清除缓存\nyum clean all\n\n# 安装基本软件包\nyum install wget net‐tools vim bash‐comp* ‐y\n\n#配置 K8S的阿里云yum源\ncat >>/etc/yum.repos.d/kubernetes.repo <<EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 配置 Docker yum源\nwget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo\n\n# 清除缓存\nyum clean all\n\n# 设置hosts\nvim /etc/hosts\n 192.168.99.101 master\n 192.168.99.102 node1\n 192.168.99.103 node2\n\n# 关闭防火墙\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭 SeLinux\nsetenforce 0\nsed -i \"s/SELINUX=enforcing/SELINUX=disabled/g\" /etc/selinux/config\n\n# 关闭 swap\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\n\n# 将桥接的IPv4流量传递到iptables的链\nmodprobe br_netfilter\necho \"1\" >/proc/sys/net/bridge/bridge-nf-call-iptables\nvi /etc/sysctl.d/k8s.conf \nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\n\n# 安装并启动 docker\nyum install -y docker-ce.x86_64 docker-ce-cli.x86_64 containerd.io.x86_64\n\n# 更换 docker 镜像源\nmkdir /etc/docker\n\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"],\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"]\n}\nEOF\n\n# 重启docker\nsystemctl daemon-reload\n# 开机自启\nsystemctl enable docker \nsystemctl restart docker\n\n# 如果报网络错误可能是没有成功建立docker网卡，可以手动创建\n`failed to start daemon: Error initializing network controller: list bridge addresses failed: PredefinedLocalScopeDefaultNetworks List:`\nip link add name docker0 type bridge\nip addr add dev docker0 172.1.0.1/16\n\n# 安装kubelet、kubeadm、kubectl\nyum install -y kubelet-1.15.10 kubeadm-1.15.10 kubectl-1.15.10\n\n# 启动 kubelet\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n## 5. 初始化 Master\n\n```shell\n# 初始化K8s主节点\nkubeadm init --kubernetes-version=1.15.10 \\\n--apiserver-advertise-address=${master_ip} \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--service-cidr=10.1.0.0/16 \\\n--pod-network-cidr=10.244.0.0/16\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# 安装网络插件 Flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# 查看K8s状态\nkubectl get node\n\tNAME     STATUS   ROLES    AGE   VERSION\n\tmaster   Ready    master   14m   v1.15.10\n\t\n# 故障排查 ！！！\n# kubelet 启动失败 报错：Failed to start ContainerManager failed to get rootfs info: unable to find data in memory cache\nvim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf 添加下面环境变量\nEnvironment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --feature-gates=\\\"LocalStorageCapacityIsolation=false,SupportNodePidsLimit=false,SupportPodPidsLimit=false\\\"\"\n\n# Failed to update stats for container \"/kubepods.slice/kubepods-burstable.slice\": failure - /sys/fs/cgroup/cpuacct/kubepods.slice/kubepods-burstable.slice/cpuacct.stat\ncat >/etc/systemd/system/kubelet.service.d/11-cgroups.conf<<EOF\n[Service]\nCPUAccounting=true\nMemoryAccounting=true\nEOF\n\n并在刚才那个环境变量上追加参数：\nEnvironment=\"KUBELET_CONFIG_ARGS=--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice\"\n\n# 然后重启 kubelet\nsystemctl daemon-reload && systemctl restart kubelet\n```\n\n## 6. 初始化 WorkerNode\n\n```shell\n# 拷贝 admin.conf 到 wokerNode\nscp /etc/kubernetes/admin.conf root@node1:/etc/kubernetes/\n\n# 配置 Kubeconfig 环境变量\necho \"export KUBECONFIG=/etc/kubernetes/admin.conf\" >> ~/.bash_profile\nsource ~/.bash_profile\n\n# 如果是克隆的 master 机器, 需要清理 master 环境网络\nkubeadm reset\nsystemctl stop kubelet\nsystemctl stop docker\nrm -rf /var/lib/cni/\nrm -rf /var/lib/kubelet/*\nrm -rf /var/cni/\nifconfig cni0 down\nifconfig flannel.1 down\nifconfig docker0 down\nip link delete cni0\nip link delete flannel.1\nsystemctl start docker\nsystemctl start kubelet\n\n# 否则安装 Flannel 网络插件\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# 将master节点下面 /etc/cni/net.d/下面的所有文件拷贝到node节点上\nmkdir -p /etc/cni/net.d/\n# 在 master\nscp /etc/cni/net.d/* root@${node_ip}:/etc/cni/net.d/\n\n# 在 master 生成token\nkubeadm token create --print-join-command\n> kubeadm join ${master_ip}:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c\n\n# 在wokerNode上执行这个join\nkubeadm join ${master_ip}:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c\n\n# 查看集群状态\nkubectl get nodes\n\tNAME     STATUS   ROLES    AGE     VERSION\n\tmaster   Ready    master   15m     v1.15.10\n\tnode1    Ready    <none>   9m41s   v1.15.10\n```\n\n## 7. 安装 *Kubernetes Dashboard*\n\n```shell\n# 安装 Kubernetes Dashboard 根据 CRD，使用http免密登录\nkubectl apply -f https://github.com/coderzc/coderzc.github.io/tree/master/blog/%E5%AE%B9%E5%99%A8%E5%8C%96/recommended.yaml\n\n# 显示 admin 的 token\nkubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token\n```\n\n## 8. Pod \n\n*Pod* 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。\n\n*Pod* （就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个） [容器](https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#why-containers)； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。 Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个应用容器， 这些容器是相对紧密的耦合在一起的。 在非云环境中，在相同的物理机或虚拟机上运行的应用类似于 在同一逻辑主机上运行的云应用。\n\n除了应用容器，Pod 还可以包含在 Pod 启动期间运行的 [Init 容器](https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/)。 你也可以在集群中支持[临时性容器](https://kubernetes.io/zh/docs/concepts/workloads/pods/ephemeral-containers/) 的情况下，为调试的目的注入临时性容器。\n\n详细介绍：https://kubernetes.io/zh/docs/concepts/workloads/pods\n\n","source":"_posts/容器化/20210801-kubernetes.md","raw":"## 1. kubernetes 起源与发展\n\n![20210512181906](https://gitee.com/coderzc/blogimage/raw/master/20210513152302.png)\n\n### 1.1 kubernetes 起源\n\n- Kubernetes最初源于谷歌内部的Borg，Kubernetes 的最初目标是为应用的容器化编排部署提供一个最小化的平台，包含几个基本功能：\n  1. 将应用水平扩容到多个集群\n  2. 为扩容的实例提供负载均衡的策略\n  3. 提供基本的健康检查和自愈能力\n  4. 实现任务的统一调度\n\n### 1.2 kubernetes 发展\n\n- 2014年6月 谷歌云计算专家Eric Brewer在旧金山的发布会为这款新的开源工具揭牌。\n- 2015年7月22日K8S迭代到 v1.0并在OSCON大会上正式对外公布。\n- 为了建立容器编排领域的标准和规范，Google、RedHat 等开源基础设施领域玩家们，在 2015 年共同牵头发起了名为 CNCF（Cloud Native Computing Foundation）的基金会。Kubernetes 成为 CNCF 最核心的项目。发起成员：AT&T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks。\n- 2018年，超过 1700 开发者成为 Kubernetes 项目社区贡献者，全球有 500 多场沙龙。国内出现大量基于 Kubernetes 的创业公司。\n- 2020 年，Kubernetes 项目已经成为贡献者仅次于 Linux 项目的第二大开源项目。成为了业界容器编排的事实标准，各大厂商纷纷宣布支持 Kubernetes 作为容器编排的方案。\n\n## 2. 为什么需要kubernetes\n\n### 2.1 传统的容器编排痛点\n\n容器技术虽然解决了应用和基础设施异构的问题，让应用可以做到一次构建，多次部署，但在复杂的微服务场景，单靠 Docker 技术还不够，它仍然有以下问题没有解决：\n\n- 集成和编排微服务模块\n- 提供按需自动扩容，缩容能力\n- 故障自愈\n- 集群内的通信\n\n### 2.2 Kubernetes 能解决的问题\n\n- 按需的垂直扩容，新的服务器(node)能够轻易的增加或删除\n- 按需的水平扩容，容器实例能够轻松扩容，缩容\n- 副本控制器，你不用担心副本的状态\n- 服务发现和路由\n- 自动部署和回滚，如果应用状态错误，可以实现自动回滚\n\n### 2.3 什么时候使用 Kubernetes？\n\n- 当你的应用是微服务架构\n- 开发者需要快速部署自己的新功能到测试环境进行验证\n- 降低硬件资源成本，提高使用率\n\n### 2.4 什么时候不适合使用 Kubernetes\n\n- 应用是轻量级的单体应用，没有高并发的需求\n- 团队文化不适应变革\n\n## 3. Kubernetes 架构与核心概念\n\n![Components of Kubernetes](https://gitee.com/coderzc/blogimage/raw/master/20210513152213.svg)\n\n### 3.1 主控制节点组件\n\n主控制节点组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。\n\n主控制节点组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有主控制节点组件，并且不会在此计算机上运行用户容器。\n\n- apiserver\n  主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端组件。\n- etcd\n  etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。\n\n- kube-scheduler\n  主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。\n  调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。\n- kube-controller-manager\n  在主节点上运行控制器的组件。\n  从逻辑上讲，每个控制器都是一个单独的进程，但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。这些控制器包括:\n      1. 节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。\n      2. 副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。\n      3. 终端控制器（Endpoints Controller）: 填充终端(Endpoints)对象(即加入 Service 与 Pod)。\n      4. 服务帐户和令牌控制器（Service Account & Token Controllers），为新的命名空间创建默认帐户和 API 访问令牌.\n\n### 3.2 从节点组件\n\n节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。\n\n- kubelet \n  一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。kubelet 不会管理不是由 Kubernetes 创建的容器。\n- kube-proxy\n  kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。\n  kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。\n- 容器运行时（Container Runtime）\n  容器运行环境是负责运行容器的软件。\n  Kubernetes 支持多个容器运行环境: Docker、 containerd、cri-o、 rktlet 以及任何实现 Kubernetes CRI (容器运行环境接口)。\n\n### 3.3 插件（Addons）\n\n- Kubeadm \n\n  Kubeadm 是Kubernetes的自动化部署工具，降低了部署难度，提高效率。\n\n- Kubectl \n\n  Kubectl 是Kubernetes集群管理工具相当于客户端。\n\n- DNS\n  尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有集群 DNS， 因为很多示例都需要 DNS 服务。\n\n- Web 界面（仪表盘）\n  Dashboard 是K ubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。\n\n- 容器资源监控\n  容器资源监控 将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中，并提供用于浏览这些数据的界面。\n\n- 集群层面日志\n  集群层面日志 机制负责将容器的日志数据 保存到一个集中的日志存储中，该存储能够提供搜索和浏览接口。\n\n## 4. 初始化基础环境\n\n```shell\n# 下载yum 源\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 清除缓存\nyum clean all\n\n# 安装基本软件包\nyum install wget net‐tools vim bash‐comp* ‐y\n\n#配置 K8S的阿里云yum源\ncat >>/etc/yum.repos.d/kubernetes.repo <<EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 配置 Docker yum源\nwget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo\n\n# 清除缓存\nyum clean all\n\n# 设置hosts\nvim /etc/hosts\n 192.168.99.101 master\n 192.168.99.102 node1\n 192.168.99.103 node2\n\n# 关闭防火墙\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭 SeLinux\nsetenforce 0\nsed -i \"s/SELINUX=enforcing/SELINUX=disabled/g\" /etc/selinux/config\n\n# 关闭 swap\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\n\n# 将桥接的IPv4流量传递到iptables的链\nmodprobe br_netfilter\necho \"1\" >/proc/sys/net/bridge/bridge-nf-call-iptables\nvi /etc/sysctl.d/k8s.conf \nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\n\n# 安装并启动 docker\nyum install -y docker-ce.x86_64 docker-ce-cli.x86_64 containerd.io.x86_64\n\n# 更换 docker 镜像源\nmkdir /etc/docker\n\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\": [\"https://registry.cn-hangzhou.aliyuncs.com\"],\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"]\n}\nEOF\n\n# 重启docker\nsystemctl daemon-reload\n# 开机自启\nsystemctl enable docker \nsystemctl restart docker\n\n# 如果报网络错误可能是没有成功建立docker网卡，可以手动创建\n`failed to start daemon: Error initializing network controller: list bridge addresses failed: PredefinedLocalScopeDefaultNetworks List:`\nip link add name docker0 type bridge\nip addr add dev docker0 172.1.0.1/16\n\n# 安装kubelet、kubeadm、kubectl\nyum install -y kubelet-1.15.10 kubeadm-1.15.10 kubectl-1.15.10\n\n# 启动 kubelet\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n## 5. 初始化 Master\n\n```shell\n# 初始化K8s主节点\nkubeadm init --kubernetes-version=1.15.10 \\\n--apiserver-advertise-address=${master_ip} \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--service-cidr=10.1.0.0/16 \\\n--pod-network-cidr=10.244.0.0/16\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# 安装网络插件 Flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# 查看K8s状态\nkubectl get node\n\tNAME     STATUS   ROLES    AGE   VERSION\n\tmaster   Ready    master   14m   v1.15.10\n\t\n# 故障排查 ！！！\n# kubelet 启动失败 报错：Failed to start ContainerManager failed to get rootfs info: unable to find data in memory cache\nvim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf 添加下面环境变量\nEnvironment=\"KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --feature-gates=\\\"LocalStorageCapacityIsolation=false,SupportNodePidsLimit=false,SupportPodPidsLimit=false\\\"\"\n\n# Failed to update stats for container \"/kubepods.slice/kubepods-burstable.slice\": failure - /sys/fs/cgroup/cpuacct/kubepods.slice/kubepods-burstable.slice/cpuacct.stat\ncat >/etc/systemd/system/kubelet.service.d/11-cgroups.conf<<EOF\n[Service]\nCPUAccounting=true\nMemoryAccounting=true\nEOF\n\n并在刚才那个环境变量上追加参数：\nEnvironment=\"KUBELET_CONFIG_ARGS=--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice\"\n\n# 然后重启 kubelet\nsystemctl daemon-reload && systemctl restart kubelet\n```\n\n## 6. 初始化 WorkerNode\n\n```shell\n# 拷贝 admin.conf 到 wokerNode\nscp /etc/kubernetes/admin.conf root@node1:/etc/kubernetes/\n\n# 配置 Kubeconfig 环境变量\necho \"export KUBECONFIG=/etc/kubernetes/admin.conf\" >> ~/.bash_profile\nsource ~/.bash_profile\n\n# 如果是克隆的 master 机器, 需要清理 master 环境网络\nkubeadm reset\nsystemctl stop kubelet\nsystemctl stop docker\nrm -rf /var/lib/cni/\nrm -rf /var/lib/kubelet/*\nrm -rf /var/cni/\nifconfig cni0 down\nifconfig flannel.1 down\nifconfig docker0 down\nip link delete cni0\nip link delete flannel.1\nsystemctl start docker\nsystemctl start kubelet\n\n# 否则安装 Flannel 网络插件\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# 将master节点下面 /etc/cni/net.d/下面的所有文件拷贝到node节点上\nmkdir -p /etc/cni/net.d/\n# 在 master\nscp /etc/cni/net.d/* root@${node_ip}:/etc/cni/net.d/\n\n# 在 master 生成token\nkubeadm token create --print-join-command\n> kubeadm join ${master_ip}:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c\n\n# 在wokerNode上执行这个join\nkubeadm join ${master_ip}:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c\n\n# 查看集群状态\nkubectl get nodes\n\tNAME     STATUS   ROLES    AGE     VERSION\n\tmaster   Ready    master   15m     v1.15.10\n\tnode1    Ready    <none>   9m41s   v1.15.10\n```\n\n## 7. 安装 *Kubernetes Dashboard*\n\n```shell\n# 安装 Kubernetes Dashboard 根据 CRD，使用http免密登录\nkubectl apply -f https://github.com/coderzc/coderzc.github.io/tree/master/blog/%E5%AE%B9%E5%99%A8%E5%8C%96/recommended.yaml\n\n# 显示 admin 的 token\nkubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token\n```\n\n## 8. Pod \n\n*Pod* 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。\n\n*Pod* （就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个） [容器](https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#why-containers)； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。 Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个应用容器， 这些容器是相对紧密的耦合在一起的。 在非云环境中，在相同的物理机或虚拟机上运行的应用类似于 在同一逻辑主机上运行的云应用。\n\n除了应用容器，Pod 还可以包含在 Pod 启动期间运行的 [Init 容器](https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/)。 你也可以在集群中支持[临时性容器](https://kubernetes.io/zh/docs/concepts/workloads/pods/ephemeral-containers/) 的情况下，为调试的目的注入临时性容器。\n\n详细介绍：https://kubernetes.io/zh/docs/concepts/workloads/pods\n\n","slug":"容器化/20210801-kubernetes","published":1,"date":"2021-07-31T16:00:00.000Z","updated":"2021-08-17T18:45:34.836Z","title":"kubernetes","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0l0008nnvb7yvb7ta3","content":"<h2 id=\"1-kubernetes-起源与发展\"><a href=\"#1-kubernetes-起源与发展\" class=\"headerlink\" title=\"1. kubernetes 起源与发展\"></a>1. kubernetes 起源与发展</h2><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210513152302.png\" alt=\"20210512181906\"></p>\n<h3 id=\"1-1-kubernetes-起源\"><a href=\"#1-1-kubernetes-起源\" class=\"headerlink\" title=\"1.1 kubernetes 起源\"></a>1.1 kubernetes 起源</h3><ul>\n<li>Kubernetes最初源于谷歌内部的Borg，Kubernetes 的最初目标是为应用的容器化编排部署提供一个最小化的平台，包含几个基本功能：<ol>\n<li>将应用水平扩容到多个集群</li>\n<li>为扩容的实例提供负载均衡的策略</li>\n<li>提供基本的健康检查和自愈能力</li>\n<li>实现任务的统一调度</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-2-kubernetes-发展\"><a href=\"#1-2-kubernetes-发展\" class=\"headerlink\" title=\"1.2 kubernetes 发展\"></a>1.2 kubernetes 发展</h3><ul>\n<li>2014年6月 谷歌云计算专家Eric Brewer在旧金山的发布会为这款新的开源工具揭牌。</li>\n<li>2015年7月22日K8S迭代到 v1.0并在OSCON大会上正式对外公布。</li>\n<li>为了建立容器编排领域的标准和规范，Google、RedHat 等开源基础设施领域玩家们，在 2015 年共同牵头发起了名为 CNCF（Cloud Native Computing Foundation）的基金会。Kubernetes 成为 CNCF 最核心的项目。发起成员：AT&amp;T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks。</li>\n<li>2018年，超过 1700 开发者成为 Kubernetes 项目社区贡献者，全球有 500 多场沙龙。国内出现大量基于 Kubernetes 的创业公司。</li>\n<li>2020 年，Kubernetes 项目已经成为贡献者仅次于 Linux 项目的第二大开源项目。成为了业界容器编排的事实标准，各大厂商纷纷宣布支持 Kubernetes 作为容器编排的方案。</li>\n</ul>\n<h2 id=\"2-为什么需要kubernetes\"><a href=\"#2-为什么需要kubernetes\" class=\"headerlink\" title=\"2. 为什么需要kubernetes\"></a>2. 为什么需要kubernetes</h2><h3 id=\"2-1-传统的容器编排痛点\"><a href=\"#2-1-传统的容器编排痛点\" class=\"headerlink\" title=\"2.1 传统的容器编排痛点\"></a>2.1 传统的容器编排痛点</h3><p>容器技术虽然解决了应用和基础设施异构的问题，让应用可以做到一次构建，多次部署，但在复杂的微服务场景，单靠 Docker 技术还不够，它仍然有以下问题没有解决：</p>\n<ul>\n<li>集成和编排微服务模块</li>\n<li>提供按需自动扩容，缩容能力</li>\n<li>故障自愈</li>\n<li>集群内的通信</li>\n</ul>\n<h3 id=\"2-2-Kubernetes-能解决的问题\"><a href=\"#2-2-Kubernetes-能解决的问题\" class=\"headerlink\" title=\"2.2 Kubernetes 能解决的问题\"></a>2.2 Kubernetes 能解决的问题</h3><ul>\n<li>按需的垂直扩容，新的服务器(node)能够轻易的增加或删除</li>\n<li>按需的水平扩容，容器实例能够轻松扩容，缩容</li>\n<li>副本控制器，你不用担心副本的状态</li>\n<li>服务发现和路由</li>\n<li>自动部署和回滚，如果应用状态错误，可以实现自动回滚</li>\n</ul>\n<h3 id=\"2-3-什么时候使用-Kubernetes？\"><a href=\"#2-3-什么时候使用-Kubernetes？\" class=\"headerlink\" title=\"2.3 什么时候使用 Kubernetes？\"></a>2.3 什么时候使用 Kubernetes？</h3><ul>\n<li>当你的应用是微服务架构</li>\n<li>开发者需要快速部署自己的新功能到测试环境进行验证</li>\n<li>降低硬件资源成本，提高使用率</li>\n</ul>\n<h3 id=\"2-4-什么时候不适合使用-Kubernetes\"><a href=\"#2-4-什么时候不适合使用-Kubernetes\" class=\"headerlink\" title=\"2.4 什么时候不适合使用 Kubernetes\"></a>2.4 什么时候不适合使用 Kubernetes</h3><ul>\n<li>应用是轻量级的单体应用，没有高并发的需求</li>\n<li>团队文化不适应变革</li>\n</ul>\n<h2 id=\"3-Kubernetes-架构与核心概念\"><a href=\"#3-Kubernetes-架构与核心概念\" class=\"headerlink\" title=\"3. Kubernetes 架构与核心概念\"></a>3. Kubernetes 架构与核心概念</h2><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210513152213.svg\" alt=\"Components of Kubernetes\"></p>\n<h3 id=\"3-1-主控制节点组件\"><a href=\"#3-1-主控制节点组件\" class=\"headerlink\" title=\"3.1 主控制节点组件\"></a>3.1 主控制节点组件</h3><p>主控制节点组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。</p>\n<p>主控制节点组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有主控制节点组件，并且不会在此计算机上运行用户容器。</p>\n<ul>\n<li><p>apiserver<br>主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端组件。</p>\n</li>\n<li><p>etcd<br>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p>\n</li>\n<li><p>kube-scheduler<br>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。<br>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p>\n</li>\n<li><p>kube-controller-manager<br>在主节点上运行控制器的组件。<br>从逻辑上讲，每个控制器都是一个单独的进程，但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。这些控制器包括:</p>\n<pre><code>1. 节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。\n2. 副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。\n3. 终端控制器（Endpoints Controller）: 填充终端(Endpoints)对象(即加入 Service 与 Pod)。\n4. 服务帐户和令牌控制器（Service Account &amp; Token Controllers），为新的命名空间创建默认帐户和 API 访问令牌.\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-2-从节点组件\"><a href=\"#3-2-从节点组件\" class=\"headerlink\" title=\"3.2 从节点组件\"></a>3.2 从节点组件</h3><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p>\n<ul>\n<li>kubelet<br>一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。kubelet 不会管理不是由 Kubernetes 创建的容器。</li>\n<li>kube-proxy<br>kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。<br>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</li>\n<li>容器运行时（Container Runtime）<br>容器运行环境是负责运行容器的软件。<br>Kubernetes 支持多个容器运行环境: Docker、 containerd、cri-o、 rktlet 以及任何实现 Kubernetes CRI (容器运行环境接口)。</li>\n</ul>\n<h3 id=\"3-3-插件（Addons）\"><a href=\"#3-3-插件（Addons）\" class=\"headerlink\" title=\"3.3 插件（Addons）\"></a>3.3 插件（Addons）</h3><ul>\n<li><p>Kubeadm </p>\n<p>Kubeadm 是Kubernetes的自动化部署工具，降低了部署难度，提高效率。</p>\n</li>\n<li><p>Kubectl </p>\n<p>Kubectl 是Kubernetes集群管理工具相当于客户端。</p>\n</li>\n<li><p>DNS<br>尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有集群 DNS， 因为很多示例都需要 DNS 服务。</p>\n</li>\n<li><p>Web 界面（仪表盘）<br>Dashboard 是K ubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。</p>\n</li>\n<li><p>容器资源监控<br>容器资源监控 将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中，并提供用于浏览这些数据的界面。</p>\n</li>\n<li><p>集群层面日志<br>集群层面日志 机制负责将容器的日志数据 保存到一个集中的日志存储中，该存储能够提供搜索和浏览接口。</p>\n</li>\n</ul>\n<h2 id=\"4-初始化基础环境\"><a href=\"#4-初始化基础环境\" class=\"headerlink\" title=\"4. 初始化基础环境\"></a>4. 初始化基础环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载yum 源</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清除缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装基本软件包</span></span><br><span class=\"line\">yum install wget net‐tools vim bash‐comp* ‐y</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置 K8S的阿里云yum源</span></span><br><span class=\"line\">cat &gt;&gt;/etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 Docker yum源</span></span><br><span class=\"line\">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清除缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置hosts</span></span><br><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"> 192.168.99.101 master</span><br><span class=\"line\"> 192.168.99.102 node1</span><br><span class=\"line\"> 192.168.99.103 node2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭 SeLinux</span></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭 swap</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">yes | cp /etc/fstab /etc/fstab_bak</span><br><span class=\"line\">cat /etc/fstab_bak |grep -v swap &gt; /etc/fstab</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将桥接的IPv4流量传递到iptables的链</span></span><br><span class=\"line\">modprobe br_netfilter</span><br><span class=\"line\">echo &quot;1&quot; &gt;/proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class=\"line\">vi /etc/sysctl.d/k8s.conf </span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装并启动 docker</span></span><br><span class=\"line\">yum install -y docker-ce.x86_64 docker-ce-cli.x86_64 containerd.io.x86_64</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更换 docker 镜像源</span></span><br><span class=\"line\">mkdir /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;],</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启docker</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开机自启</span></span><br><span class=\"line\">systemctl enable docker </span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果报网络错误可能是没有成功建立docker网卡，可以手动创建</span></span><br><span class=\"line\">`failed to start daemon: Error initializing network controller: list bridge addresses failed: PredefinedLocalScopeDefaultNetworks List:`</span><br><span class=\"line\">ip link add name docker0 type bridge</span><br><span class=\"line\">ip addr add dev docker0 172.1.0.1/16</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装kubelet、kubeadm、kubectl</span></span><br><span class=\"line\">yum install -y kubelet-1.15.10 kubeadm-1.15.10 kubectl-1.15.10</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动 kubelet</span></span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-初始化-Master\"><a href=\"#5-初始化-Master\" class=\"headerlink\" title=\"5. 初始化 Master\"></a>5. 初始化 Master</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化K8s主节点</span></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.15.10 \\</span><br><span class=\"line\">--apiserver-advertise-address=$&#123;master_ip&#125; \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">--service-cidr=10.1.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装网络插件 Flannel</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看K8s状态</span></span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\">\tNAME     STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">\tmaster   Ready    master   14m   v1.15.10</span><br><span class=\"line\"><span class=\"meta\">\t</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 故障排查 ！！！</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubelet 启动失败 报错：Failed to start ContainerManager failed to get rootfs info: unable to find data <span class=\"keyword\">in</span> memory cache</span></span><br><span class=\"line\">vim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf 添加下面环境变量</span><br><span class=\"line\">Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --feature-gates=\\&quot;LocalStorageCapacityIsolation=false,SupportNodePidsLimit=false,SupportPodPidsLimit=false\\&quot;&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Failed to update stats <span class=\"keyword\">for</span> container <span class=\"string\">&quot;/kubepods.slice/kubepods-burstable.slice&quot;</span>: failure - /sys/fs/cgroup/cpuacct/kubepods.slice/kubepods-burstable.slice/cpuacct.stat</span></span><br><span class=\"line\">cat &gt;/etc/systemd/system/kubelet.service.d/11-cgroups.conf&lt;&lt;EOF</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">CPUAccounting=true</span><br><span class=\"line\">MemoryAccounting=true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">并在刚才那个环境变量上追加参数：</span><br><span class=\"line\">Environment=&quot;KUBELET_CONFIG_ARGS=--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后重启 kubelet</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-初始化-WorkerNode\"><a href=\"#6-初始化-WorkerNode\" class=\"headerlink\" title=\"6. 初始化 WorkerNode\"></a>6. 初始化 WorkerNode</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拷贝 admin.conf 到 wokerNode</span></span><br><span class=\"line\">scp /etc/kubernetes/admin.conf root@node1:/etc/kubernetes/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 Kubeconfig 环境变量</span></span><br><span class=\"line\">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果是克隆的 master 机器, 需要清理 master 环境网络</span></span><br><span class=\"line\">kubeadm reset</span><br><span class=\"line\">systemctl stop kubelet</span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">rm -rf /var/lib/cni/</span><br><span class=\"line\">rm -rf /var/lib/kubelet/*</span><br><span class=\"line\">rm -rf /var/cni/</span><br><span class=\"line\">ifconfig cni0 down</span><br><span class=\"line\">ifconfig flannel.1 down</span><br><span class=\"line\">ifconfig docker0 down</span><br><span class=\"line\">ip link delete cni0</span><br><span class=\"line\">ip link delete flannel.1</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 否则安装 Flannel 网络插件</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将master节点下面 /etc/cni/net.d/下面的所有文件拷贝到node节点上</span></span><br><span class=\"line\">mkdir -p /etc/cni/net.d/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在 master</span></span><br><span class=\"line\">scp /etc/cni/net.d/* root@$&#123;node_ip&#125;:/etc/cni/net.d/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在 master 生成token</span></span><br><span class=\"line\">kubeadm token create --print-join-command</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> kubeadm join <span class=\"variable\">$&#123;master_ip&#125;</span>:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在wokerNode上执行这个join</span></span><br><span class=\"line\">kubeadm join $&#123;master_ip&#125;:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看集群状态</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\">\tNAME     STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">\tmaster   Ready    master   15m     v1.15.10</span><br><span class=\"line\">\tnode1    Ready    &lt;none&gt;   9m41s   v1.15.10</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-安装-Kubernetes-Dashboard\"><a href=\"#7-安装-Kubernetes-Dashboard\" class=\"headerlink\" title=\"7. 安装 Kubernetes Dashboard\"></a>7. 安装 <em>Kubernetes Dashboard</em></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 Kubernetes Dashboard 根据 CRD，使用http免密登录</span></span><br><span class=\"line\">kubectl apply -f https://github.com/coderzc/coderzc.github.io/tree/master/blog/%E5%AE%B9%E5%99%A8%E5%8C%96/recommended.yaml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示 admin 的 token</span></span><br><span class=\"line\">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Pod\"><a href=\"#8-Pod\" class=\"headerlink\" title=\"8. Pod\"></a>8. Pod</h2><p><em>Pod</em> 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。</p>\n<p><em>Pod</em> （就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个） <a href=\"https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#why-containers\">容器</a>； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。 Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个应用容器， 这些容器是相对紧密的耦合在一起的。 在非云环境中，在相同的物理机或虚拟机上运行的应用类似于 在同一逻辑主机上运行的云应用。</p>\n<p>除了应用容器，Pod 还可以包含在 Pod 启动期间运行的 <a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/\">Init 容器</a>。 你也可以在集群中支持<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/ephemeral-containers/\">临时性容器</a> 的情况下，为调试的目的注入临时性容器。</p>\n<p>详细介绍：<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods\">https://kubernetes.io/zh/docs/concepts/workloads/pods</a></p>\n","site":{"data":{}},"abbrlink":"3ASFJ6G","excerpt":"1. kubernetes 起源与发展\n\n\n1.1 kubernetes 起源\n * Kubernetes最初源于谷歌内部的Borg，Kubernetes 的最初目标是为应用的容器化编排部署提供一个最小化的平台，包含几个基本功能： 1. 将应用水平扩容到多个集群\n    2. 为扩容的实例提供负载均衡的策略\n    3. 提供基本的健康检查和自愈能力\n    4. 实现任务的统一调度\n   \n   \n\n1.2 kubernetes 发展\n * 2014年6月 谷歌云计算专家Eric Brewer在旧金山的发布会为这款新的开源工具揭牌。\n * 2015年7月22日K8S迭代到 v1.0并在OSC","more":"<h2 id=\"1-kubernetes-起源与发展\"><a href=\"#1-kubernetes-起源与发展\" class=\"headerlink\" title=\"1. kubernetes 起源与发展\"></a>1. kubernetes 起源与发展</h2><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210513152302.png\" alt=\"20210512181906\"></p>\n<h3 id=\"1-1-kubernetes-起源\"><a href=\"#1-1-kubernetes-起源\" class=\"headerlink\" title=\"1.1 kubernetes 起源\"></a>1.1 kubernetes 起源</h3><ul>\n<li>Kubernetes最初源于谷歌内部的Borg，Kubernetes 的最初目标是为应用的容器化编排部署提供一个最小化的平台，包含几个基本功能：<ol>\n<li>将应用水平扩容到多个集群</li>\n<li>为扩容的实例提供负载均衡的策略</li>\n<li>提供基本的健康检查和自愈能力</li>\n<li>实现任务的统一调度</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-2-kubernetes-发展\"><a href=\"#1-2-kubernetes-发展\" class=\"headerlink\" title=\"1.2 kubernetes 发展\"></a>1.2 kubernetes 发展</h3><ul>\n<li>2014年6月 谷歌云计算专家Eric Brewer在旧金山的发布会为这款新的开源工具揭牌。</li>\n<li>2015年7月22日K8S迭代到 v1.0并在OSCON大会上正式对外公布。</li>\n<li>为了建立容器编排领域的标准和规范，Google、RedHat 等开源基础设施领域玩家们，在 2015 年共同牵头发起了名为 CNCF（Cloud Native Computing Foundation）的基金会。Kubernetes 成为 CNCF 最核心的项目。发起成员：AT&amp;T, Box, Cisco, Cloud Foundry Foundation, CoreOS, Cycle Computing, Docker, eBay, Goldman Sachs, Google, Huawei, IBM, Intel, Joyent, Kismatic, Mesosphere, Red Hat, Switch SUPERNAP, Twitter, Univa, VMware and Weaveworks。</li>\n<li>2018年，超过 1700 开发者成为 Kubernetes 项目社区贡献者，全球有 500 多场沙龙。国内出现大量基于 Kubernetes 的创业公司。</li>\n<li>2020 年，Kubernetes 项目已经成为贡献者仅次于 Linux 项目的第二大开源项目。成为了业界容器编排的事实标准，各大厂商纷纷宣布支持 Kubernetes 作为容器编排的方案。</li>\n</ul>\n<h2 id=\"2-为什么需要kubernetes\"><a href=\"#2-为什么需要kubernetes\" class=\"headerlink\" title=\"2. 为什么需要kubernetes\"></a>2. 为什么需要kubernetes</h2><h3 id=\"2-1-传统的容器编排痛点\"><a href=\"#2-1-传统的容器编排痛点\" class=\"headerlink\" title=\"2.1 传统的容器编排痛点\"></a>2.1 传统的容器编排痛点</h3><p>容器技术虽然解决了应用和基础设施异构的问题，让应用可以做到一次构建，多次部署，但在复杂的微服务场景，单靠 Docker 技术还不够，它仍然有以下问题没有解决：</p>\n<ul>\n<li>集成和编排微服务模块</li>\n<li>提供按需自动扩容，缩容能力</li>\n<li>故障自愈</li>\n<li>集群内的通信</li>\n</ul>\n<h3 id=\"2-2-Kubernetes-能解决的问题\"><a href=\"#2-2-Kubernetes-能解决的问题\" class=\"headerlink\" title=\"2.2 Kubernetes 能解决的问题\"></a>2.2 Kubernetes 能解决的问题</h3><ul>\n<li>按需的垂直扩容，新的服务器(node)能够轻易的增加或删除</li>\n<li>按需的水平扩容，容器实例能够轻松扩容，缩容</li>\n<li>副本控制器，你不用担心副本的状态</li>\n<li>服务发现和路由</li>\n<li>自动部署和回滚，如果应用状态错误，可以实现自动回滚</li>\n</ul>\n<h3 id=\"2-3-什么时候使用-Kubernetes？\"><a href=\"#2-3-什么时候使用-Kubernetes？\" class=\"headerlink\" title=\"2.3 什么时候使用 Kubernetes？\"></a>2.3 什么时候使用 Kubernetes？</h3><ul>\n<li>当你的应用是微服务架构</li>\n<li>开发者需要快速部署自己的新功能到测试环境进行验证</li>\n<li>降低硬件资源成本，提高使用率</li>\n</ul>\n<h3 id=\"2-4-什么时候不适合使用-Kubernetes\"><a href=\"#2-4-什么时候不适合使用-Kubernetes\" class=\"headerlink\" title=\"2.4 什么时候不适合使用 Kubernetes\"></a>2.4 什么时候不适合使用 Kubernetes</h3><ul>\n<li>应用是轻量级的单体应用，没有高并发的需求</li>\n<li>团队文化不适应变革</li>\n</ul>\n<h2 id=\"3-Kubernetes-架构与核心概念\"><a href=\"#3-Kubernetes-架构与核心概念\" class=\"headerlink\" title=\"3. Kubernetes 架构与核心概念\"></a>3. Kubernetes 架构与核心概念</h2><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210513152213.svg\" alt=\"Components of Kubernetes\"></p>\n<h3 id=\"3-1-主控制节点组件\"><a href=\"#3-1-主控制节点组件\" class=\"headerlink\" title=\"3.1 主控制节点组件\"></a>3.1 主控制节点组件</h3><p>主控制节点组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。</p>\n<p>主控制节点组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有主控制节点组件，并且不会在此计算机上运行用户容器。</p>\n<ul>\n<li><p>apiserver<br>主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端组件。</p>\n</li>\n<li><p>etcd<br>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p>\n</li>\n<li><p>kube-scheduler<br>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。<br>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p>\n</li>\n<li><p>kube-controller-manager<br>在主节点上运行控制器的组件。<br>从逻辑上讲，每个控制器都是一个单独的进程，但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。这些控制器包括:</p>\n<pre><code>1. 节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。\n2. 副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。\n3. 终端控制器（Endpoints Controller）: 填充终端(Endpoints)对象(即加入 Service 与 Pod)。\n4. 服务帐户和令牌控制器（Service Account &amp; Token Controllers），为新的命名空间创建默认帐户和 API 访问令牌.\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-2-从节点组件\"><a href=\"#3-2-从节点组件\" class=\"headerlink\" title=\"3.2 从节点组件\"></a>3.2 从节点组件</h3><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p>\n<ul>\n<li>kubelet<br>一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。kubelet 不会管理不是由 Kubernetes 创建的容器。</li>\n<li>kube-proxy<br>kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。<br>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</li>\n<li>容器运行时（Container Runtime）<br>容器运行环境是负责运行容器的软件。<br>Kubernetes 支持多个容器运行环境: Docker、 containerd、cri-o、 rktlet 以及任何实现 Kubernetes CRI (容器运行环境接口)。</li>\n</ul>\n<h3 id=\"3-3-插件（Addons）\"><a href=\"#3-3-插件（Addons）\" class=\"headerlink\" title=\"3.3 插件（Addons）\"></a>3.3 插件（Addons）</h3><ul>\n<li><p>Kubeadm </p>\n<p>Kubeadm 是Kubernetes的自动化部署工具，降低了部署难度，提高效率。</p>\n</li>\n<li><p>Kubectl </p>\n<p>Kubectl 是Kubernetes集群管理工具相当于客户端。</p>\n</li>\n<li><p>DNS<br>尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有集群 DNS， 因为很多示例都需要 DNS 服务。</p>\n</li>\n<li><p>Web 界面（仪表盘）<br>Dashboard 是K ubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。</p>\n</li>\n<li><p>容器资源监控<br>容器资源监控 将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中，并提供用于浏览这些数据的界面。</p>\n</li>\n<li><p>集群层面日志<br>集群层面日志 机制负责将容器的日志数据 保存到一个集中的日志存储中，该存储能够提供搜索和浏览接口。</p>\n</li>\n</ul>\n<h2 id=\"4-初始化基础环境\"><a href=\"#4-初始化基础环境\" class=\"headerlink\" title=\"4. 初始化基础环境\"></a>4. 初始化基础环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载yum 源</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清除缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装基本软件包</span></span><br><span class=\"line\">yum install wget net‐tools vim bash‐comp* ‐y</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置 K8S的阿里云yum源</span></span><br><span class=\"line\">cat &gt;&gt;/etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 Docker yum源</span></span><br><span class=\"line\">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清除缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置hosts</span></span><br><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"> 192.168.99.101 master</span><br><span class=\"line\"> 192.168.99.102 node1</span><br><span class=\"line\"> 192.168.99.103 node2</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭防火墙</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭 SeLinux</span></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭 swap</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">yes | cp /etc/fstab /etc/fstab_bak</span><br><span class=\"line\">cat /etc/fstab_bak |grep -v swap &gt; /etc/fstab</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将桥接的IPv4流量传递到iptables的链</span></span><br><span class=\"line\">modprobe br_netfilter</span><br><span class=\"line\">echo &quot;1&quot; &gt;/proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class=\"line\">vi /etc/sysctl.d/k8s.conf </span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装并启动 docker</span></span><br><span class=\"line\">yum install -y docker-ce.x86_64 docker-ce-cli.x86_64 containerd.io.x86_64</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更换 docker 镜像源</span></span><br><span class=\"line\">mkdir /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;],</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启docker</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开机自启</span></span><br><span class=\"line\">systemctl enable docker </span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果报网络错误可能是没有成功建立docker网卡，可以手动创建</span></span><br><span class=\"line\">`failed to start daemon: Error initializing network controller: list bridge addresses failed: PredefinedLocalScopeDefaultNetworks List:`</span><br><span class=\"line\">ip link add name docker0 type bridge</span><br><span class=\"line\">ip addr add dev docker0 172.1.0.1/16</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装kubelet、kubeadm、kubectl</span></span><br><span class=\"line\">yum install -y kubelet-1.15.10 kubeadm-1.15.10 kubectl-1.15.10</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动 kubelet</span></span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-初始化-Master\"><a href=\"#5-初始化-Master\" class=\"headerlink\" title=\"5. 初始化 Master\"></a>5. 初始化 Master</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化K8s主节点</span></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.15.10 \\</span><br><span class=\"line\">--apiserver-advertise-address=$&#123;master_ip&#125; \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">--service-cidr=10.1.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装网络插件 Flannel</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看K8s状态</span></span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\">\tNAME     STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">\tmaster   Ready    master   14m   v1.15.10</span><br><span class=\"line\"><span class=\"meta\">\t</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 故障排查 ！！！</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> kubelet 启动失败 报错：Failed to start ContainerManager failed to get rootfs info: unable to find data <span class=\"keyword\">in</span> memory cache</span></span><br><span class=\"line\">vim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf 添加下面环境变量</span><br><span class=\"line\">Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --feature-gates=\\&quot;LocalStorageCapacityIsolation=false,SupportNodePidsLimit=false,SupportPodPidsLimit=false\\&quot;&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Failed to update stats <span class=\"keyword\">for</span> container <span class=\"string\">&quot;/kubepods.slice/kubepods-burstable.slice&quot;</span>: failure - /sys/fs/cgroup/cpuacct/kubepods.slice/kubepods-burstable.slice/cpuacct.stat</span></span><br><span class=\"line\">cat &gt;/etc/systemd/system/kubelet.service.d/11-cgroups.conf&lt;&lt;EOF</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">CPUAccounting=true</span><br><span class=\"line\">MemoryAccounting=true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">并在刚才那个环境变量上追加参数：</span><br><span class=\"line\">Environment=&quot;KUBELET_CONFIG_ARGS=--runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice&quot;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后重启 kubelet</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-初始化-WorkerNode\"><a href=\"#6-初始化-WorkerNode\" class=\"headerlink\" title=\"6. 初始化 WorkerNode\"></a>6. 初始化 WorkerNode</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拷贝 admin.conf 到 wokerNode</span></span><br><span class=\"line\">scp /etc/kubernetes/admin.conf root@node1:/etc/kubernetes/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 Kubeconfig 环境变量</span></span><br><span class=\"line\">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果是克隆的 master 机器, 需要清理 master 环境网络</span></span><br><span class=\"line\">kubeadm reset</span><br><span class=\"line\">systemctl stop kubelet</span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\">rm -rf /var/lib/cni/</span><br><span class=\"line\">rm -rf /var/lib/kubelet/*</span><br><span class=\"line\">rm -rf /var/cni/</span><br><span class=\"line\">ifconfig cni0 down</span><br><span class=\"line\">ifconfig flannel.1 down</span><br><span class=\"line\">ifconfig docker0 down</span><br><span class=\"line\">ip link delete cni0</span><br><span class=\"line\">ip link delete flannel.1</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 否则安装 Flannel 网络插件</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将master节点下面 /etc/cni/net.d/下面的所有文件拷贝到node节点上</span></span><br><span class=\"line\">mkdir -p /etc/cni/net.d/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在 master</span></span><br><span class=\"line\">scp /etc/cni/net.d/* root@$&#123;node_ip&#125;:/etc/cni/net.d/</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在 master 生成token</span></span><br><span class=\"line\">kubeadm token create --print-join-command</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> kubeadm join <span class=\"variable\">$&#123;master_ip&#125;</span>:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在wokerNode上执行这个join</span></span><br><span class=\"line\">kubeadm join $&#123;master_ip&#125;:6443 --token 56peeh.gx8l6z1vwo04usrb     --discovery-token-ca-cert-hash sha256:3ba111312aee9e77ca7939f8336db665b01ea3f457bee501117810b2d8ccfe3c</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看集群状态</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\">\tNAME     STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">\tmaster   Ready    master   15m     v1.15.10</span><br><span class=\"line\">\tnode1    Ready    &lt;none&gt;   9m41s   v1.15.10</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-安装-Kubernetes-Dashboard\"><a href=\"#7-安装-Kubernetes-Dashboard\" class=\"headerlink\" title=\"7. 安装 Kubernetes Dashboard\"></a>7. 安装 <em>Kubernetes Dashboard</em></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 Kubernetes Dashboard 根据 CRD，使用http免密登录</span></span><br><span class=\"line\">kubectl apply -f https://github.com/coderzc/coderzc.github.io/tree/master/blog/%E5%AE%B9%E5%99%A8%E5%8C%96/recommended.yaml</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示 admin 的 token</span></span><br><span class=\"line\">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Pod\"><a href=\"#8-Pod\" class=\"headerlink\" title=\"8. Pod\"></a>8. Pod</h2><p><em>Pod</em> 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。</p>\n<p><em>Pod</em> （就像在鲸鱼荚或者豌豆荚中）是一组（一个或多个） <a href=\"https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#why-containers\">容器</a>； 这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。 Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个应用容器， 这些容器是相对紧密的耦合在一起的。 在非云环境中，在相同的物理机或虚拟机上运行的应用类似于 在同一逻辑主机上运行的云应用。</p>\n<p>除了应用容器，Pod 还可以包含在 Pod 启动期间运行的 <a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/\">Init 容器</a>。 你也可以在集群中支持<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/ephemeral-containers/\">临时性容器</a> 的情况下，为调试的目的注入临时性容器。</p>\n<p>详细介绍：<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods\">https://kubernetes.io/zh/docs/concepts/workloads/pods</a></p>\n"},{"_content":"### 一.安装并启动Zookeeper\n看看这篇博文吧，我就不赘述了 https://blog.csdn.net/lisongjia123/article/details/78639242\n\n### 二.创建公共接口\n1. 新建一个maven项目\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-cf697b2473f0b77b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 创建接口：\n\n```java\npackage com.zc.dubbo.service;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n\n```\n3. 把项目打包成jar包\n![打包](https://upload-images.jianshu.io/upload_images/12637001-e38c5f50cafa5ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![jar包](https://upload-images.jianshu.io/upload_images/12637001-0af0fa356e257b47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 三.创建服务提供者\n1. 先创建一个空的springboot项目,加入`dubbo-spring-boot-starter`依赖\n```xml\n      <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>RELEASE</version>\n        </dependency>\n```\n2. 导入之前生成的公共接口jar包（不会导入自行百度）\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-09287d9d3319f8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.实现公共接口，并添加dubbo的@service**（注意不是spring的service注解，看导包）**\n实现类：\n```java\npackage com.zc.dubboprovider.service.impl;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.zc.dubbo.service.DemoService;\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n            return \"Hello, \" + name + \" (from Spring Boot)\";\n    }\n}\n\n\n```\n4. 配置文件\n先把properties文件修改为yml文件（习惯使用yml文件，也可不改）\n```yml\n#dubbo协议\ndubbo:\n  protocol:\n    id: dubbo\n    name: dubbo\n    port: 12345\n    status: server\n#注册中心地址\n  registry:\n    address: zookeeper://localhost:2181\n#dubbo应用名\n  application:\n    name: dubbo-provider-demo\n```\n5. 在启动类上开启dubbo服务并扫描服务类\n```java\npackage com.zc.dubboprovider;\n\nimport com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@EnableDubbo(scanBasePackages = \"com.zc.dubboprovider.service.impl\")\npublic class DubboProviderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DubboProviderApplication.class, args);\n    }\n}\n```\n6. 启动生产者\n\n### 四.创建服务消费者\n1. 同样新建springboot项目，加入`dubbo-spring-boot-starter`依赖，消费者要测试访问所以加入web依赖：\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>RELEASE</version>\n        </dependency>\n```\n2. 导入公共接口的依赖\n\n3. 配置文件\n```yml\nserver:\n  port: 8080\n\ndubbo:\n  protocol:\n    id: dubbo\n    name: dubbo\n\n  registry:\n    address: zookeeper://localhost:2181\n\n  application:\n    name: dubbo-consumer-demo\n```\n\n4. 编写controller类，**并使用dubbo的 @Reference 注入公共接口，dubbo会自动去注册中心找相应服务的生产者，并通过dubbo协议调用相应方法**\n```java\npackage com.zc.dubboconsumer.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.zc.dubbo.service.DemoService;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@RestController\npublic class DemoController {\n    @Reference\n    private DemoService demoService;\n\n    @RequestMapping(\"/sayHello\")\n    public String sayHello(@RequestParam String name) {\n        return demoService.sayHello(name);\n    }\n}\n\n```\n5.在启动类上开启dubbo并扫描controller类（不加也可以，因为加了@RestController Spring会自动扫描相应的类,但有时不会加载 @Reference，最好写上）\n\n```java\npackage com.zc.dubboconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@EnableDubbo(scanBasePackages = \"com.zc.dubboconsumer.controller\")\npublic class DubboConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DubboConsumerApplication.class, args);\n    }\n}\n```\n6. 启动消费者，并访问 http://localhost:8080/sayHello?name=dubbo\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-f00c6289ceab1d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**成功调用到生产者的服务**\n\n### 五. 使用dubbo-admin监控服务\n请查看这篇博文，就是个管理界面，搭起来然后把服务注册中心地址换成自己的就行了https://www.jianshu.com/p/3d619740883c\n\n这是最终效果，生产者和消费者都能看到了\n![dubbo-admin.png](https://upload-images.jianshu.io/upload_images/12637001-eaf08772ee35efba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/微服务/20180803-Dubbo+Zookeeper-使用-SpringBoot-(dubbo-spring-boot-starter)-快速搭建RPC分布式.md","raw":"### 一.安装并启动Zookeeper\n看看这篇博文吧，我就不赘述了 https://blog.csdn.net/lisongjia123/article/details/78639242\n\n### 二.创建公共接口\n1. 新建一个maven项目\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-cf697b2473f0b77b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2. 创建接口：\n\n```java\npackage com.zc.dubbo.service;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n\n```\n3. 把项目打包成jar包\n![打包](https://upload-images.jianshu.io/upload_images/12637001-e38c5f50cafa5ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![jar包](https://upload-images.jianshu.io/upload_images/12637001-0af0fa356e257b47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 三.创建服务提供者\n1. 先创建一个空的springboot项目,加入`dubbo-spring-boot-starter`依赖\n```xml\n      <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>RELEASE</version>\n        </dependency>\n```\n2. 导入之前生成的公共接口jar包（不会导入自行百度）\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-09287d9d3319f8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.实现公共接口，并添加dubbo的@service**（注意不是spring的service注解，看导包）**\n实现类：\n```java\npackage com.zc.dubboprovider.service.impl;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.zc.dubbo.service.DemoService;\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n            return \"Hello, \" + name + \" (from Spring Boot)\";\n    }\n}\n\n\n```\n4. 配置文件\n先把properties文件修改为yml文件（习惯使用yml文件，也可不改）\n```yml\n#dubbo协议\ndubbo:\n  protocol:\n    id: dubbo\n    name: dubbo\n    port: 12345\n    status: server\n#注册中心地址\n  registry:\n    address: zookeeper://localhost:2181\n#dubbo应用名\n  application:\n    name: dubbo-provider-demo\n```\n5. 在启动类上开启dubbo服务并扫描服务类\n```java\npackage com.zc.dubboprovider;\n\nimport com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@EnableDubbo(scanBasePackages = \"com.zc.dubboprovider.service.impl\")\npublic class DubboProviderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DubboProviderApplication.class, args);\n    }\n}\n```\n6. 启动生产者\n\n### 四.创建服务消费者\n1. 同样新建springboot项目，加入`dubbo-spring-boot-starter`依赖，消费者要测试访问所以加入web依赖：\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba.boot</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>RELEASE</version>\n        </dependency>\n```\n2. 导入公共接口的依赖\n\n3. 配置文件\n```yml\nserver:\n  port: 8080\n\ndubbo:\n  protocol:\n    id: dubbo\n    name: dubbo\n\n  registry:\n    address: zookeeper://localhost:2181\n\n  application:\n    name: dubbo-consumer-demo\n```\n\n4. 编写controller类，**并使用dubbo的 @Reference 注入公共接口，dubbo会自动去注册中心找相应服务的生产者，并通过dubbo协议调用相应方法**\n```java\npackage com.zc.dubboconsumer.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.zc.dubbo.service.DemoService;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@RestController\npublic class DemoController {\n    @Reference\n    private DemoService demoService;\n\n    @RequestMapping(\"/sayHello\")\n    public String sayHello(@RequestParam String name) {\n        return demoService.sayHello(name);\n    }\n}\n\n```\n5.在启动类上开启dubbo并扫描controller类（不加也可以，因为加了@RestController Spring会自动扫描相应的类,但有时不会加载 @Reference，最好写上）\n\n```java\npackage com.zc.dubboconsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@EnableDubbo(scanBasePackages = \"com.zc.dubboconsumer.controller\")\npublic class DubboConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DubboConsumerApplication.class, args);\n    }\n}\n```\n6. 启动消费者，并访问 http://localhost:8080/sayHello?name=dubbo\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-f00c6289ceab1d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**成功调用到生产者的服务**\n\n### 五. 使用dubbo-admin监控服务\n请查看这篇博文，就是个管理界面，搭起来然后把服务注册中心地址换成自己的就行了https://www.jianshu.com/p/3d619740883c\n\n这是最终效果，生产者和消费者都能看到了\n![dubbo-admin.png](https://upload-images.jianshu.io/upload_images/12637001-eaf08772ee35efba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"微服务/20180803-Dubbo+Zookeeper-使用-SpringBoot-(dubbo-spring-boot-starter)-快速搭建RPC分布式","published":1,"date":"2018-08-02T16:00:00.000Z","updated":"2021-05-04T11:43:38.463Z","title":"Dubbo+Zookeeper-使用-SpringBoot-(dubbo-spring-boot-starter)-快速搭建RPC分布式","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0m0009nnvbgz3z5xyd","content":"<h3 id=\"一-安装并启动Zookeeper\"><a href=\"#一-安装并启动Zookeeper\" class=\"headerlink\" title=\"一.安装并启动Zookeeper\"></a>一.安装并启动Zookeeper</h3><p>看看这篇博文吧，我就不赘述了 <a href=\"https://blog.csdn.net/lisongjia123/article/details/78639242\">https://blog.csdn.net/lisongjia123/article/details/78639242</a></p>\n<h3 id=\"二-创建公共接口\"><a href=\"#二-创建公共接口\" class=\"headerlink\" title=\"二.创建公共接口\"></a>二.创建公共接口</h3><ol>\n<li><p>新建一个maven项目<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-cf697b2473f0b77b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p>创建接口：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubbo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把项目打包成jar包<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e38c5f50cafa5ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打包\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-0af0fa356e257b47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"jar包\"></li>\n</ol>\n<h3 id=\"三-创建服务提供者\"><a href=\"#三-创建服务提供者\" class=\"headerlink\" title=\"三.创建服务提供者\"></a>三.创建服务提供者</h3><ol>\n<li>先创建一个空的springboot项目,加入<code>dubbo-spring-boot-starter</code>依赖<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>导入之前生成的公共接口jar包（不会导入自行百度）<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-09287d9d3319f8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ol>\n<p>3.实现公共接口，并添加dubbo的@service<strong>（注意不是spring的service注解，看导包）</strong><br>实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboprovider.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zc.dubbo.service.DemoService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot; (from Spring Boot)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>配置文件<br>先把properties文件修改为yml文件（习惯使用yml文件，也可不改）<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dubbo协议</span></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">12345</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"comment\">#注册中心地址</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br><span class=\"line\"><span class=\"comment\">#dubbo应用名</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo-provider-demo</span></span><br></pre></td></tr></table></figure></li>\n<li>在启动类上开启dubbo服务并扫描服务类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboprovider;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo(scanBasePackages = &quot;com.zc.dubboprovider.service.impl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboProviderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DubboProviderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>启动生产者</li>\n</ol>\n<h3 id=\"四-创建服务消费者\"><a href=\"#四-创建服务消费者\" class=\"headerlink\" title=\"四.创建服务消费者\"></a>四.创建服务消费者</h3><ol>\n<li><p>同样新建springboot项目，加入<code>dubbo-spring-boot-starter</code>依赖，消费者要测试访问所以加入web依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>导入公共接口的依赖</p>\n</li>\n<li><p>配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo-consumer-demo</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编写controller类，<strong>并使用dubbo的 @Reference 注入公共接口，dubbo会自动去注册中心找相应服务的生产者，并通过dubbo协议调用相应方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboconsumer.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zc.dubbo.service.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sayHello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>在启动类上开启dubbo并扫描controller类（不加也可以，因为加了@RestController Spring会自动扫描相应的类,但有时不会加载 @Reference，最好写上）</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboconsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo(scanBasePackages = &quot;com.zc.dubboconsumer.controller&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DubboConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>启动消费者，并访问 <a href=\"http://localhost:8080/sayHello?name=dubbo\">http://localhost:8080/sayHello?name=dubbo</a><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-f00c6289ceab1d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ol>\n<p><strong>成功调用到生产者的服务</strong></p>\n<h3 id=\"五-使用dubbo-admin监控服务\"><a href=\"#五-使用dubbo-admin监控服务\" class=\"headerlink\" title=\"五. 使用dubbo-admin监控服务\"></a>五. 使用dubbo-admin监控服务</h3><p>请查看这篇博文，就是个管理界面，搭起来然后把服务注册中心地址换成自己的就行了<a href=\"https://www.jianshu.com/p/3d619740883c\">https://www.jianshu.com/p/3d619740883c</a></p>\n<p>这是最终效果，生产者和消费者都能看到了<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-eaf08772ee35efba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"dubbo-admin.png\"></p>\n","site":{"data":{}},"abbrlink":"3SFB1K1","excerpt":"一.安装并启动Zookeeper\n看看这篇博文吧，我就不赘述了 https://blog.csdn.net/lisongjia123/article/details/78639242\n\n二.创建公共接口\n 1. 新建一个maven项目\n    \n    \n    \n 2. 创建接口：\n    \n    \n\n1\n2\n3\n4\n5\n6\n\n\npackage com.zc.dubbo.service;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n\n\n\n 3. 把项目打包成jar包\n    \n    \n\n三.创建服","more":"<h3 id=\"一-安装并启动Zookeeper\"><a href=\"#一-安装并启动Zookeeper\" class=\"headerlink\" title=\"一.安装并启动Zookeeper\"></a>一.安装并启动Zookeeper</h3><p>看看这篇博文吧，我就不赘述了 <a href=\"https://blog.csdn.net/lisongjia123/article/details/78639242\">https://blog.csdn.net/lisongjia123/article/details/78639242</a></p>\n<h3 id=\"二-创建公共接口\"><a href=\"#二-创建公共接口\" class=\"headerlink\" title=\"二.创建公共接口\"></a>二.创建公共接口</h3><ol>\n<li><p>新建一个maven项目<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-cf697b2473f0b77b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p>创建接口：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubbo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把项目打包成jar包<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e38c5f50cafa5ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"打包\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-0af0fa356e257b47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"jar包\"></li>\n</ol>\n<h3 id=\"三-创建服务提供者\"><a href=\"#三-创建服务提供者\" class=\"headerlink\" title=\"三.创建服务提供者\"></a>三.创建服务提供者</h3><ol>\n<li>先创建一个空的springboot项目,加入<code>dubbo-spring-boot-starter</code>依赖<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>导入之前生成的公共接口jar包（不会导入自行百度）<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-09287d9d3319f8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ol>\n<p>3.实现公共接口，并添加dubbo的@service<strong>（注意不是spring的service注解，看导包）</strong><br>实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboprovider.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zc.dubbo.service.DemoService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot; (from Spring Boot)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>配置文件<br>先把properties文件修改为yml文件（习惯使用yml文件，也可不改）<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#dubbo协议</span></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">12345</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">server</span></span><br><span class=\"line\"><span class=\"comment\">#注册中心地址</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br><span class=\"line\"><span class=\"comment\">#dubbo应用名</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo-provider-demo</span></span><br></pre></td></tr></table></figure></li>\n<li>在启动类上开启dubbo服务并扫描服务类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboprovider;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo(scanBasePackages = &quot;com.zc.dubboprovider.service.impl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboProviderApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DubboProviderApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>启动生产者</li>\n</ol>\n<h3 id=\"四-创建服务消费者\"><a href=\"#四-创建服务消费者\" class=\"headerlink\" title=\"四.创建服务消费者\"></a>四.创建服务消费者</h3><ol>\n<li><p>同样新建springboot项目，加入<code>dubbo-spring-boot-starter</code>依赖，消费者要测试访问所以加入web依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>导入公共接口的依赖</p>\n</li>\n<li><p>配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo-consumer-demo</span></span><br></pre></td></tr></table></figure></li>\n<li><p>编写controller类，<strong>并使用dubbo的 @Reference 注入公共接口，dubbo会自动去注册中心找相应服务的生产者，并通过dubbo协议调用相应方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboconsumer.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zc.dubbo.service.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sayHello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.sayHello(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>在启动类上开启dubbo并扫描controller类（不加也可以，因为加了@RestController Spring会自动扫描相应的类,但有时不会加载 @Reference，最好写上）</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zc.dubboconsumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo(scanBasePackages = &quot;com.zc.dubboconsumer.controller&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboConsumerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DubboConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>启动消费者，并访问 <a href=\"http://localhost:8080/sayHello?name=dubbo\">http://localhost:8080/sayHello?name=dubbo</a><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-f00c6289ceab1d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n</ol>\n<p><strong>成功调用到生产者的服务</strong></p>\n<h3 id=\"五-使用dubbo-admin监控服务\"><a href=\"#五-使用dubbo-admin监控服务\" class=\"headerlink\" title=\"五. 使用dubbo-admin监控服务\"></a>五. 使用dubbo-admin监控服务</h3><p>请查看这篇博文，就是个管理界面，搭起来然后把服务注册中心地址换成自己的就行了<a href=\"https://www.jianshu.com/p/3d619740883c\">https://www.jianshu.com/p/3d619740883c</a></p>\n<p>这是最终效果，生产者和消费者都能看到了<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-eaf08772ee35efba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"dubbo-admin.png\"></p>\n"},{"_content":"在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。\n### 一、ribbon简介\n>Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.\n—–摘自官网\n\neureka是一个客户端发现的注册中心，所以需要客户端具备负载均衡的能力，而ribbon就是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。\n\nribbon 已经默认实现了这些配置bean：\n* IClientConfig ribbonClientConfig: DefaultClientConfigImpl\n* IRule ribbonRule: ZoneAvoidanceRule\n* IPing ribbonPing: NoOpPing\n* ServerList ribbonServerList: ConfigurationBasedServerList\n* ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter\n* ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer\n\n### 二、建一个服务消费者端\n**2.1** 这一篇文章基于上一篇文章的工程，启动eureka-server 工程；启动service-hi工程，它的端口为8081；将service-hi的配置文件的端口改为8082,并启动，这时你会发现：service-hi在eureka-server注册了2个实例，这就相当于一个小的集群。\n\n![idea多实例.png](https://upload-images.jianshu.io/upload_images/12637001-a7a59e025b490e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![服务注册多实例.png](https://upload-images.jianshu.io/upload_images/12637001-de903327ce913c4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**2.2** 重新新建一个spring-boot工程，取名为：eureka-consumer;\n在它的pom.xml和上一个差不多，多引一个`spring-cloud-starter-netflix-ribbon`库即可\n\n**2.3**同样的在启动类添加@EnableDiscoveryClient注解表明自己是个eureka客户端。  并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。\n```\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class ServiceConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceConsumerApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n}\n```\n配置文件如下：\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/\nserver:\n  port: 8083\nspring:\n  application:\n    name: service-ribbon\n```\n**2.4** 写一个服务类HelloService，通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名，代码如下：\n```\n@Service\npublic class HelloService {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public String hiService(String name){\n        return restTemplate.getForObject(\"http://service-hi/hi?name=\"+name,String.class);\n    }\n\n}\n```\n**2.5** 最后写一个controller测试，在controller中用调用HelloService 的方法，代码如下：\n```\n@RestController\npublic class HelloController {\n\n    @Autowired\n    private HelloService helloService;\n\n    @GetMapping(\"/hi_ribbon\")\n    public String hi_ribbon(String name){\n        return helloService.hiService(name);\n    }\n}\n```\n在浏览器上多次访问[http://localhost: 8083/hi_ribbon?name= springcloud](http://localhost:8083/hi_ribbon?name=springcloud)，浏览器交替显示：\n>hi springcloud,i am from port:8081\n  hi springcloud,i am from port:8082\n\n这说明当我们通过调用restTemplate.getForObject(“[http://SERVICE-HI/hi?name=](http://service-hi/hi?name=)“+name,String.class)方法时，已经做了负载均衡，访问了不同的端口的服务实例。\n\n### 三、此时架构\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-da915fb52c27dd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 四、Feign简介\nFeign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。\n\n简而言之：\n* Feign 采用的是基于接口的注解\n* Feign 整合了ribbon，具有负载均衡的能力\n* 整合了Hystrix，具有熔断的能力\n","source":"_posts/微服务/20180803-SpringCloud-服务消费者（rest+ribbon-Feign）.md","raw":"在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。\n### 一、ribbon简介\n>Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.\n—–摘自官网\n\neureka是一个客户端发现的注册中心，所以需要客户端具备负载均衡的能力，而ribbon就是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。\n\nribbon 已经默认实现了这些配置bean：\n* IClientConfig ribbonClientConfig: DefaultClientConfigImpl\n* IRule ribbonRule: ZoneAvoidanceRule\n* IPing ribbonPing: NoOpPing\n* ServerList ribbonServerList: ConfigurationBasedServerList\n* ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter\n* ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer\n\n### 二、建一个服务消费者端\n**2.1** 这一篇文章基于上一篇文章的工程，启动eureka-server 工程；启动service-hi工程，它的端口为8081；将service-hi的配置文件的端口改为8082,并启动，这时你会发现：service-hi在eureka-server注册了2个实例，这就相当于一个小的集群。\n\n![idea多实例.png](https://upload-images.jianshu.io/upload_images/12637001-a7a59e025b490e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![服务注册多实例.png](https://upload-images.jianshu.io/upload_images/12637001-de903327ce913c4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**2.2** 重新新建一个spring-boot工程，取名为：eureka-consumer;\n在它的pom.xml和上一个差不多，多引一个`spring-cloud-starter-netflix-ribbon`库即可\n\n**2.3**同样的在启动类添加@EnableDiscoveryClient注解表明自己是个eureka客户端。  并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。\n```\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class ServiceConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceConsumerApplication.class, args);\n    }\n\n    @Bean\n    @LoadBalanced\n    RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n}\n```\n配置文件如下：\n```\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/\nserver:\n  port: 8083\nspring:\n  application:\n    name: service-ribbon\n```\n**2.4** 写一个服务类HelloService，通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名，代码如下：\n```\n@Service\npublic class HelloService {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public String hiService(String name){\n        return restTemplate.getForObject(\"http://service-hi/hi?name=\"+name,String.class);\n    }\n\n}\n```\n**2.5** 最后写一个controller测试，在controller中用调用HelloService 的方法，代码如下：\n```\n@RestController\npublic class HelloController {\n\n    @Autowired\n    private HelloService helloService;\n\n    @GetMapping(\"/hi_ribbon\")\n    public String hi_ribbon(String name){\n        return helloService.hiService(name);\n    }\n}\n```\n在浏览器上多次访问[http://localhost: 8083/hi_ribbon?name= springcloud](http://localhost:8083/hi_ribbon?name=springcloud)，浏览器交替显示：\n>hi springcloud,i am from port:8081\n  hi springcloud,i am from port:8082\n\n这说明当我们通过调用restTemplate.getForObject(“[http://SERVICE-HI/hi?name=](http://service-hi/hi?name=)“+name,String.class)方法时，已经做了负载均衡，访问了不同的端口的服务实例。\n\n### 三、此时架构\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-da915fb52c27dd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 四、Feign简介\nFeign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。\n\n简而言之：\n* Feign 采用的是基于接口的注解\n* Feign 整合了ribbon，具有负载均衡的能力\n* 整合了Hystrix，具有熔断的能力\n","slug":"微服务/20180803-SpringCloud-服务消费者（rest+ribbon-Feign）","published":1,"date":"2018-08-02T16:00:00.000Z","updated":"2021-05-04T11:43:38.463Z","title":"SpringCloud-服务消费者（rest+ribbon-Feign）","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0n000annvb19k50bc1","content":"<p>在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。</p>\n<h3 id=\"一、ribbon简介\"><a href=\"#一、ribbon简介\" class=\"headerlink\" title=\"一、ribbon简介\"></a>一、ribbon简介</h3><blockquote>\n<p>Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.<br>—–摘自官网</p>\n</blockquote>\n<p>eureka是一个客户端发现的注册中心，所以需要客户端具备负载均衡的能力，而ribbon就是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。</p>\n<p>ribbon 已经默认实现了这些配置bean：</p>\n<ul>\n<li>IClientConfig ribbonClientConfig: DefaultClientConfigImpl</li>\n<li>IRule ribbonRule: ZoneAvoidanceRule</li>\n<li>IPing ribbonPing: NoOpPing</li>\n<li>ServerList ribbonServerList: ConfigurationBasedServerList</li>\n<li>ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter</li>\n<li>ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer</li>\n</ul>\n<h3 id=\"二、建一个服务消费者端\"><a href=\"#二、建一个服务消费者端\" class=\"headerlink\" title=\"二、建一个服务消费者端\"></a>二、建一个服务消费者端</h3><p><strong>2.1</strong> 这一篇文章基于上一篇文章的工程，启动eureka-server 工程；启动service-hi工程，它的端口为8081；将service-hi的配置文件的端口改为8082,并启动，这时你会发现：service-hi在eureka-server注册了2个实例，这就相当于一个小的集群。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-a7a59e025b490e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"idea多实例.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-de903327ce913c4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"服务注册多实例.png\"></p>\n<p><strong>2.2</strong> 重新新建一个spring-boot工程，取名为：eureka-consumer;<br>在它的pom.xml和上一个差不多，多引一个<code>spring-cloud-starter-netflix-ribbon</code>库即可</p>\n<p><strong>2.3</strong>同样的在启动类添加@EnableDiscoveryClient注解表明自己是个eureka客户端。  并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class ServiceConsumerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @LoadBalanced</span><br><span class=\"line\">    RestTemplate restTemplate() &#123;</span><br><span class=\"line\">        return new RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8083</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-ribbon</span><br></pre></td></tr></table></figure>\n<p><strong>2.4</strong> 写一个服务类HelloService，通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class HelloService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String hiService(String name)&#123;</span><br><span class=\"line\">        return restTemplate.getForObject(&quot;http://service-hi/hi?name=&quot;+name,String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.5</strong> 最后写一个controller测试，在controller中用调用HelloService 的方法，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hi_ribbon&quot;)</span><br><span class=\"line\">    public String hi_ribbon(String name)&#123;</span><br><span class=\"line\">        return helloService.hiService(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器上多次访问<a href=\"http://localhost:8083/hi_ribbon?name=springcloud\">http://localhost: 8083/hi_ribbon?name= springcloud</a>，浏览器交替显示：</p>\n<blockquote>\n<p>hi springcloud,i am from port:8081<br>  hi springcloud,i am from port:8082</p>\n</blockquote>\n<p>这说明当我们通过调用restTemplate.getForObject(“<a href=\"http://service-hi/hi?name=\">http://SERVICE-HI/hi?name=</a>“+name,String.class)方法时，已经做了负载均衡，访问了不同的端口的服务实例。</p>\n<h3 id=\"三、此时架构\"><a href=\"#三、此时架构\" class=\"headerlink\" title=\"三、此时架构\"></a>三、此时架构</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-da915fb52c27dd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"四、Feign简介\"><a href=\"#四、Feign简介\" class=\"headerlink\" title=\"四、Feign简介\"></a>四、Feign简介</h3><p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p>\n<p>简而言之：</p>\n<ul>\n<li>Feign 采用的是基于接口的注解</li>\n<li>Feign 整合了ribbon，具有负载均衡的能力</li>\n<li>整合了Hystrix，具有熔断的能力</li>\n</ul>\n","site":{"data":{}},"abbrlink":"WFZWKG","excerpt":"在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。\n\n一、ribbon简介\nRibbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @Fe","more":"<p>在上一篇文章，讲了服务的注册和发现。在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign。</p>\n<h3 id=\"一、ribbon简介\"><a href=\"#一、ribbon简介\" class=\"headerlink\" title=\"一、ribbon简介\"></a>一、ribbon简介</h3><blockquote>\n<p>Ribbon is a client side load balancer which gives you a lot of control over the behaviour of HTTP and TCP clients. Feign already uses Ribbon, so if you are using @FeignClient then this section also applies.<br>—–摘自官网</p>\n</blockquote>\n<p>eureka是一个客户端发现的注册中心，所以需要客户端具备负载均衡的能力，而ribbon就是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。</p>\n<p>ribbon 已经默认实现了这些配置bean：</p>\n<ul>\n<li>IClientConfig ribbonClientConfig: DefaultClientConfigImpl</li>\n<li>IRule ribbonRule: ZoneAvoidanceRule</li>\n<li>IPing ribbonPing: NoOpPing</li>\n<li>ServerList ribbonServerList: ConfigurationBasedServerList</li>\n<li>ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter</li>\n<li>ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer</li>\n</ul>\n<h3 id=\"二、建一个服务消费者端\"><a href=\"#二、建一个服务消费者端\" class=\"headerlink\" title=\"二、建一个服务消费者端\"></a>二、建一个服务消费者端</h3><p><strong>2.1</strong> 这一篇文章基于上一篇文章的工程，启动eureka-server 工程；启动service-hi工程，它的端口为8081；将service-hi的配置文件的端口改为8082,并启动，这时你会发现：service-hi在eureka-server注册了2个实例，这就相当于一个小的集群。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-a7a59e025b490e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"idea多实例.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-de903327ce913c4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"服务注册多实例.png\"></p>\n<p><strong>2.2</strong> 重新新建一个spring-boot工程，取名为：eureka-consumer;<br>在它的pom.xml和上一个差不多，多引一个<code>spring-cloud-starter-netflix-ribbon</code>库即可</p>\n<p><strong>2.3</strong>同样的在启动类添加@EnableDiscoveryClient注解表明自己是个eureka客户端。  并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class ServiceConsumerApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @LoadBalanced</span><br><span class=\"line\">    RestTemplate restTemplate() &#123;</span><br><span class=\"line\">        return new RestTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    serviceUrl:</span><br><span class=\"line\">      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/</span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8083</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-ribbon</span><br></pre></td></tr></table></figure>\n<p><strong>2.4</strong> 写一个服务类HelloService，通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用的程序名替代了具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class HelloService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String hiService(String name)&#123;</span><br><span class=\"line\">        return restTemplate.getForObject(&quot;http://service-hi/hi?name=&quot;+name,String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.5</strong> 最后写一个controller测试，在controller中用调用HelloService 的方法，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @GetMapping(&quot;/hi_ribbon&quot;)</span><br><span class=\"line\">    public String hi_ribbon(String name)&#123;</span><br><span class=\"line\">        return helloService.hiService(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器上多次访问<a href=\"http://localhost:8083/hi_ribbon?name=springcloud\">http://localhost: 8083/hi_ribbon?name= springcloud</a>，浏览器交替显示：</p>\n<blockquote>\n<p>hi springcloud,i am from port:8081<br>  hi springcloud,i am from port:8082</p>\n</blockquote>\n<p>这说明当我们通过调用restTemplate.getForObject(“<a href=\"http://service-hi/hi?name=\">http://SERVICE-HI/hi?name=</a>“+name,String.class)方法时，已经做了负载均衡，访问了不同的端口的服务实例。</p>\n<h3 id=\"三、此时架构\"><a href=\"#三、此时架构\" class=\"headerlink\" title=\"三、此时架构\"></a>三、此时架构</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-da915fb52c27dd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"四、Feign简介\"><a href=\"#四、Feign简介\" class=\"headerlink\" title=\"四、Feign简介\"></a>四、Feign简介</h3><p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p>\n<p>简而言之：</p>\n<ul>\n<li>Feign 采用的是基于接口的注解</li>\n<li>Feign 整合了ribbon，具有负载均衡的能力</li>\n<li>整合了Hystrix，具有熔断的能力</li>\n</ul>\n"},{"_content":"本SpringCloud系列文章参考《深入理解Spring Cloud与微服务构建》 这本书的作者的博客编写，感谢这位作者。      [方志朋的博客](https://blog.csdn.net/forezp)\n原文地址：https://blog.csdn.net/forezp/article/details/70148833/\n\n### 一、创建服务注册中心\n**1.1 首先创建一个maven主工程。**\n首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.4.RELEASE，Spring Cloud版本为Finchley.SR1。\n除了SpringBoot主要引入的maven库`spring-cloud-starter-netflix-eureka-server`，这是Eureka服务端。pom文件如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zc</groupId>\n    <artifactId>eurekaserver</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>eurekaserver</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Finchley.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n**1.2 启动这个服务注册中心，**只需在SpringBoot启动类添加@EnableEurekaServer注解。\n```java\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaServerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaserverApplication.class, args);\n    }\n}\n```\n**1.3 完成配置文件** eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yml：\n```yml\nserver:\n  port: 8761\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8762/eureka/,http://localhost:8763/eureka/\n    register-with-eureka: false\n    fetch-registry: false\n  server:\n    enable-self-preservation: false\nspring:\n  application:\n    name: eureka\n```\n*这里通过eureka.client. register-with-eureka：false和fetch-registry：false来表明自己是一个eureka server.   通过eureka.server .enable-self-preservation=false 关闭自我保护当服务长时间连接不到则将他从注册中心移除（生产环境不建议关闭）*\n\n**2.5 eureka server 监控界面**，启动工程,打开浏览器访问： \n[http://localhost:8761](http://localhost:8761/) ,界面如下：\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-4b7eb1baf1e235d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 二、创建服务提供者\n当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。\n创建过程同server类似,创建完pom.xml如下：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zc</groupId>\n    <artifactId>eurekaclient</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>eurekaclient</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Finchley.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n*客户端记得要添加`spring-boot-starter-web`这个库，否则跑不起来*\n\n然后也是通过`@EnableDiscoveryClient`注解表明自己是个eurekaclient\n```\n@SpringBootApplication\n@EnableDiscoveryClient\n@RestController\npublic class EurekaclientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaclientApplication.class, args);\n    }\n\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @RequestMapping(\"/hi\")\n    public String home(@RequestParam(value = \"name\", defaultValue = \"forezp\") String name) {\n        return \"hi \" + name + \" ,i am from port:\" + port;\n    }\n\n}\n\n```\n\n最后完成配置，将自己注册到eureka服务注册中心，application.yml配置文件如下：\n```yml\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/\nspring:\n  application:\n    name: service-hi\nserver:\n  port: 8081\n```\n\n**需要指明spring.application.name,这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name ,然后你能看到注册中心我写了三个这是因为，我开了三个eurekaserver它们之间还要相互注册**\n启动工程，打开[http://localhost:8761](http://localhost:8761/) ，即eureka server 的网址：\n![](https://upload-images.jianshu.io/upload_images/12637001-d5a12c70726ce86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n你会发现一个服务已经注册在服务中了，服务名为SERVICE-HI ,端口为8081\n\n这时打开 http://localhost:8081/hi?name=springcloud ，你会在浏览器上看到 :\n>hi springcloud ,i am from port:8081\n\n### 三、服务发现\n这还没很好理解，暂时引用大佬的博文\nhttps://blog.csdn.net/mr_seaturtle_/article/details/77618403","source":"_posts/微服务/20180803-SpringCloud-服务的注册与发现Eureka.md","raw":"本SpringCloud系列文章参考《深入理解Spring Cloud与微服务构建》 这本书的作者的博客编写，感谢这位作者。      [方志朋的博客](https://blog.csdn.net/forezp)\n原文地址：https://blog.csdn.net/forezp/article/details/70148833/\n\n### 一、创建服务注册中心\n**1.1 首先创建一个maven主工程。**\n首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.4.RELEASE，Spring Cloud版本为Finchley.SR1。\n除了SpringBoot主要引入的maven库`spring-cloud-starter-netflix-eureka-server`，这是Eureka服务端。pom文件如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zc</groupId>\n    <artifactId>eurekaserver</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>eurekaserver</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Finchley.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n**1.2 启动这个服务注册中心，**只需在SpringBoot启动类添加@EnableEurekaServer注解。\n```java\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaServerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaserverApplication.class, args);\n    }\n}\n```\n**1.3 完成配置文件** eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yml：\n```yml\nserver:\n  port: 8761\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8762/eureka/,http://localhost:8763/eureka/\n    register-with-eureka: false\n    fetch-registry: false\n  server:\n    enable-self-preservation: false\nspring:\n  application:\n    name: eureka\n```\n*这里通过eureka.client. register-with-eureka：false和fetch-registry：false来表明自己是一个eureka server.   通过eureka.server .enable-self-preservation=false 关闭自我保护当服务长时间连接不到则将他从注册中心移除（生产环境不建议关闭）*\n\n**2.5 eureka server 监控界面**，启动工程,打开浏览器访问： \n[http://localhost:8761](http://localhost:8761/) ,界面如下：\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-4b7eb1baf1e235d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 二、创建服务提供者\n当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。\n创建过程同server类似,创建完pom.xml如下：\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zc</groupId>\n    <artifactId>eurekaclient</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>eurekaclient</name>\n    <description>Demo project for Spring Boot</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.4.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Finchley.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n```\n*客户端记得要添加`spring-boot-starter-web`这个库，否则跑不起来*\n\n然后也是通过`@EnableDiscoveryClient`注解表明自己是个eurekaclient\n```\n@SpringBootApplication\n@EnableDiscoveryClient\n@RestController\npublic class EurekaclientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaclientApplication.class, args);\n    }\n\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @RequestMapping(\"/hi\")\n    public String home(@RequestParam(value = \"name\", defaultValue = \"forezp\") String name) {\n        return \"hi \" + name + \" ,i am from port:\" + port;\n    }\n\n}\n\n```\n\n最后完成配置，将自己注册到eureka服务注册中心，application.yml配置文件如下：\n```yml\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/\nspring:\n  application:\n    name: service-hi\nserver:\n  port: 8081\n```\n\n**需要指明spring.application.name,这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name ,然后你能看到注册中心我写了三个这是因为，我开了三个eurekaserver它们之间还要相互注册**\n启动工程，打开[http://localhost:8761](http://localhost:8761/) ，即eureka server 的网址：\n![](https://upload-images.jianshu.io/upload_images/12637001-d5a12c70726ce86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n你会发现一个服务已经注册在服务中了，服务名为SERVICE-HI ,端口为8081\n\n这时打开 http://localhost:8081/hi?name=springcloud ，你会在浏览器上看到 :\n>hi springcloud ,i am from port:8081\n\n### 三、服务发现\n这还没很好理解，暂时引用大佬的博文\nhttps://blog.csdn.net/mr_seaturtle_/article/details/77618403","slug":"微服务/20180803-SpringCloud-服务的注册与发现Eureka","published":1,"date":"2018-08-02T16:00:00.000Z","updated":"2021-08-17T16:21:48.472Z","title":"SpringCloud-服务的注册与发现Eureka","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0o000bnnvbfj4u9wwo","content":"<p>本SpringCloud系列文章参考《深入理解Spring Cloud与微服务构建》 这本书的作者的博客编写，感谢这位作者。      <a href=\"https://blog.csdn.net/forezp\">方志朋的博客</a><br>原文地址：<a href=\"https://blog.csdn.net/forezp/article/details/70148833/\">https://blog.csdn.net/forezp/article/details/70148833/</a></p>\n<h3 id=\"一、创建服务注册中心\"><a href=\"#一、创建服务注册中心\" class=\"headerlink\" title=\"一、创建服务注册中心\"></a>一、创建服务注册中心</h3><p><strong>1.1 首先创建一个maven主工程。</strong><br>首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.4.RELEASE，Spring Cloud版本为Finchley.SR1。<br>除了SpringBoot主要引入的maven库<code>spring-cloud-starter-netflix-eureka-server</code>，这是Eureka服务端。pom文件如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eurekaserver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eurekaserver<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>1.2 启动这个服务注册中心，</strong>只需在SpringBoot启动类添加@EnableEurekaServer注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaServerApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaserverApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.3 完成配置文件</strong> eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yml：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8762/eureka/,http://localhost:8763/eureka/</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">enable-self-preservation:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka</span></span><br></pre></td></tr></table></figure>\n<p><em>这里通过eureka.client. register-with-eureka：false和fetch-registry：false来表明自己是一个eureka server.   通过eureka.server .enable-self-preservation=false 关闭自我保护当服务长时间连接不到则将他从注册中心移除（生产环境不建议关闭）</em></p>\n<p><strong>2.5 eureka server 监控界面</strong>，启动工程,打开浏览器访问： <br><a href=\"http://localhost:8761/\">http://localhost:8761</a> ,界面如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-4b7eb1baf1e235d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"二、创建服务提供者\"><a href=\"#二、创建服务提供者\" class=\"headerlink\" title=\"二、创建服务提供者\"></a>二、创建服务提供者</h3><p>当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。<br>创建过程同server类似,创建完pom.xml如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eurekaclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eurekaclient<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>客户端记得要添加<code>spring-boot-starter-web</code>这个库，否则跑不起来</em></p>\n<p>然后也是通过<code>@EnableDiscoveryClient</code>注解表明自己是个eurekaclient</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class EurekaclientApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaclientApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/hi&quot;)</span><br><span class=\"line\">    public String home(@RequestParam(value = &quot;name&quot;, defaultValue = &quot;forezp&quot;) String name) &#123;</span><br><span class=\"line\">        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后完成配置，将自己注册到eureka服务注册中心，application.yml配置文件如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">service-hi</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要指明spring.application.name,这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name ,然后你能看到注册中心我写了三个这是因为，我开了三个eurekaserver它们之间还要相互注册</strong><br>启动工程，打开<a href=\"http://localhost:8761/\">http://localhost:8761</a> ，即eureka server 的网址：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d5a12c70726ce86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>你会发现一个服务已经注册在服务中了，服务名为SERVICE-HI ,端口为8081</p>\n<p>这时打开 <a href=\"http://localhost:8081/hi?name=springcloud\">http://localhost:8081/hi?name=springcloud</a> ，你会在浏览器上看到 :</p>\n<blockquote>\n<p>hi springcloud ,i am from port:8081</p>\n</blockquote>\n<h3 id=\"三、服务发现\"><a href=\"#三、服务发现\" class=\"headerlink\" title=\"三、服务发现\"></a>三、服务发现</h3><p>这还没很好理解，暂时引用大佬的博文<br><a href=\"https://blog.csdn.net/mr_seaturtle_/article/details/77618403\">https://blog.csdn.net/mr_seaturtle_/article/details/77618403</a></p>\n","site":{"data":{}},"abbrlink":"1P6JEC4","excerpt":"本SpringCloud系列文章参考《深入理解Spring Cloud与微服务构建》 这本书的作者的博客编写，感谢这位作者。 方志朋的博客\n原文地址：https://blog.csdn.net/forezp/article/details/70148833/\n\n一、创建服务注册中心\n1.1 首先创建一个maven主工程。\n首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.4.RELEASE，Spring Cloud版本为Finchley.SR1。\n除了SpringBoot主要引入的maven库spring-cloud-starter-netflix-eu","more":"<p>本SpringCloud系列文章参考《深入理解Spring Cloud与微服务构建》 这本书的作者的博客编写，感谢这位作者。      <a href=\"https://blog.csdn.net/forezp\">方志朋的博客</a><br>原文地址：<a href=\"https://blog.csdn.net/forezp/article/details/70148833/\">https://blog.csdn.net/forezp/article/details/70148833/</a></p>\n<h3 id=\"一、创建服务注册中心\"><a href=\"#一、创建服务注册中心\" class=\"headerlink\" title=\"一、创建服务注册中心\"></a>一、创建服务注册中心</h3><p><strong>1.1 首先创建一个maven主工程。</strong><br>首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.4.RELEASE，Spring Cloud版本为Finchley.SR1。<br>除了SpringBoot主要引入的maven库<code>spring-cloud-starter-netflix-eureka-server</code>，这是Eureka服务端。pom文件如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eurekaserver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eurekaserver<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>1.2 启动这个服务注册中心，</strong>只需在SpringBoot启动类添加@EnableEurekaServer注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaServerApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaserverApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1.3 完成配置文件</strong> eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yml：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8762/eureka/,http://localhost:8763/eureka/</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">enable-self-preservation:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka</span></span><br></pre></td></tr></table></figure>\n<p><em>这里通过eureka.client. register-with-eureka：false和fetch-registry：false来表明自己是一个eureka server.   通过eureka.server .enable-self-preservation=false 关闭自我保护当服务长时间连接不到则将他从注册中心移除（生产环境不建议关闭）</em></p>\n<p><strong>2.5 eureka server 监控界面</strong>，启动工程,打开浏览器访问： <br><a href=\"http://localhost:8761/\">http://localhost:8761</a> ,界面如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-4b7eb1baf1e235d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"二、创建服务提供者\"><a href=\"#二、创建服务提供者\" class=\"headerlink\" title=\"二、创建服务提供者\"></a>二、创建服务提供者</h3><p>当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。<br>创建过程同server类似,创建完pom.xml如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.zc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eurekaclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eurekaclient<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>客户端记得要添加<code>spring-boot-starter-web</code>这个库，否则跑不起来</em></p>\n<p>然后也是通过<code>@EnableDiscoveryClient</code>注解表明自己是个eurekaclient</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class EurekaclientApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaclientApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">    String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/hi&quot;)</span><br><span class=\"line\">    public String home(@RequestParam(value = &quot;name&quot;, defaultValue = &quot;forezp&quot;) String name) &#123;</span><br><span class=\"line\">        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后完成配置，将自己注册到eureka服务注册中心，application.yml配置文件如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">service-hi</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要指明spring.application.name,这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name ,然后你能看到注册中心我写了三个这是因为，我开了三个eurekaserver它们之间还要相互注册</strong><br>启动工程，打开<a href=\"http://localhost:8761/\">http://localhost:8761</a> ，即eureka server 的网址：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d5a12c70726ce86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>你会发现一个服务已经注册在服务中了，服务名为SERVICE-HI ,端口为8081</p>\n<p>这时打开 <a href=\"http://localhost:8081/hi?name=springcloud\">http://localhost:8081/hi?name=springcloud</a> ，你会在浏览器上看到 :</p>\n<blockquote>\n<p>hi springcloud ,i am from port:8081</p>\n</blockquote>\n<h3 id=\"三、服务发现\"><a href=\"#三、服务发现\" class=\"headerlink\" title=\"三、服务发现\"></a>三、服务发现</h3><p>这还没很好理解，暂时引用大佬的博文<br><a href=\"https://blog.csdn.net/mr_seaturtle_/article/details/77618403\">https://blog.csdn.net/mr_seaturtle_/article/details/77618403</a></p>\n"},{"_content":"微服务一名出自 James Lewis & Martin Fowler 2014年3月25日写《Microservices》\n\n原文地址：https://martinfowler.com/articles/microservices.html\n\n####微服务几个特点\n* 一系列微小的服务共同组成\n* 跑在自己的进程里\n* 每个服务为独立的业务开发\n* 独立部署\n* 分布式管理\n\n**微服务是一种架构风格，没有强制性和绝度标准答案**\n***\n架构演进历史：![架构演进.png](https://upload-images.jianshu.io/upload_images/12637001-453cfe248e781cf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![单体架构.png](https://upload-images.jianshu.io/upload_images/12637001-3f9b001dc2356278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####单体架构缺点：\n* 开发效率低 \n* 代码维护难\n* 部署不灵活\n* 稳定性不高\n* 扩展性不够\n***\n\n![前后端分离.png](https://upload-images.jianshu.io/upload_images/12637001-1d6b683e17f81650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![分布式.png](https://upload-images.jianshu.io/upload_images/12637001-6c1d50dce86202a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*微服务必定是分布式的，而分布式系统不一定是微服务*\n***\n![简单微服务架构.png](https://upload-images.jianshu.io/upload_images/12637001-ae3fa8cac9deab50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####微服务架构的基础框架/组件\n* 服务注册发现中心\n* 服务网关（Service Gateway）\n* 后端通用服务（也称中间层服务Middle Tier Service）\n* 前端服务（也称边缘服务Edge Service）**负责服务的聚合与裁剪**\n\n####微服务两大实现手段\n\n|              | Dubbo     | Spring Cloud                 |\n| ------------ | --------- | ---------------------------- |\n| 服务注册中心 | Zookeeper | Spring Cloud Netflix Eureka  |\n| 服务调用方式 | RPC       | REST API                     |\n| 服务网关     | 无        | Spring Cloud Netflix Zuul    |\n| 服务跟踪     | 无        | Spring Cloud Sleuth          |\n| 断路器       | 不完善    | Spring Cloud Netflix Hystrix |\n| 分布式配置   | 无        | Spring Cloud Config          |\n| 消息总线     | 无        | Spring Cloud Bus             |\n| 数据流       | 无        | Spring Cloud Stream          |\n| 批量任务     | 无        | Spring Cloud Task            |\n\n**最后上一张Spring Cloud 微服务架构图：**\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-9bd71afd111ecfea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n","source":"_posts/微服务/20180803-什么是微服务.md","raw":"微服务一名出自 James Lewis & Martin Fowler 2014年3月25日写《Microservices》\n\n原文地址：https://martinfowler.com/articles/microservices.html\n\n####微服务几个特点\n* 一系列微小的服务共同组成\n* 跑在自己的进程里\n* 每个服务为独立的业务开发\n* 独立部署\n* 分布式管理\n\n**微服务是一种架构风格，没有强制性和绝度标准答案**\n***\n架构演进历史：![架构演进.png](https://upload-images.jianshu.io/upload_images/12637001-453cfe248e781cf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![单体架构.png](https://upload-images.jianshu.io/upload_images/12637001-3f9b001dc2356278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####单体架构缺点：\n* 开发效率低 \n* 代码维护难\n* 部署不灵活\n* 稳定性不高\n* 扩展性不够\n***\n\n![前后端分离.png](https://upload-images.jianshu.io/upload_images/12637001-1d6b683e17f81650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![分布式.png](https://upload-images.jianshu.io/upload_images/12637001-6c1d50dce86202a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*微服务必定是分布式的，而分布式系统不一定是微服务*\n***\n![简单微服务架构.png](https://upload-images.jianshu.io/upload_images/12637001-ae3fa8cac9deab50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####微服务架构的基础框架/组件\n* 服务注册发现中心\n* 服务网关（Service Gateway）\n* 后端通用服务（也称中间层服务Middle Tier Service）\n* 前端服务（也称边缘服务Edge Service）**负责服务的聚合与裁剪**\n\n####微服务两大实现手段\n\n|              | Dubbo     | Spring Cloud                 |\n| ------------ | --------- | ---------------------------- |\n| 服务注册中心 | Zookeeper | Spring Cloud Netflix Eureka  |\n| 服务调用方式 | RPC       | REST API                     |\n| 服务网关     | 无        | Spring Cloud Netflix Zuul    |\n| 服务跟踪     | 无        | Spring Cloud Sleuth          |\n| 断路器       | 不完善    | Spring Cloud Netflix Hystrix |\n| 分布式配置   | 无        | Spring Cloud Config          |\n| 消息总线     | 无        | Spring Cloud Bus             |\n| 数据流       | 无        | Spring Cloud Stream          |\n| 批量任务     | 无        | Spring Cloud Task            |\n\n**最后上一张Spring Cloud 微服务架构图：**\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-9bd71afd111ecfea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n","slug":"微服务/20180803-什么是微服务","published":1,"date":"2018-08-02T16:00:00.000Z","updated":"2021-05-04T11:43:38.463Z","title":"什么是微服务","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0o000cnnvb5r31567p","content":"<p>微服务一名出自 James Lewis &amp; Martin Fowler 2014年3月25日写《Microservices》</p>\n<p>原文地址：<a href=\"https://martinfowler.com/articles/microservices.html\">https://martinfowler.com/articles/microservices.html</a></p>\n<p>####微服务几个特点</p>\n<ul>\n<li>一系列微小的服务共同组成</li>\n<li>跑在自己的进程里</li>\n<li>每个服务为独立的业务开发</li>\n<li>独立部署</li>\n<li>分布式管理</li>\n</ul>\n<p><strong>微服务是一种架构风格，没有强制性和绝度标准答案</strong></p>\n<hr>\n<p>架构演进历史：<img src=\"https://upload-images.jianshu.io/upload_images/12637001-453cfe248e781cf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"架构演进.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3f9b001dc2356278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"单体架构.png\"><br>#####单体架构缺点：</p>\n<ul>\n<li>开发效率低 </li>\n<li>代码维护难</li>\n<li>部署不灵活</li>\n<li>稳定性不高</li>\n<li>扩展性不够</li>\n</ul>\n<hr>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1d6b683e17f81650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"前后端分离.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-6c1d50dce86202a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"分布式.png\"></p>\n<p><em>微服务必定是分布式的，而分布式系统不一定是微服务</em></p>\n<hr>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ae3fa8cac9deab50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"简单微服务架构.png\"></p>\n<p>####微服务架构的基础框架/组件</p>\n<ul>\n<li>服务注册发现中心</li>\n<li>服务网关（Service Gateway）</li>\n<li>后端通用服务（也称中间层服务Middle Tier Service）</li>\n<li>前端服务（也称边缘服务Edge Service）<strong>负责服务的聚合与裁剪</strong></li>\n</ul>\n<p>####微服务两大实现手段</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Dubbo</th>\n<th>Spring Cloud</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务注册中心</td>\n<td>Zookeeper</td>\n<td>Spring Cloud Netflix Eureka</td>\n</tr>\n<tr>\n<td>服务调用方式</td>\n<td>RPC</td>\n<td>REST API</td>\n</tr>\n<tr>\n<td>服务网关</td>\n<td>无</td>\n<td>Spring Cloud Netflix Zuul</td>\n</tr>\n<tr>\n<td>服务跟踪</td>\n<td>无</td>\n<td>Spring Cloud Sleuth</td>\n</tr>\n<tr>\n<td>断路器</td>\n<td>不完善</td>\n<td>Spring Cloud Netflix Hystrix</td>\n</tr>\n<tr>\n<td>分布式配置</td>\n<td>无</td>\n<td>Spring Cloud Config</td>\n</tr>\n<tr>\n<td>消息总线</td>\n<td>无</td>\n<td>Spring Cloud Bus</td>\n</tr>\n<tr>\n<td>数据流</td>\n<td>无</td>\n<td>Spring Cloud Stream</td>\n</tr>\n<tr>\n<td>批量任务</td>\n<td>无</td>\n<td>Spring Cloud Task</td>\n</tr>\n</tbody></table>\n<p><strong>最后上一张Spring Cloud 微服务架构图：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-9bd71afd111ecfea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"abbrlink":"24PYFWQ","excerpt":"微服务一名出自 James Lewis & Martin Fowler 2014年3月25日写《Microservices》\n\n原文地址：https://martinfowler.com/articles/microservices.html\n\n####微服务几个特点\n\n * 一系列微小的服务共同组成\n * 跑在自己的进程里\n * 每个服务为独立的业务开发\n * 独立部署\n * 分布式管理\n\n微服务是一种架构风格，没有强制性和绝度标准答案\n\n\n\n\n架构演进历史：\n\n\n#####单体架构缺点：\n\n * 开发效率低 \n * 代码维护难\n * 部署不灵活\n * 稳定性不高\n * 扩展性不够\n\n\n\n\n","more":"<p>微服务一名出自 James Lewis &amp; Martin Fowler 2014年3月25日写《Microservices》</p>\n<p>原文地址：<a href=\"https://martinfowler.com/articles/microservices.html\">https://martinfowler.com/articles/microservices.html</a></p>\n<p>####微服务几个特点</p>\n<ul>\n<li>一系列微小的服务共同组成</li>\n<li>跑在自己的进程里</li>\n<li>每个服务为独立的业务开发</li>\n<li>独立部署</li>\n<li>分布式管理</li>\n</ul>\n<p><strong>微服务是一种架构风格，没有强制性和绝度标准答案</strong></p>\n<hr>\n<p>架构演进历史：<img src=\"https://upload-images.jianshu.io/upload_images/12637001-453cfe248e781cf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"架构演进.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3f9b001dc2356278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"单体架构.png\"><br>#####单体架构缺点：</p>\n<ul>\n<li>开发效率低 </li>\n<li>代码维护难</li>\n<li>部署不灵活</li>\n<li>稳定性不高</li>\n<li>扩展性不够</li>\n</ul>\n<hr>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1d6b683e17f81650.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"前后端分离.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-6c1d50dce86202a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"分布式.png\"></p>\n<p><em>微服务必定是分布式的，而分布式系统不一定是微服务</em></p>\n<hr>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ae3fa8cac9deab50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"简单微服务架构.png\"></p>\n<p>####微服务架构的基础框架/组件</p>\n<ul>\n<li>服务注册发现中心</li>\n<li>服务网关（Service Gateway）</li>\n<li>后端通用服务（也称中间层服务Middle Tier Service）</li>\n<li>前端服务（也称边缘服务Edge Service）<strong>负责服务的聚合与裁剪</strong></li>\n</ul>\n<p>####微服务两大实现手段</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Dubbo</th>\n<th>Spring Cloud</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务注册中心</td>\n<td>Zookeeper</td>\n<td>Spring Cloud Netflix Eureka</td>\n</tr>\n<tr>\n<td>服务调用方式</td>\n<td>RPC</td>\n<td>REST API</td>\n</tr>\n<tr>\n<td>服务网关</td>\n<td>无</td>\n<td>Spring Cloud Netflix Zuul</td>\n</tr>\n<tr>\n<td>服务跟踪</td>\n<td>无</td>\n<td>Spring Cloud Sleuth</td>\n</tr>\n<tr>\n<td>断路器</td>\n<td>不完善</td>\n<td>Spring Cloud Netflix Hystrix</td>\n</tr>\n<tr>\n<td>分布式配置</td>\n<td>无</td>\n<td>Spring Cloud Config</td>\n</tr>\n<tr>\n<td>消息总线</td>\n<td>无</td>\n<td>Spring Cloud Bus</td>\n</tr>\n<tr>\n<td>数据流</td>\n<td>无</td>\n<td>Spring Cloud Stream</td>\n</tr>\n<tr>\n<td>批量任务</td>\n<td>无</td>\n<td>Spring Cloud Task</td>\n</tr>\n</tbody></table>\n<p><strong>最后上一张Spring Cloud 微服务架构图：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-9bd71afd111ecfea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"_content":"最近武汉肺炎，牵动着全国人民的心，大家可能都想知道疫情什么时候才能结束，今天我使用2.2之前卫健委发布的确诊人数，按照logistic增长模型拟合了一条曲线并大概预测一下之后的疫情情况，模型的结果仅供参考。\n\n> 本文基于邢翔瑞博主的文章编写，在此感谢翔瑞作者。原文地址：https://blog.csdn.net/weixin_36474809/article/details/104101055\n\n## 什么是Logistic增长曲线：\nLogistic函数或Logistic曲线是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic曲线可以模仿一些情况人口增长（P）的S形曲线。起初阶段大致是指数增长；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200201153005391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n当一个物种迁入到一个新生态系统中后，其数量会发生变化。假设该物种的起始数量小于环境的最大容纳量，则数量会增长。该物种在此生态系统中有天敌、食物、空间等资源也不足（非理想环境），则增长函数满足逻辑斯谛方程，图像呈S形，此方程是描述在资源有限的条件下种群增长规律的一个最佳数学模型。在以下内容中将具体介绍逻辑斯谛方程的原理、生态学意义及其应用。\n\n**Logistic方程**,即常微分方程: \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200201164636350.png)\n\n而将上面的方程解出来，可以得到**logistic函数**：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200201155121796.png)\n其中为P0初始值，K为终值，r衡量曲线变化快慢，t为时间。\n\n\n## 编程实现：\n\n接下来我们就用python来拟合这个曲线。\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\"\"\"\n拟合2019-nCov肺炎感染确诊人数\nhttps://blog.csdn.net/z_ccsdn/article/details/104134358\n\"\"\"\nimport datetime\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport requests\nfrom matplotlib.font_manager import FontProperties\nfrom scipy.optimize import curve_fit\nfrom sklearn.metrics import mean_squared_error\n\n#  引入中文字体库\n\nfont = FontProperties(fname=r\"./simsun.ttc\", size=14)\nsdate = None\nhyperparameters_r = None\nhyperparameters_K = None\n\n'''\n从csv获取数据\ncsv 样例：\n01.11 41 0\n01.12 41 0\n'''\ndef load_data_fromcsv(file_path):\n    data = []\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        for line in lines:\n            line = line.strip()\n            if line:\n                line_array = line.split(' ')\n                if len(line_array) == 3:\n                    data.append(\n                        {'date': line_array[0], 'confirm': line_array[1], 'suspect': line_array[2]})\n    data.sort(key=lambda x: x[\"date\"])\n    date_temple = '%Y.%m.%d'\n    # 获取首次出现感染人数的日期\n    global sdate\n    sdate = datetime.datetime.strptime(\n        '2020.' + data[0]['date'], f'{date_temple}').date()\n    x_data_history = [datetime.datetime.strptime('2020.' + dd['date'], f'{date_temple}').date().strftime(\"%m-%d\") for dd in\n                      data]\n    t = [datetime.datetime.strptime(\n        '2020.' + dd['date'], f'{date_temple}').date() for dd in data]\n    P_confirm = [int(dd['confirm']) for dd in data]\n    P_suspect = [int(dd['suspect']) for dd in data]\n    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history\n\ndef load_data():\n    # 拉取腾讯新闻数据\n    res = requests.get('https://service-n9zsbooc-1252957949.gz.apigw.tencentcs.com/release/qq')\n    res_json = res.json()\n    data = res_json['data']['wuwei_ww_cn_day_counts']\n\n    # 补充更早些的数据：\n    data.append({'date': '01.11', 'confirm': '41', 'suspect': '0'})\n    data.append({'date': '01.12', 'confirm': '41', 'suspect': '0'})\n    data.sort(key=lambda x: x[\"date\"])\n\n    # 因为21号以前并非是全国数据，数据不好要去掉\n    data = data[10:]\n    print(data)\n    # 获取首次出现感染人数的日期\n    global sdate\n    sdate = datetime.datetime.strptime('2020.' + data[0]['date'], '%Y.%m/%d').date()\n\n    x_data_history = [datetime.datetime.strptime('2020.' + dd['date'], '%Y.%m/%d').date().strftime(\"%m-%d\") for dd in\n                      data]\n    t = [datetime.datetime.strptime('2020.' + dd['date'], '%Y.%m/%d').date() for dd in data]\n    P_confirm = [int(dd['confirm']) for dd in data]\n    P_suspect = [int(dd['suspect']) for dd in data]\n    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history\n\n\n# 计算相隔天数\ndef day_delay(t):\n    t0_date = np.datetime64(sdate, 'D')\n    t_ = (t - t0_date)\n    days = (t_ / np.timedelta64(1, 'D')).astype(int)\n    return days\n\n\ndef logistic_increase_function(t,P0):\n    r = hyperparameters_r\n    K = hyperparameters_K\n    # t:time   t0:initial time    P0:initial_value    K:capacity  r:increase_rate\n    exp_value = np.exp(r * (t))\n    return (K * exp_value * P0) / (K + (exp_value - 1) * P0)\n\n\nif __name__ == '__main__':\n    #  日期及感染人数\n    t, P_confirm, P_suspect, x_show_data = load_data()\n    # t, P_confirm, P_suspect, x_show_data = load_data_fromcsv('~/data.csv')\n    x_data, y_data = day_delay(t), P_confirm\n\n    # 分隔训练测试集,将最后的30%数据作为测试集\n    x_train, x_test, y_train, y_test = x_data[:-1 * int(len(x_data) * 0.3)], x_data[-1 * int(len(x_data) * 0.3):], y_data[:-1 * int(len(x_data) * 0.3)],y_data[-1 * int(len(x_data) * 0.3):]\n    print(x_train)\n    print(x_test)\n    popt = None\n    mse = float(\"inf\")\n    r = None\n    k = None\n    # 网格搜索来优化r和K参数\n    max_k = 50000 # 限定的最大感染人数\n    for k_ in np.arange(20000, max_k, 1):\n        hyperparameters_K = k_\n        for r_ in np.arange(0, 1, 0.01):\n            # 用最小二乘法估计拟合\n            hyperparameters_r = r_\n            popt_, pcov_ = curve_fit(logistic_increase_function, x_train, y_train)\n            # # 获取popt里面是拟合系数\n            print(\"K:capacity  P0:initial_value   r:increase_rate\")\n            print(k_, popt_, r_)\n\n            # 计算均方误差对测试集进行验证\n            mse_ = mean_squared_error(y_test, logistic_increase_function(x_test, *popt_))\n            print(\"mse:\", mse_)\n            if mse_ <= mse:\n                mse = mse_\n                popt = popt_\n                r = r_\n                k = k_\n    hyperparameters_K = k\n    hyperparameters_r = r\n    print(\"----------------\")\n    print(\"hyperparameters_K:\", hyperparameters_K)\n    print(\"hyperparameters_r:\", hyperparameters_r)\n    print(\"----------------\")\n    popt, pcov = curve_fit(logistic_increase_function, x_data, y_data)\n    print(\"K:capacity  P0:initial_value   r:increase_rate\")\n    print(hyperparameters_K, popt, hyperparameters_r)\n\n    # 未来预测\n    date_nums = 32 #需要预测的总天数，从第一天开始算起\n    future = np.linspace(0, date_nums, date_nums)\n    future = np.array(future)\n    future_predict = logistic_increase_function(future, *popt)\n\n    # 绘图\n    x_show_data_all = [(sdate + (datetime.timedelta(days=fu))).strftime(\"%m-%d\") for fu in future]\n    plt.scatter(x_show_data, P_confirm, s=35, c='green', marker='.', label=\"确诊人数\")\n    plt.plot(x_show_data_all, future_predict, 'r-s', marker='+', linewidth=1.5, label='预测曲线')\n\n    plt.tick_params(labelsize=5)\n    plt.xlabel('时间', FontProperties=font)\n    plt.ylabel('感染人数', FontProperties=font)\n    plt.xticks(x_show_data_all)\n    plt.grid()  # 显示网格\n\n    plt.legend(prop=font)  # 指定legend的位置右下角\n    plt.show()\n```\n\n## 拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202181447801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.3日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200204221101262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.4 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200204182614152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.5 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205123347600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.6 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020020617023291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.7 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200207173935364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.8 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200208224824593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.11更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200211103740594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)","source":"_posts/机器学习/20181204-使用Logistic 增长模型拟合感染人数 (2.11 日更新).md","raw":"最近武汉肺炎，牵动着全国人民的心，大家可能都想知道疫情什么时候才能结束，今天我使用2.2之前卫健委发布的确诊人数，按照logistic增长模型拟合了一条曲线并大概预测一下之后的疫情情况，模型的结果仅供参考。\n\n> 本文基于邢翔瑞博主的文章编写，在此感谢翔瑞作者。原文地址：https://blog.csdn.net/weixin_36474809/article/details/104101055\n\n## 什么是Logistic增长曲线：\nLogistic函数或Logistic曲线是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic曲线可以模仿一些情况人口增长（P）的S形曲线。起初阶段大致是指数增长；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200201153005391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n当一个物种迁入到一个新生态系统中后，其数量会发生变化。假设该物种的起始数量小于环境的最大容纳量，则数量会增长。该物种在此生态系统中有天敌、食物、空间等资源也不足（非理想环境），则增长函数满足逻辑斯谛方程，图像呈S形，此方程是描述在资源有限的条件下种群增长规律的一个最佳数学模型。在以下内容中将具体介绍逻辑斯谛方程的原理、生态学意义及其应用。\n\n**Logistic方程**,即常微分方程: \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200201164636350.png)\n\n而将上面的方程解出来，可以得到**logistic函数**：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200201155121796.png)\n其中为P0初始值，K为终值，r衡量曲线变化快慢，t为时间。\n\n\n## 编程实现：\n\n接下来我们就用python来拟合这个曲线。\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\"\"\"\n拟合2019-nCov肺炎感染确诊人数\nhttps://blog.csdn.net/z_ccsdn/article/details/104134358\n\"\"\"\nimport datetime\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport requests\nfrom matplotlib.font_manager import FontProperties\nfrom scipy.optimize import curve_fit\nfrom sklearn.metrics import mean_squared_error\n\n#  引入中文字体库\n\nfont = FontProperties(fname=r\"./simsun.ttc\", size=14)\nsdate = None\nhyperparameters_r = None\nhyperparameters_K = None\n\n'''\n从csv获取数据\ncsv 样例：\n01.11 41 0\n01.12 41 0\n'''\ndef load_data_fromcsv(file_path):\n    data = []\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        for line in lines:\n            line = line.strip()\n            if line:\n                line_array = line.split(' ')\n                if len(line_array) == 3:\n                    data.append(\n                        {'date': line_array[0], 'confirm': line_array[1], 'suspect': line_array[2]})\n    data.sort(key=lambda x: x[\"date\"])\n    date_temple = '%Y.%m.%d'\n    # 获取首次出现感染人数的日期\n    global sdate\n    sdate = datetime.datetime.strptime(\n        '2020.' + data[0]['date'], f'{date_temple}').date()\n    x_data_history = [datetime.datetime.strptime('2020.' + dd['date'], f'{date_temple}').date().strftime(\"%m-%d\") for dd in\n                      data]\n    t = [datetime.datetime.strptime(\n        '2020.' + dd['date'], f'{date_temple}').date() for dd in data]\n    P_confirm = [int(dd['confirm']) for dd in data]\n    P_suspect = [int(dd['suspect']) for dd in data]\n    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history\n\ndef load_data():\n    # 拉取腾讯新闻数据\n    res = requests.get('https://service-n9zsbooc-1252957949.gz.apigw.tencentcs.com/release/qq')\n    res_json = res.json()\n    data = res_json['data']['wuwei_ww_cn_day_counts']\n\n    # 补充更早些的数据：\n    data.append({'date': '01.11', 'confirm': '41', 'suspect': '0'})\n    data.append({'date': '01.12', 'confirm': '41', 'suspect': '0'})\n    data.sort(key=lambda x: x[\"date\"])\n\n    # 因为21号以前并非是全国数据，数据不好要去掉\n    data = data[10:]\n    print(data)\n    # 获取首次出现感染人数的日期\n    global sdate\n    sdate = datetime.datetime.strptime('2020.' + data[0]['date'], '%Y.%m/%d').date()\n\n    x_data_history = [datetime.datetime.strptime('2020.' + dd['date'], '%Y.%m/%d').date().strftime(\"%m-%d\") for dd in\n                      data]\n    t = [datetime.datetime.strptime('2020.' + dd['date'], '%Y.%m/%d').date() for dd in data]\n    P_confirm = [int(dd['confirm']) for dd in data]\n    P_suspect = [int(dd['suspect']) for dd in data]\n    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history\n\n\n# 计算相隔天数\ndef day_delay(t):\n    t0_date = np.datetime64(sdate, 'D')\n    t_ = (t - t0_date)\n    days = (t_ / np.timedelta64(1, 'D')).astype(int)\n    return days\n\n\ndef logistic_increase_function(t,P0):\n    r = hyperparameters_r\n    K = hyperparameters_K\n    # t:time   t0:initial time    P0:initial_value    K:capacity  r:increase_rate\n    exp_value = np.exp(r * (t))\n    return (K * exp_value * P0) / (K + (exp_value - 1) * P0)\n\n\nif __name__ == '__main__':\n    #  日期及感染人数\n    t, P_confirm, P_suspect, x_show_data = load_data()\n    # t, P_confirm, P_suspect, x_show_data = load_data_fromcsv('~/data.csv')\n    x_data, y_data = day_delay(t), P_confirm\n\n    # 分隔训练测试集,将最后的30%数据作为测试集\n    x_train, x_test, y_train, y_test = x_data[:-1 * int(len(x_data) * 0.3)], x_data[-1 * int(len(x_data) * 0.3):], y_data[:-1 * int(len(x_data) * 0.3)],y_data[-1 * int(len(x_data) * 0.3):]\n    print(x_train)\n    print(x_test)\n    popt = None\n    mse = float(\"inf\")\n    r = None\n    k = None\n    # 网格搜索来优化r和K参数\n    max_k = 50000 # 限定的最大感染人数\n    for k_ in np.arange(20000, max_k, 1):\n        hyperparameters_K = k_\n        for r_ in np.arange(0, 1, 0.01):\n            # 用最小二乘法估计拟合\n            hyperparameters_r = r_\n            popt_, pcov_ = curve_fit(logistic_increase_function, x_train, y_train)\n            # # 获取popt里面是拟合系数\n            print(\"K:capacity  P0:initial_value   r:increase_rate\")\n            print(k_, popt_, r_)\n\n            # 计算均方误差对测试集进行验证\n            mse_ = mean_squared_error(y_test, logistic_increase_function(x_test, *popt_))\n            print(\"mse:\", mse_)\n            if mse_ <= mse:\n                mse = mse_\n                popt = popt_\n                r = r_\n                k = k_\n    hyperparameters_K = k\n    hyperparameters_r = r\n    print(\"----------------\")\n    print(\"hyperparameters_K:\", hyperparameters_K)\n    print(\"hyperparameters_r:\", hyperparameters_r)\n    print(\"----------------\")\n    popt, pcov = curve_fit(logistic_increase_function, x_data, y_data)\n    print(\"K:capacity  P0:initial_value   r:increase_rate\")\n    print(hyperparameters_K, popt, hyperparameters_r)\n\n    # 未来预测\n    date_nums = 32 #需要预测的总天数，从第一天开始算起\n    future = np.linspace(0, date_nums, date_nums)\n    future = np.array(future)\n    future_predict = logistic_increase_function(future, *popt)\n\n    # 绘图\n    x_show_data_all = [(sdate + (datetime.timedelta(days=fu))).strftime(\"%m-%d\") for fu in future]\n    plt.scatter(x_show_data, P_confirm, s=35, c='green', marker='.', label=\"确诊人数\")\n    plt.plot(x_show_data_all, future_predict, 'r-s', marker='+', linewidth=1.5, label='预测曲线')\n\n    plt.tick_params(labelsize=5)\n    plt.xlabel('时间', FontProperties=font)\n    plt.ylabel('感染人数', FontProperties=font)\n    plt.xticks(x_show_data_all)\n    plt.grid()  # 显示网格\n\n    plt.legend(prop=font)  # 指定legend的位置右下角\n    plt.show()\n```\n\n## 拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200202181447801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.3日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200204221101262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.4 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200204182614152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.5 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200205123347600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.6 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020020617023291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.7 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200207173935364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.8 日更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200208224824593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)\n2.11更新拟合结果：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200211103740594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70)","slug":"机器学习/20181204-使用Logistic 增长模型拟合感染人数 (2.11 日更新)","published":1,"date":"2018-12-03T16:00:00.000Z","updated":"2021-08-17T18:45:34.768Z","title":"使用Logistic 增长模型拟合感染人数 (2","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0p000dnnvb2y0rdjbt","content":"<p>最近武汉肺炎，牵动着全国人民的心，大家可能都想知道疫情什么时候才能结束，今天我使用2.2之前卫健委发布的确诊人数，按照logistic增长模型拟合了一条曲线并大概预测一下之后的疫情情况，模型的结果仅供参考。</p>\n<blockquote>\n<p>本文基于邢翔瑞博主的文章编写，在此感谢翔瑞作者。原文地址：<a href=\"https://blog.csdn.net/weixin_36474809/article/details/104101055\">https://blog.csdn.net/weixin_36474809/article/details/104101055</a></p>\n</blockquote>\n<h2 id=\"什么是Logistic增长曲线：\"><a href=\"#什么是Logistic增长曲线：\" class=\"headerlink\" title=\"什么是Logistic增长曲线：\"></a>什么是Logistic增长曲线：</h2><p>Logistic函数或Logistic曲线是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic曲线可以模仿一些情况人口增长（P）的S形曲线。起初阶段大致是指数增长；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。<br><img src=\"https://img-blog.csdnimg.cn/20200201153005391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>当一个物种迁入到一个新生态系统中后，其数量会发生变化。假设该物种的起始数量小于环境的最大容纳量，则数量会增长。该物种在此生态系统中有天敌、食物、空间等资源也不足（非理想环境），则增长函数满足逻辑斯谛方程，图像呈S形，此方程是描述在资源有限的条件下种群增长规律的一个最佳数学模型。在以下内容中将具体介绍逻辑斯谛方程的原理、生态学意义及其应用。</p>\n<p><strong>Logistic方程</strong>,即常微分方程:<br><img src=\"https://img-blog.csdnimg.cn/20200201164636350.png\" alt=\"在这里插入图片描述\"></p>\n<p>而将上面的方程解出来，可以得到<strong>logistic函数</strong>：<br><img src=\"https://img-blog.csdnimg.cn/20200201155121796.png\" alt=\"在这里插入图片描述\"><br>其中为P0初始值，K为终值，r衡量曲线变化快慢，t为时间。</p>\n<h2 id=\"编程实现：\"><a href=\"#编程实现：\" class=\"headerlink\" title=\"编程实现：\"></a>编程实现：</h2><p>接下来我们就用python来拟合这个曲线。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">拟合2019-nCov肺炎感染确诊人数</span><br><span class=\"line\">https://blog.csdn.net/z_ccsdn/article/details/104134358</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from matplotlib.font_manager import FontProperties</span><br><span class=\"line\">from scipy.optimize import curve_fit</span><br><span class=\"line\">from sklearn.metrics import mean_squared_error</span><br><span class=\"line\"></span><br><span class=\"line\">#  引入中文字体库</span><br><span class=\"line\"></span><br><span class=\"line\">font = FontProperties(fname=r&quot;./simsun.ttc&quot;, size=14)</span><br><span class=\"line\">sdate = None</span><br><span class=\"line\">hyperparameters_r = None</span><br><span class=\"line\">hyperparameters_K = None</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">从csv获取数据</span><br><span class=\"line\">csv 样例：</span><br><span class=\"line\">01.11 41 0</span><br><span class=\"line\">01.12 41 0</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">def load_data_fromcsv(file_path):</span><br><span class=\"line\">    data = []</span><br><span class=\"line\">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class=\"line\">        lines = file.readlines()</span><br><span class=\"line\">        for line in lines:</span><br><span class=\"line\">            line = line.strip()</span><br><span class=\"line\">            if line:</span><br><span class=\"line\">                line_array = line.split(&#x27; &#x27;)</span><br><span class=\"line\">                if len(line_array) == 3:</span><br><span class=\"line\">                    data.append(</span><br><span class=\"line\">                        &#123;&#x27;date&#x27;: line_array[0], &#x27;confirm&#x27;: line_array[1], &#x27;suspect&#x27;: line_array[2]&#125;)</span><br><span class=\"line\">    data.sort(key=lambda x: x[&quot;date&quot;])</span><br><span class=\"line\">    date_temple = &#x27;%Y.%m.%d&#x27;</span><br><span class=\"line\">    # 获取首次出现感染人数的日期</span><br><span class=\"line\">    global sdate</span><br><span class=\"line\">    sdate = datetime.datetime.strptime(</span><br><span class=\"line\">        &#x27;2020.&#x27; + data[0][&#x27;date&#x27;], f&#x27;&#123;date_temple&#125;&#x27;).date()</span><br><span class=\"line\">    x_data_history = [datetime.datetime.strptime(&#x27;2020.&#x27; + dd[&#x27;date&#x27;], f&#x27;&#123;date_temple&#125;&#x27;).date().strftime(&quot;%m-%d&quot;) for dd in</span><br><span class=\"line\">                      data]</span><br><span class=\"line\">    t = [datetime.datetime.strptime(</span><br><span class=\"line\">        &#x27;2020.&#x27; + dd[&#x27;date&#x27;], f&#x27;&#123;date_temple&#125;&#x27;).date() for dd in data]</span><br><span class=\"line\">    P_confirm = [int(dd[&#x27;confirm&#x27;]) for dd in data]</span><br><span class=\"line\">    P_suspect = [int(dd[&#x27;suspect&#x27;]) for dd in data]</span><br><span class=\"line\">    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history</span><br><span class=\"line\"></span><br><span class=\"line\">def load_data():</span><br><span class=\"line\">    # 拉取腾讯新闻数据</span><br><span class=\"line\">    res = requests.get(&#x27;https://service-n9zsbooc-1252957949.gz.apigw.tencentcs.com/release/qq&#x27;)</span><br><span class=\"line\">    res_json = res.json()</span><br><span class=\"line\">    data = res_json[&#x27;data&#x27;][&#x27;wuwei_ww_cn_day_counts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">    # 补充更早些的数据：</span><br><span class=\"line\">    data.append(&#123;&#x27;date&#x27;: &#x27;01.11&#x27;, &#x27;confirm&#x27;: &#x27;41&#x27;, &#x27;suspect&#x27;: &#x27;0&#x27;&#125;)</span><br><span class=\"line\">    data.append(&#123;&#x27;date&#x27;: &#x27;01.12&#x27;, &#x27;confirm&#x27;: &#x27;41&#x27;, &#x27;suspect&#x27;: &#x27;0&#x27;&#125;)</span><br><span class=\"line\">    data.sort(key=lambda x: x[&quot;date&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 因为21号以前并非是全国数据，数据不好要去掉</span><br><span class=\"line\">    data = data[10:]</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    # 获取首次出现感染人数的日期</span><br><span class=\"line\">    global sdate</span><br><span class=\"line\">    sdate = datetime.datetime.strptime(&#x27;2020.&#x27; + data[0][&#x27;date&#x27;], &#x27;%Y.%m/%d&#x27;).date()</span><br><span class=\"line\"></span><br><span class=\"line\">    x_data_history = [datetime.datetime.strptime(&#x27;2020.&#x27; + dd[&#x27;date&#x27;], &#x27;%Y.%m/%d&#x27;).date().strftime(&quot;%m-%d&quot;) for dd in</span><br><span class=\"line\">                      data]</span><br><span class=\"line\">    t = [datetime.datetime.strptime(&#x27;2020.&#x27; + dd[&#x27;date&#x27;], &#x27;%Y.%m/%d&#x27;).date() for dd in data]</span><br><span class=\"line\">    P_confirm = [int(dd[&#x27;confirm&#x27;]) for dd in data]</span><br><span class=\"line\">    P_suspect = [int(dd[&#x27;suspect&#x27;]) for dd in data]</span><br><span class=\"line\">    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 计算相隔天数</span><br><span class=\"line\">def day_delay(t):</span><br><span class=\"line\">    t0_date = np.datetime64(sdate, &#x27;D&#x27;)</span><br><span class=\"line\">    t_ = (t - t0_date)</span><br><span class=\"line\">    days = (t_ / np.timedelta64(1, &#x27;D&#x27;)).astype(int)</span><br><span class=\"line\">    return days</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def logistic_increase_function(t,P0):</span><br><span class=\"line\">    r = hyperparameters_r</span><br><span class=\"line\">    K = hyperparameters_K</span><br><span class=\"line\">    # t:time   t0:initial time    P0:initial_value    K:capacity  r:increase_rate</span><br><span class=\"line\">    exp_value = np.exp(r * (t))</span><br><span class=\"line\">    return (K * exp_value * P0) / (K + (exp_value - 1) * P0)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    #  日期及感染人数</span><br><span class=\"line\">    t, P_confirm, P_suspect, x_show_data = load_data()</span><br><span class=\"line\">    # t, P_confirm, P_suspect, x_show_data = load_data_fromcsv(&#x27;~/data.csv&#x27;)</span><br><span class=\"line\">    x_data, y_data = day_delay(t), P_confirm</span><br><span class=\"line\"></span><br><span class=\"line\">    # 分隔训练测试集,将最后的30%数据作为测试集</span><br><span class=\"line\">    x_train, x_test, y_train, y_test = x_data[:-1 * int(len(x_data) * 0.3)], x_data[-1 * int(len(x_data) * 0.3):], y_data[:-1 * int(len(x_data) * 0.3)],y_data[-1 * int(len(x_data) * 0.3):]</span><br><span class=\"line\">    print(x_train)</span><br><span class=\"line\">    print(x_test)</span><br><span class=\"line\">    popt = None</span><br><span class=\"line\">    mse = float(&quot;inf&quot;)</span><br><span class=\"line\">    r = None</span><br><span class=\"line\">    k = None</span><br><span class=\"line\">    # 网格搜索来优化r和K参数</span><br><span class=\"line\">    max_k = 50000 # 限定的最大感染人数</span><br><span class=\"line\">    for k_ in np.arange(20000, max_k, 1):</span><br><span class=\"line\">        hyperparameters_K = k_</span><br><span class=\"line\">        for r_ in np.arange(0, 1, 0.01):</span><br><span class=\"line\">            # 用最小二乘法估计拟合</span><br><span class=\"line\">            hyperparameters_r = r_</span><br><span class=\"line\">            popt_, pcov_ = curve_fit(logistic_increase_function, x_train, y_train)</span><br><span class=\"line\">            # # 获取popt里面是拟合系数</span><br><span class=\"line\">            print(&quot;K:capacity  P0:initial_value   r:increase_rate&quot;)</span><br><span class=\"line\">            print(k_, popt_, r_)</span><br><span class=\"line\"></span><br><span class=\"line\">            # 计算均方误差对测试集进行验证</span><br><span class=\"line\">            mse_ = mean_squared_error(y_test, logistic_increase_function(x_test, *popt_))</span><br><span class=\"line\">            print(&quot;mse:&quot;, mse_)</span><br><span class=\"line\">            if mse_ &lt;= mse:</span><br><span class=\"line\">                mse = mse_</span><br><span class=\"line\">                popt = popt_</span><br><span class=\"line\">                r = r_</span><br><span class=\"line\">                k = k_</span><br><span class=\"line\">    hyperparameters_K = k</span><br><span class=\"line\">    hyperparameters_r = r</span><br><span class=\"line\">    print(&quot;----------------&quot;)</span><br><span class=\"line\">    print(&quot;hyperparameters_K:&quot;, hyperparameters_K)</span><br><span class=\"line\">    print(&quot;hyperparameters_r:&quot;, hyperparameters_r)</span><br><span class=\"line\">    print(&quot;----------------&quot;)</span><br><span class=\"line\">    popt, pcov = curve_fit(logistic_increase_function, x_data, y_data)</span><br><span class=\"line\">    print(&quot;K:capacity  P0:initial_value   r:increase_rate&quot;)</span><br><span class=\"line\">    print(hyperparameters_K, popt, hyperparameters_r)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 未来预测</span><br><span class=\"line\">    date_nums = 32 #需要预测的总天数，从第一天开始算起</span><br><span class=\"line\">    future = np.linspace(0, date_nums, date_nums)</span><br><span class=\"line\">    future = np.array(future)</span><br><span class=\"line\">    future_predict = logistic_increase_function(future, *popt)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 绘图</span><br><span class=\"line\">    x_show_data_all = [(sdate + (datetime.timedelta(days=fu))).strftime(&quot;%m-%d&quot;) for fu in future]</span><br><span class=\"line\">    plt.scatter(x_show_data, P_confirm, s=35, c=&#x27;green&#x27;, marker=&#x27;.&#x27;, label=&quot;确诊人数&quot;)</span><br><span class=\"line\">    plt.plot(x_show_data_all, future_predict, &#x27;r-s&#x27;, marker=&#x27;+&#x27;, linewidth=1.5, label=&#x27;预测曲线&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.tick_params(labelsize=5)</span><br><span class=\"line\">    plt.xlabel(&#x27;时间&#x27;, FontProperties=font)</span><br><span class=\"line\">    plt.ylabel(&#x27;感染人数&#x27;, FontProperties=font)</span><br><span class=\"line\">    plt.xticks(x_show_data_all)</span><br><span class=\"line\">    plt.grid()  # 显示网格</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.legend(prop=font)  # 指定legend的位置右下角</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拟合结果：\"><a href=\"#拟合结果：\" class=\"headerlink\" title=\"拟合结果：\"></a>拟合结果：</h2><p><img src=\"https://img-blog.csdnimg.cn/20200202181447801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.3日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200204221101262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.4 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200204182614152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.5 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200205123347600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.6 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/2020020617023291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.7 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200207173935364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.8 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200208224824593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.11更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200211103740594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"abbrlink":"1HHWX5G","excerpt":"最近武汉肺炎，牵动着全国人民的心，大家可能都想知道疫情什么时候才能结束，今天我使用2.2之前卫健委发布的确诊人数，按照logistic增长模型拟合了一条曲线并大概预测一下之后的疫情情况，模型的结果仅供参考。\n\n本文基于邢翔瑞博主的文章编写，在此感谢翔瑞作者。原文地址：https://blog.csdn.net/weixin_36474809/article/details/104101055\n\n什么是Logistic增长曲线：\nLogistic函数或Logistic曲线是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic","more":"<p>最近武汉肺炎，牵动着全国人民的心，大家可能都想知道疫情什么时候才能结束，今天我使用2.2之前卫健委发布的确诊人数，按照logistic增长模型拟合了一条曲线并大概预测一下之后的疫情情况，模型的结果仅供参考。</p>\n<blockquote>\n<p>本文基于邢翔瑞博主的文章编写，在此感谢翔瑞作者。原文地址：<a href=\"https://blog.csdn.net/weixin_36474809/article/details/104101055\">https://blog.csdn.net/weixin_36474809/article/details/104101055</a></p>\n</blockquote>\n<h2 id=\"什么是Logistic增长曲线：\"><a href=\"#什么是Logistic增长曲线：\" class=\"headerlink\" title=\"什么是Logistic增长曲线：\"></a>什么是Logistic增长曲线：</h2><p>Logistic函数或Logistic曲线是一种常见的S形函数，它是皮埃尔·弗朗索瓦·韦吕勒在1844或1845年在研究它与人口增长的关系时命名的。广义Logistic曲线可以模仿一些情况人口增长（P）的S形曲线。起初阶段大致是指数增长；然后随着开始变得饱和，增加变慢；最后，达到成熟时增加停止。<br><img src=\"https://img-blog.csdnimg.cn/20200201153005391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>当一个物种迁入到一个新生态系统中后，其数量会发生变化。假设该物种的起始数量小于环境的最大容纳量，则数量会增长。该物种在此生态系统中有天敌、食物、空间等资源也不足（非理想环境），则增长函数满足逻辑斯谛方程，图像呈S形，此方程是描述在资源有限的条件下种群增长规律的一个最佳数学模型。在以下内容中将具体介绍逻辑斯谛方程的原理、生态学意义及其应用。</p>\n<p><strong>Logistic方程</strong>,即常微分方程:<br><img src=\"https://img-blog.csdnimg.cn/20200201164636350.png\" alt=\"在这里插入图片描述\"></p>\n<p>而将上面的方程解出来，可以得到<strong>logistic函数</strong>：<br><img src=\"https://img-blog.csdnimg.cn/20200201155121796.png\" alt=\"在这里插入图片描述\"><br>其中为P0初始值，K为终值，r衡量曲线变化快慢，t为时间。</p>\n<h2 id=\"编程实现：\"><a href=\"#编程实现：\" class=\"headerlink\" title=\"编程实现：\"></a>编程实现：</h2><p>接下来我们就用python来拟合这个曲线。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">拟合2019-nCov肺炎感染确诊人数</span><br><span class=\"line\">https://blog.csdn.net/z_ccsdn/article/details/104134358</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from matplotlib.font_manager import FontProperties</span><br><span class=\"line\">from scipy.optimize import curve_fit</span><br><span class=\"line\">from sklearn.metrics import mean_squared_error</span><br><span class=\"line\"></span><br><span class=\"line\">#  引入中文字体库</span><br><span class=\"line\"></span><br><span class=\"line\">font = FontProperties(fname=r&quot;./simsun.ttc&quot;, size=14)</span><br><span class=\"line\">sdate = None</span><br><span class=\"line\">hyperparameters_r = None</span><br><span class=\"line\">hyperparameters_K = None</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">从csv获取数据</span><br><span class=\"line\">csv 样例：</span><br><span class=\"line\">01.11 41 0</span><br><span class=\"line\">01.12 41 0</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">def load_data_fromcsv(file_path):</span><br><span class=\"line\">    data = []</span><br><span class=\"line\">    with open(file_path, &#x27;r&#x27;) as file:</span><br><span class=\"line\">        lines = file.readlines()</span><br><span class=\"line\">        for line in lines:</span><br><span class=\"line\">            line = line.strip()</span><br><span class=\"line\">            if line:</span><br><span class=\"line\">                line_array = line.split(&#x27; &#x27;)</span><br><span class=\"line\">                if len(line_array) == 3:</span><br><span class=\"line\">                    data.append(</span><br><span class=\"line\">                        &#123;&#x27;date&#x27;: line_array[0], &#x27;confirm&#x27;: line_array[1], &#x27;suspect&#x27;: line_array[2]&#125;)</span><br><span class=\"line\">    data.sort(key=lambda x: x[&quot;date&quot;])</span><br><span class=\"line\">    date_temple = &#x27;%Y.%m.%d&#x27;</span><br><span class=\"line\">    # 获取首次出现感染人数的日期</span><br><span class=\"line\">    global sdate</span><br><span class=\"line\">    sdate = datetime.datetime.strptime(</span><br><span class=\"line\">        &#x27;2020.&#x27; + data[0][&#x27;date&#x27;], f&#x27;&#123;date_temple&#125;&#x27;).date()</span><br><span class=\"line\">    x_data_history = [datetime.datetime.strptime(&#x27;2020.&#x27; + dd[&#x27;date&#x27;], f&#x27;&#123;date_temple&#125;&#x27;).date().strftime(&quot;%m-%d&quot;) for dd in</span><br><span class=\"line\">                      data]</span><br><span class=\"line\">    t = [datetime.datetime.strptime(</span><br><span class=\"line\">        &#x27;2020.&#x27; + dd[&#x27;date&#x27;], f&#x27;&#123;date_temple&#125;&#x27;).date() for dd in data]</span><br><span class=\"line\">    P_confirm = [int(dd[&#x27;confirm&#x27;]) for dd in data]</span><br><span class=\"line\">    P_suspect = [int(dd[&#x27;suspect&#x27;]) for dd in data]</span><br><span class=\"line\">    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history</span><br><span class=\"line\"></span><br><span class=\"line\">def load_data():</span><br><span class=\"line\">    # 拉取腾讯新闻数据</span><br><span class=\"line\">    res = requests.get(&#x27;https://service-n9zsbooc-1252957949.gz.apigw.tencentcs.com/release/qq&#x27;)</span><br><span class=\"line\">    res_json = res.json()</span><br><span class=\"line\">    data = res_json[&#x27;data&#x27;][&#x27;wuwei_ww_cn_day_counts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">    # 补充更早些的数据：</span><br><span class=\"line\">    data.append(&#123;&#x27;date&#x27;: &#x27;01.11&#x27;, &#x27;confirm&#x27;: &#x27;41&#x27;, &#x27;suspect&#x27;: &#x27;0&#x27;&#125;)</span><br><span class=\"line\">    data.append(&#123;&#x27;date&#x27;: &#x27;01.12&#x27;, &#x27;confirm&#x27;: &#x27;41&#x27;, &#x27;suspect&#x27;: &#x27;0&#x27;&#125;)</span><br><span class=\"line\">    data.sort(key=lambda x: x[&quot;date&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 因为21号以前并非是全国数据，数据不好要去掉</span><br><span class=\"line\">    data = data[10:]</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    # 获取首次出现感染人数的日期</span><br><span class=\"line\">    global sdate</span><br><span class=\"line\">    sdate = datetime.datetime.strptime(&#x27;2020.&#x27; + data[0][&#x27;date&#x27;], &#x27;%Y.%m/%d&#x27;).date()</span><br><span class=\"line\"></span><br><span class=\"line\">    x_data_history = [datetime.datetime.strptime(&#x27;2020.&#x27; + dd[&#x27;date&#x27;], &#x27;%Y.%m/%d&#x27;).date().strftime(&quot;%m-%d&quot;) for dd in</span><br><span class=\"line\">                      data]</span><br><span class=\"line\">    t = [datetime.datetime.strptime(&#x27;2020.&#x27; + dd[&#x27;date&#x27;], &#x27;%Y.%m/%d&#x27;).date() for dd in data]</span><br><span class=\"line\">    P_confirm = [int(dd[&#x27;confirm&#x27;]) for dd in data]</span><br><span class=\"line\">    P_suspect = [int(dd[&#x27;suspect&#x27;]) for dd in data]</span><br><span class=\"line\">    return np.array(t, dtype=np.datetime64), np.array(P_confirm), np.array(P_suspect), x_data_history</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 计算相隔天数</span><br><span class=\"line\">def day_delay(t):</span><br><span class=\"line\">    t0_date = np.datetime64(sdate, &#x27;D&#x27;)</span><br><span class=\"line\">    t_ = (t - t0_date)</span><br><span class=\"line\">    days = (t_ / np.timedelta64(1, &#x27;D&#x27;)).astype(int)</span><br><span class=\"line\">    return days</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def logistic_increase_function(t,P0):</span><br><span class=\"line\">    r = hyperparameters_r</span><br><span class=\"line\">    K = hyperparameters_K</span><br><span class=\"line\">    # t:time   t0:initial time    P0:initial_value    K:capacity  r:increase_rate</span><br><span class=\"line\">    exp_value = np.exp(r * (t))</span><br><span class=\"line\">    return (K * exp_value * P0) / (K + (exp_value - 1) * P0)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    #  日期及感染人数</span><br><span class=\"line\">    t, P_confirm, P_suspect, x_show_data = load_data()</span><br><span class=\"line\">    # t, P_confirm, P_suspect, x_show_data = load_data_fromcsv(&#x27;~/data.csv&#x27;)</span><br><span class=\"line\">    x_data, y_data = day_delay(t), P_confirm</span><br><span class=\"line\"></span><br><span class=\"line\">    # 分隔训练测试集,将最后的30%数据作为测试集</span><br><span class=\"line\">    x_train, x_test, y_train, y_test = x_data[:-1 * int(len(x_data) * 0.3)], x_data[-1 * int(len(x_data) * 0.3):], y_data[:-1 * int(len(x_data) * 0.3)],y_data[-1 * int(len(x_data) * 0.3):]</span><br><span class=\"line\">    print(x_train)</span><br><span class=\"line\">    print(x_test)</span><br><span class=\"line\">    popt = None</span><br><span class=\"line\">    mse = float(&quot;inf&quot;)</span><br><span class=\"line\">    r = None</span><br><span class=\"line\">    k = None</span><br><span class=\"line\">    # 网格搜索来优化r和K参数</span><br><span class=\"line\">    max_k = 50000 # 限定的最大感染人数</span><br><span class=\"line\">    for k_ in np.arange(20000, max_k, 1):</span><br><span class=\"line\">        hyperparameters_K = k_</span><br><span class=\"line\">        for r_ in np.arange(0, 1, 0.01):</span><br><span class=\"line\">            # 用最小二乘法估计拟合</span><br><span class=\"line\">            hyperparameters_r = r_</span><br><span class=\"line\">            popt_, pcov_ = curve_fit(logistic_increase_function, x_train, y_train)</span><br><span class=\"line\">            # # 获取popt里面是拟合系数</span><br><span class=\"line\">            print(&quot;K:capacity  P0:initial_value   r:increase_rate&quot;)</span><br><span class=\"line\">            print(k_, popt_, r_)</span><br><span class=\"line\"></span><br><span class=\"line\">            # 计算均方误差对测试集进行验证</span><br><span class=\"line\">            mse_ = mean_squared_error(y_test, logistic_increase_function(x_test, *popt_))</span><br><span class=\"line\">            print(&quot;mse:&quot;, mse_)</span><br><span class=\"line\">            if mse_ &lt;= mse:</span><br><span class=\"line\">                mse = mse_</span><br><span class=\"line\">                popt = popt_</span><br><span class=\"line\">                r = r_</span><br><span class=\"line\">                k = k_</span><br><span class=\"line\">    hyperparameters_K = k</span><br><span class=\"line\">    hyperparameters_r = r</span><br><span class=\"line\">    print(&quot;----------------&quot;)</span><br><span class=\"line\">    print(&quot;hyperparameters_K:&quot;, hyperparameters_K)</span><br><span class=\"line\">    print(&quot;hyperparameters_r:&quot;, hyperparameters_r)</span><br><span class=\"line\">    print(&quot;----------------&quot;)</span><br><span class=\"line\">    popt, pcov = curve_fit(logistic_increase_function, x_data, y_data)</span><br><span class=\"line\">    print(&quot;K:capacity  P0:initial_value   r:increase_rate&quot;)</span><br><span class=\"line\">    print(hyperparameters_K, popt, hyperparameters_r)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 未来预测</span><br><span class=\"line\">    date_nums = 32 #需要预测的总天数，从第一天开始算起</span><br><span class=\"line\">    future = np.linspace(0, date_nums, date_nums)</span><br><span class=\"line\">    future = np.array(future)</span><br><span class=\"line\">    future_predict = logistic_increase_function(future, *popt)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 绘图</span><br><span class=\"line\">    x_show_data_all = [(sdate + (datetime.timedelta(days=fu))).strftime(&quot;%m-%d&quot;) for fu in future]</span><br><span class=\"line\">    plt.scatter(x_show_data, P_confirm, s=35, c=&#x27;green&#x27;, marker=&#x27;.&#x27;, label=&quot;确诊人数&quot;)</span><br><span class=\"line\">    plt.plot(x_show_data_all, future_predict, &#x27;r-s&#x27;, marker=&#x27;+&#x27;, linewidth=1.5, label=&#x27;预测曲线&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.tick_params(labelsize=5)</span><br><span class=\"line\">    plt.xlabel(&#x27;时间&#x27;, FontProperties=font)</span><br><span class=\"line\">    plt.ylabel(&#x27;感染人数&#x27;, FontProperties=font)</span><br><span class=\"line\">    plt.xticks(x_show_data_all)</span><br><span class=\"line\">    plt.grid()  # 显示网格</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.legend(prop=font)  # 指定legend的位置右下角</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拟合结果：\"><a href=\"#拟合结果：\" class=\"headerlink\" title=\"拟合结果：\"></a>拟合结果：</h2><p><img src=\"https://img-blog.csdnimg.cn/20200202181447801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.3日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200204221101262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.4 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200204182614152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.5 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200205123347600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.6 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/2020020617023291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.7 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200207173935364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.8 日更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200208224824593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>2.11更新拟合结果：<br><img src=\"https://img-blog.csdnimg.cn/20200211103740594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"_content":"### ML知识概括：\n![知识地图.jpeg](https://upload-images.jianshu.io/upload_images/12637001-1e10aeeecdaea513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### ML常用公式\n![常用公式.jpeg](https://upload-images.jianshu.io/upload_images/12637001-b513e203223aed93.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)\n**https://morvanzhou.github.io/**\n\n### 基本术语\n* ***特征向量(feature vector)/样本(sample)***：用多个维度来描述一件事物有叫做“样本”也叫做“特征向量”\n* ***训练(training)**：从数据中学得**模型**得过程\n* ***训练样本***：训练过程中使用的数据称为“训练数据”，其中每个样本称为一个“训练样本”，训练样本组成的集合称为“训练集”。\n* ***模型/学习器(learner)***：可看作学习算法在给定数据和参数空间上的实例化也叫做\n* ***标记(label)***：关于样本预测结果的信息，例如：“好瓜”、“坏瓜” 称为标记，而，拥有了标记信息的样本称为样例，一般的用(xi,yi)表示第i个样例，xi为第i个特征向量，yi是xi的标记。\n* ***分类(classification)&回归(regression)***：对于欲预测的是离散值,此类学习任务称为“分类”；若欲预测的是连续值，例如西瓜的成熟度0.95、0.37，此类学习任务称为“回归”\n* ***二分类(binary classification)&多分类(multi-class classification)***：对只涉及两个类别的的学习任务称为“二分类”任务，通常称为一个类为“正类”，另一个类为“反类”；涉及多个类别时，则称“多分类”任务。\n* ***测试/评估(testing)***：学得模型后，使用其进行预测的过程称为“测试”\n* ***聚类(clustering)***：将训练集的样本分成若干组，每一组称为一簇(cluster),这些自动形成的簇可能对应一些潜在的概念划分，而且这样的学习过程中使用的训练样本通常不用于标记信息。\n* ***监督学习&无监督学习***\n* ***泛化(generalization)*** ：学得模型适用于新样本的能力，称为泛化能力\n\n### 假设空间\n\n### scikit-learn 中文文档\nhttp://sklearn.apachecn.org/cn/0.19.0/\n","source":"_posts/机器学习/20181204-机器学习(ML)-入门知识.md","raw":"### ML知识概括：\n![知识地图.jpeg](https://upload-images.jianshu.io/upload_images/12637001-1e10aeeecdaea513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### ML常用公式\n![常用公式.jpeg](https://upload-images.jianshu.io/upload_images/12637001-b513e203223aed93.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)\n**https://morvanzhou.github.io/**\n\n### 基本术语\n* ***特征向量(feature vector)/样本(sample)***：用多个维度来描述一件事物有叫做“样本”也叫做“特征向量”\n* ***训练(training)**：从数据中学得**模型**得过程\n* ***训练样本***：训练过程中使用的数据称为“训练数据”，其中每个样本称为一个“训练样本”，训练样本组成的集合称为“训练集”。\n* ***模型/学习器(learner)***：可看作学习算法在给定数据和参数空间上的实例化也叫做\n* ***标记(label)***：关于样本预测结果的信息，例如：“好瓜”、“坏瓜” 称为标记，而，拥有了标记信息的样本称为样例，一般的用(xi,yi)表示第i个样例，xi为第i个特征向量，yi是xi的标记。\n* ***分类(classification)&回归(regression)***：对于欲预测的是离散值,此类学习任务称为“分类”；若欲预测的是连续值，例如西瓜的成熟度0.95、0.37，此类学习任务称为“回归”\n* ***二分类(binary classification)&多分类(multi-class classification)***：对只涉及两个类别的的学习任务称为“二分类”任务，通常称为一个类为“正类”，另一个类为“反类”；涉及多个类别时，则称“多分类”任务。\n* ***测试/评估(testing)***：学得模型后，使用其进行预测的过程称为“测试”\n* ***聚类(clustering)***：将训练集的样本分成若干组，每一组称为一簇(cluster),这些自动形成的簇可能对应一些潜在的概念划分，而且这样的学习过程中使用的训练样本通常不用于标记信息。\n* ***监督学习&无监督学习***\n* ***泛化(generalization)*** ：学得模型适用于新样本的能力，称为泛化能力\n\n### 假设空间\n\n### scikit-learn 中文文档\nhttp://sklearn.apachecn.org/cn/0.19.0/\n","slug":"机器学习/20181204-机器学习(ML)-入门知识","published":1,"date":"2018-12-03T16:00:00.000Z","updated":"2021-08-17T18:45:34.768Z","title":"机器学习(ML)-入门知识","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0p000ennvbazqbd50n","content":"<h3 id=\"ML知识概括：\"><a href=\"#ML知识概括：\" class=\"headerlink\" title=\"ML知识概括：\"></a>ML知识概括：</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1e10aeeecdaea513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"知识地图.jpeg\"></p>\n<h3 id=\"ML常用公式\"><a href=\"#ML常用公式\" class=\"headerlink\" title=\"ML常用公式\"></a>ML常用公式</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-b513e203223aed93.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"常用公式.jpeg\"></p>\n<h3 id=\"推荐学习博客：莫烦Python-有视频和图文，很大神非常推荐\"><a href=\"#推荐学习博客：莫烦Python-有视频和图文，很大神非常推荐\" class=\"headerlink\" title=\"推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)\"></a>推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)</h3><p><strong><a href=\"https://morvanzhou.github.io/\">https://morvanzhou.github.io/</a></strong></p>\n<h3 id=\"基本术语\"><a href=\"#基本术语\" class=\"headerlink\" title=\"基本术语\"></a>基本术语</h3><ul>\n<li>***特征向量(feature vector)/样本(sample)***：用多个维度来描述一件事物有叫做“样本”也叫做“特征向量”</li>\n<li>*<strong>训练(training)<strong>：从数据中学得</strong>模型</strong>得过程</li>\n<li><em><strong>训练样本</strong></em>：训练过程中使用的数据称为“训练数据”，其中每个样本称为一个“训练样本”，训练样本组成的集合称为“训练集”。</li>\n<li>***模型/学习器(learner)***：可看作学习算法在给定数据和参数空间上的实例化也叫做</li>\n<li>***标记(label)***：关于样本预测结果的信息，例如：“好瓜”、“坏瓜” 称为标记，而，拥有了标记信息的样本称为样例，一般的用(xi,yi)表示第i个样例，xi为第i个特征向量，yi是xi的标记。</li>\n<li>***分类(classification)&amp;回归(regression)***：对于欲预测的是离散值,此类学习任务称为“分类”；若欲预测的是连续值，例如西瓜的成熟度0.95、0.37，此类学习任务称为“回归”</li>\n<li>***二分类(binary classification)&amp;多分类(multi-class classification)***：对只涉及两个类别的的学习任务称为“二分类”任务，通常称为一个类为“正类”，另一个类为“反类”；涉及多个类别时，则称“多分类”任务。</li>\n<li>***测试/评估(testing)***：学得模型后，使用其进行预测的过程称为“测试”</li>\n<li>***聚类(clustering)***：将训练集的样本分成若干组，每一组称为一簇(cluster),这些自动形成的簇可能对应一些潜在的概念划分，而且这样的学习过程中使用的训练样本通常不用于标记信息。</li>\n<li><em><strong>监督学习&amp;无监督学习</strong></em></li>\n<li><em><strong>泛化(generalization)</strong></em> ：学得模型适用于新样本的能力，称为泛化能力</li>\n</ul>\n<h3 id=\"假设空间\"><a href=\"#假设空间\" class=\"headerlink\" title=\"假设空间\"></a>假设空间</h3><h3 id=\"scikit-learn-中文文档\"><a href=\"#scikit-learn-中文文档\" class=\"headerlink\" title=\"scikit-learn 中文文档\"></a>scikit-learn 中文文档</h3><p><a href=\"http://sklearn.apachecn.org/cn/0.19.0/\">http://sklearn.apachecn.org/cn/0.19.0/</a></p>\n","site":{"data":{}},"abbrlink":"37J4VHM","excerpt":"ML知识概括：\n\n\nML常用公式\n\n\n推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)\nhttps://morvanzhou.github.io/\n\n基本术语\n * ***特征向量(feature vector)/样本(sample)***：用多个维度来描述一件事物有叫做“样本”也叫做“特征向量”\n * *训练(training)：从数据中学得模型得过程\n * 训练样本：训练过程中使用的数据称为“训练数据”，其中每个样本称为一个“训练样本”，训练样本组成的集合称为“训练集”。\n * ***模型/学习器(learner)***：可看作学习算法在给定数据和参数空间上的实例化也叫做\n ","more":"<h3 id=\"ML知识概括：\"><a href=\"#ML知识概括：\" class=\"headerlink\" title=\"ML知识概括：\"></a>ML知识概括：</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1e10aeeecdaea513.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"知识地图.jpeg\"></p>\n<h3 id=\"ML常用公式\"><a href=\"#ML常用公式\" class=\"headerlink\" title=\"ML常用公式\"></a>ML常用公式</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-b513e203223aed93.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"常用公式.jpeg\"></p>\n<h3 id=\"推荐学习博客：莫烦Python-有视频和图文，很大神非常推荐\"><a href=\"#推荐学习博客：莫烦Python-有视频和图文，很大神非常推荐\" class=\"headerlink\" title=\"推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)\"></a>推荐学习博客：莫烦Python(有视频和图文，很大神非常推荐)</h3><p><strong><a href=\"https://morvanzhou.github.io/\">https://morvanzhou.github.io/</a></strong></p>\n<h3 id=\"基本术语\"><a href=\"#基本术语\" class=\"headerlink\" title=\"基本术语\"></a>基本术语</h3><ul>\n<li>***特征向量(feature vector)/样本(sample)***：用多个维度来描述一件事物有叫做“样本”也叫做“特征向量”</li>\n<li>*<strong>训练(training)<strong>：从数据中学得</strong>模型</strong>得过程</li>\n<li><em><strong>训练样本</strong></em>：训练过程中使用的数据称为“训练数据”，其中每个样本称为一个“训练样本”，训练样本组成的集合称为“训练集”。</li>\n<li>***模型/学习器(learner)***：可看作学习算法在给定数据和参数空间上的实例化也叫做</li>\n<li>***标记(label)***：关于样本预测结果的信息，例如：“好瓜”、“坏瓜” 称为标记，而，拥有了标记信息的样本称为样例，一般的用(xi,yi)表示第i个样例，xi为第i个特征向量，yi是xi的标记。</li>\n<li>***分类(classification)&amp;回归(regression)***：对于欲预测的是离散值,此类学习任务称为“分类”；若欲预测的是连续值，例如西瓜的成熟度0.95、0.37，此类学习任务称为“回归”</li>\n<li>***二分类(binary classification)&amp;多分类(multi-class classification)***：对只涉及两个类别的的学习任务称为“二分类”任务，通常称为一个类为“正类”，另一个类为“反类”；涉及多个类别时，则称“多分类”任务。</li>\n<li>***测试/评估(testing)***：学得模型后，使用其进行预测的过程称为“测试”</li>\n<li>***聚类(clustering)***：将训练集的样本分成若干组，每一组称为一簇(cluster),这些自动形成的簇可能对应一些潜在的概念划分，而且这样的学习过程中使用的训练样本通常不用于标记信息。</li>\n<li><em><strong>监督学习&amp;无监督学习</strong></em></li>\n<li><em><strong>泛化(generalization)</strong></em> ：学得模型适用于新样本的能力，称为泛化能力</li>\n</ul>\n<h3 id=\"假设空间\"><a href=\"#假设空间\" class=\"headerlink\" title=\"假设空间\"></a>假设空间</h3><h3 id=\"scikit-learn-中文文档\"><a href=\"#scikit-learn-中文文档\" class=\"headerlink\" title=\"scikit-learn 中文文档\"></a>scikit-learn 中文文档</h3><p><a href=\"http://sklearn.apachecn.org/cn/0.19.0/\">http://sklearn.apachecn.org/cn/0.19.0/</a></p>\n"},{"_content":"### 1. 基本形式\n* 线性模型：试图学得一个通过属性的线性组合来进行预测的函数，即\n![3.1](https://upload-images.jianshu.io/upload_images/12637001-d7807397ddc036eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300)\n用向量形式写成：\n![3.2](https://upload-images.jianshu.io/upload_images/12637001-be87e08e66054328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200)\n\n### 2.线性回归\n对于给定数据集D={(x1,y1),(x2,y2),(x3,y3),.....,(xm,ym)},其中 x1=(x1;x2;...;xd),yi ∈ R,\"线性回归\"试图学得一个线性模型以尽可能准确的预测实值输出标记。\n我们先考虑一种最简单的情形：输入属性数目只有一个即\n![](https://upload-images.jianshu.io/upload_images/12637001-8947099a7f237062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300)\n线性回归试图学得：\n![](https://upload-images.jianshu.io/upload_images/12637001-51b99e11ad29c35b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300)\n如何确定w和b呢？显然，关键在于如何衡量f(x)与y之间的差别，之前介绍过，均方误差是回归任务常用的性能度量,因此我们试图让均方误差最小化，即\n![](https://upload-images.jianshu.io/upload_images/12637001-fdcbe6522360bf1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n![](https://upload-images.jianshu.io/upload_images/12637001-2c01d15484f6139b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/12637001-304a9fd4c6027030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/12637001-7e6a55b5a73dc64f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/12637001-bbf5519f9d441481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n                                                \n","source":"_posts/机器学习/20181204-机器学习-线性模型.md","raw":"### 1. 基本形式\n* 线性模型：试图学得一个通过属性的线性组合来进行预测的函数，即\n![3.1](https://upload-images.jianshu.io/upload_images/12637001-d7807397ddc036eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300)\n用向量形式写成：\n![3.2](https://upload-images.jianshu.io/upload_images/12637001-be87e08e66054328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200)\n\n### 2.线性回归\n对于给定数据集D={(x1,y1),(x2,y2),(x3,y3),.....,(xm,ym)},其中 x1=(x1;x2;...;xd),yi ∈ R,\"线性回归\"试图学得一个线性模型以尽可能准确的预测实值输出标记。\n我们先考虑一种最简单的情形：输入属性数目只有一个即\n![](https://upload-images.jianshu.io/upload_images/12637001-8947099a7f237062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300)\n线性回归试图学得：\n![](https://upload-images.jianshu.io/upload_images/12637001-51b99e11ad29c35b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300)\n如何确定w和b呢？显然，关键在于如何衡量f(x)与y之间的差别，之前介绍过，均方误差是回归任务常用的性能度量,因此我们试图让均方误差最小化，即\n![](https://upload-images.jianshu.io/upload_images/12637001-fdcbe6522360bf1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n![](https://upload-images.jianshu.io/upload_images/12637001-2c01d15484f6139b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/12637001-304a9fd4c6027030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/12637001-7e6a55b5a73dc64f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/12637001-bbf5519f9d441481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n                                                \n","slug":"机器学习/20181204-机器学习-线性模型","published":1,"date":"2018-12-03T16:00:00.000Z","updated":"2021-08-17T21:06:01.498Z","_id":"cksgjze0p000fnnvb5lvu10ef","title":"机器学习-线性模型","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-基本形式\"><a href=\"#1-基本形式\" class=\"headerlink\" title=\"1. 基本形式\"></a>1. 基本形式</h3><ul>\n<li>线性模型：试图学得一个通过属性的线性组合来进行预测的函数，即<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d7807397ddc036eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\" alt=\"3.1\"><br>用向量形式写成：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-be87e08e66054328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" alt=\"3.2\"></li>\n</ul>\n<h3 id=\"2-线性回归\"><a href=\"#2-线性回归\" class=\"headerlink\" title=\"2.线性回归\"></a>2.线性回归</h3><p>对于给定数据集D={(x1,y1),(x2,y2),(x3,y3),…..,(xm,ym)},其中 x1=(x1;x2;…;xd),yi ∈ R,”线性回归”试图学得一个线性模型以尽可能准确的预测实值输出标记。<br>我们先考虑一种最简单的情形：输入属性数目只有一个即<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-8947099a7f237062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\"><br>线性回归试图学得：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-51b99e11ad29c35b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\"><br>如何确定w和b呢？显然，关键在于如何衡量f(x)与y之间的差别，之前介绍过，均方误差是回归任务常用的性能度量,因此我们试图让均方误差最小化，即<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-fdcbe6522360bf1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-2c01d15484f6139b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-304a9fd4c6027030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-7e6a55b5a73dc64f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-bbf5519f9d441481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n","site":{"data":{}},"abbrlink":"5HFDED","excerpt":"1. 基本形式\n * 线性模型：试图学得一个通过属性的线性组合来进行预测的函数，即\n   \n   用向量形式写成：\n   \n\n2.线性回归\n对于给定数据集D={(x1,y1),(x2,y2),(x3,y3),…..,(xm,ym)},其中 x1=(x1;x2;…;xd),yi ∈ R,”线性回归”试图学得一个线性模型以尽可能准确的预测实值输出标记。\n我们先考虑一种最简单的情形：输入属性数目只有一个即\n\n线性回归试图学得：\n\n如何确定w和b呢？显然，关键在于如何衡量f(x)与y之间的差别，之前介绍过，均方误差是回归任务常用的性能度量,因此我们试图让均方误差最小化，即","more":"<h3 id=\"1-基本形式\"><a href=\"#1-基本形式\" class=\"headerlink\" title=\"1. 基本形式\"></a>1. 基本形式</h3><ul>\n<li>线性模型：试图学得一个通过属性的线性组合来进行预测的函数，即<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d7807397ddc036eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\" alt=\"3.1\"><br>用向量形式写成：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-be87e08e66054328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" alt=\"3.2\"></li>\n</ul>\n<h3 id=\"2-线性回归\"><a href=\"#2-线性回归\" class=\"headerlink\" title=\"2.线性回归\"></a>2.线性回归</h3><p>对于给定数据集D={(x1,y1),(x2,y2),(x3,y3),…..,(xm,ym)},其中 x1=(x1;x2;…;xd),yi ∈ R,”线性回归”试图学得一个线性模型以尽可能准确的预测实值输出标记。<br>我们先考虑一种最简单的情形：输入属性数目只有一个即<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-8947099a7f237062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\"><br>线性回归试图学得：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-51b99e11ad29c35b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300\"><br>如何确定w和b呢？显然，关键在于如何衡量f(x)与y之间的差别，之前介绍过，均方误差是回归任务常用的性能度量,因此我们试图让均方误差最小化，即<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-fdcbe6522360bf1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-2c01d15484f6139b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-304a9fd4c6027030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-7e6a55b5a73dc64f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-bbf5519f9d441481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"_content":">![Numpy](https://upload-images.jianshu.io/upload_images/12637001-1f83105a35a4de31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024)\n\n>![多维数组](https://upload-images.jianshu.io/upload_images/12637001-b627be9af0ff85ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024)\n\n>PS：机器学习相关代码：https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter\nGitHub源码：https://github.com/coderzc/machine_learning\n等有时间整理一下，发出来\n\n### Numpy 创建N维数组\n```python\nimport numpy as np\n\n''' 创建10行10列的数值为浮点0的矩阵 '''\n>>> print(\"np.zeros\\n\", np.zeros([10, 10]))\nnp.zeros\n [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n\n''' 创建10行10列的数值为浮点1的矩阵 '''\n>>> print(\"np.ones\\n\", np.ones([10, 10]))\nnp.ones\n [[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]\n\n\n''' 创建10行10列的数值为浮点1的对角矩阵 '''\n>>> print(\"np.eye\\n\", np.eye(10, 10))\nnp.eye\n [[1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]\n\n''' 从数值范围创建数组 开始，结束，步长，输出元素类型 '''\n>>> print(\"np.arange\\n\", np.arange(0, 100, 2, float))\nnp.arange\n [ 0.  2.  4.  6.  8. 10. 12. 14. 16. 18. 20. 22. 24. 26. 28. 30. 32. 34.\n 36. 38. 40. 42. 44. 46. 48. 50. 52. 54. 56. 58. 60. 62. 64. 66. 68. 70.\n 72. 74. 76. 78. 80. 82. 84. 86. 88. 90. 92. 94. 96. 98.]\n\n'''生产随机数组 5行5列 范围0～1'''\n>>> np.random.rand(5, 5)\narray([[0.79909192, 0.40687012, 0.05833267, 0.90631693, 0.85774438],\n       [0.65685319, 0.99620959, 0.64195711, 0.28694344, 0.54805126],\n       [0.87347445, 0.20443748, 0.45883044, 0.90017425, 0.17487183],\n       [0.4833086 , 0.59498315, 0.75053456, 0.93725983, 0.79870607],\n       [0.8908418 , 0.49860926, 0.44097606, 0.53744394, 0.21089092]])\n\n\n''' 生成在半开半闭区间 [low,high)上离散均匀分布的整数值;若high=None，则取值区间变为[0,low) ; size维度 '''\n>>> np.random.randint(4,10,size=(5, 5))\narray([[6, 6, 6, 7, 9],\n       [4, 8, 6, 7, 7],\n       [6, 8, 6, 5, 7],\n       [7, 8, 8, 4, 5],\n       [7, 6, 5, 5, 7]])\n\n\n''' 给定均值/标准差/维度的正态分布 '''\n>>> np.random.normal(1.75, 0.1, (3, 4))\narray([[1.83246388, 1.73186179, 1.78198763, 1.76844117],\n       [1.69089184, 1.69620751, 1.78018062, 1.68086896],\n       [1.86462936, 1.61972878, 1.95645574, 1.66104741]])\n\n\n''' 将列表转换为np数组 '''\n>>> array = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n>>> np_array = np.array(array, dtype=float)  # copy,新数组\n>>> print(\"np.array:\\n\", np_array)\nnp.array:\n [[ 1.  2.  3.  4.]\n [ 5.  6.  7.  8.]\n [ 9. 10. 11. 12.]]\n\n>>> np_array2 = np.asarray(array, dtype=float)  # view,会改变原数组\n>>> print(\"np.asarray:\\n\", np_array2)\nnp.asarray:\n [[ 1.  2.  3.  4.]\n [ 5.  6.  7.  8.]\n [ 9. 10. 11. 12.]]\n```\n\n### 查看数组属性\n```python\n# 数组元素个数\n>>> print(\"数组元素个数 size:\", np_array.size)\n数组元素个数 size: 12\n# 数组形状\n>>> print(\"数组形状 shape:\", np_array.shape)\n数组形状 shape: (3, 4)\n# 数组维度\n>>> print(\"数组维度 ndim:\", np_array.ndim)\n数组维度 ndim: 2\n# 数组元素类型\n>>> print(\"数组元素类型 dtype:\", np_array.dtype)\n数组元素类型 dtype: float64\n# 数组中每个元素的字节大小\n>>> print(\"数组元素类型 itemsize:\", np_array.itemsize)\n数组元素类型 itemsize: 8\n```\n### shape操作\n```python\n>>> array = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n>>> n1 = np.asarray(array)\n\n# 改变数组的格式\n>>> n2 = n1.reshape(6, 2)\n>>> print(n1)\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(n2)\n[[ 1  2]\n [ 3  4]\n [ 5  6]\n [ 7  8]\n [ 9 10]\n [11 12]]\n\n# 将多维降到1维展开\n>>> print(\"flatten():\", n2.flatten())  # copy,新数组\nflatten(): [ 1  2  3  4  5  6  7  8  9 10 11 12]\n>>> print(\"ravel():\", n2.ravel())  # view，会改变原数组,却不会改变shape\nravel(): [ 1  2  3  4  5  6  7  8  9 10 11 12]\n\n# 转置\n>>> n3 = np.arange(12)\n>>> n3 = n3.reshape(3, 4)\n>>> print(\"n3:\", n3)\nn3: [[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n\n>>> print(\"n3.T:\", n3.T)\nn3.T: [[ 0  4  8]\n [ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]]\n\n# reshape一些特殊值\n>>> n4 = np.arange(10, 130, 10)\n>>> print(\"n4:\", n4.reshape(4, 3))\nn4: [[ 10  20  30]\n [ 40  50  60]\n [ 70  80  90]\n [100 110 120]]\n\n#   -1 一维展开 与 ravel()作用相似\n>>> print(n4.reshape(-1))\n[ 10  20  30  40  50  60  70  80  90 100 110 120]\n\n#   (-1,1) n行，1列\n>>> print(n4.reshape(-1, 1))\n[[ 10]\n [ 20]\n [ 30]\n [ 40]\n [ 50]\n [ 60]\n [ 70]\n [ 80]\n [ 90]\n [100]\n [110]\n [120]]\n\n#   (1,-1) 1行，n列但任然是二维矩阵\n>>> print(n4.reshape(1, -1))\n[[ 10  20  30  40  50  60  70  80  90 100 110 120]]\n```\n\n### 数组索引和迭代\n```python\n>>> print('\\n\\n')\n>>> n5 = np.arange(30)\n>>> print('n5:', n5)\nn5: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n 24 25 26 27 28 29]\n\n# 获取第一个元素\n>>> print(n5[0])\n0\n\n# 获取倒数第一个元素\n>>> print(n5[-1])\n29\n\n# 取前十个数\n>>> print(n5[:10])\n[0 1 2 3 4 5 6 7 8 9]\n\n# 取后十个数\n>>> print(n5[-10:])\n[20 21 22 23 24 25 26 27 28 29]\n\n# 取前11-20个数，左闭右开\n>>> print(n5[10:20])\n[10 11 12 13 14 15 16 17 18 19]\n\n# 前十个数中，每2个数取一个\n>>> print(n5[:10:2])\n[0 2 4 6 8]\n\n# 第6-15个数中，每3个数取一个\n>>> print(n5[5:15:3])\n[ 5  8 11 14]\n\n# 所有的数中，每10个数取一个\n>>> print(n5[::10])\n[ 0 10 20]\n\n# 什么都不写，可以原样复制一个数组\n>>> print(n5[:])\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n 24 25 26 27 28 29]\n\n\n############### 多维数组索引与切片 ###############\n>>> n6 = n5.reshape(5, 6)\n>>> print('n6:', n6)\nn6: [[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]\n [24 25 26 27 28 29]]\n\n#   索引第二行第三列的元素\n>>> print('n6[1, 2]:', n6[1, 2])\nn6[1, 2]: 8\n\n#   在第一维取前两行，第二维每+2取一个元素\n>>> print('n6[:2, ::2]:\\n', n6[:2, ::2])\nn6[:2, ::2]:\n [[ 0  2  4]\n [ 6  8 10]]\n\n# 取第一列\n>>> print('n6[:, 0]]:\\n', n6[:, 0])\nn6[:, 0]]:\n [ 0  6 12 18 24]\n\n# 取第2、3列\n>>> print('n6[:, 3:5]]:\\n', n6[:, 3:5])\nn6[:, 3:5]]:\n [[ 3  4]\n [ 9 10]\n [15 16]\n [21 22]\n [27 28]]\n```\n\n\n\n### 拼接、分割\n```python\n>>> A=np.arange(10,20).reshape(5,2)\n>>> print(A)\n[[10 11]\n [12 13]\n [14 15]\n [16 17]\n [18 19]]\n\n>>> B=np.arange(20,30).reshape(5,2)\n>>> print(B)\n[[20 21]\n [22 23]\n [24 25]\n [26 27]\n [28 29]]\n\n# 垂直拼接\n>>> C=np.vstack([A,B]) #C=np.r_[A,B]\n>>> print(C)\n[[10 11]\n [12 13]\n [14 15]\n [16 17]\n [18 19]\n [20 21]\n [22 23]\n [24 25]\n [26 27]\n [28 29]]\n\n# 自我堆叠\n>>> v=np.asarray([1,2])\n>>> a=np.vstack([v]*2)\n>>> print(a)\n[[1 2]\n [1 2]]\n# 横向堆叠两次，纵向堆叠一次\n>>> b=np.tile(v,(2,1))\n>>> print(b)\n[[1 2]\n [1 2]]\n\n# 水平拼接\n>>> C=np.hstack([A,B]) #C=np.c_[A,B]\n>>> print(C)\n[[10 11 20 21]\n [12 13 22 23]\n [14 15 24 25]\n [16 17 26 27]\n [18 19 28 29]]\n\n#列组合column_stack([A,B]) 一维数组：按列方向组合  二维数组：同hstack一样\n>>> A=np.arange(10,20)\n>>> print(A)\n[10 11 12 13 14 15 16 17 18 19]\n#行组合row_stack([A,B]) 一维数组：按行方向组合  二维数组：同vstack一样\n```\n### 基础运算\n```python\n>>> n7 = np.asarray([10, 20, 30,40])\n>>> n8 = np.arange(4)\n>>> print(n7)\n[10 20 30 40]\n>>> print(n8)\n[0 1 2 3]\n\n# 计算立方\n>>> print(n7**3)\n[ 1000  8000 27000 64000]\n\n# 三角函数\n>>> print(np.sin(n7))\n[-0.54402111  0.91294525 -0.98803162  0.74511316]\n\n# 指定轴最大/小值\n>>> print(np.amax(n7, axis=0))\n40\n>>> print(np.amin(n7, axis=0))\n10\n\n# 平均值\n>>> print(np.mean(n7, axis=0))\n25.0\n\n# 中位数\n>>> print(np.median(n7))\n25.0\n\n# 方差\n>>> print(n7.var())\n125.0\n\n# 标准差\n>>> print(np.std(n7, axis=0))\n11.180339887498949\n\n# 差值\n>>> print(\"n7-n8:\",n7-n8)\nn7-n8: [10 19 28 37]\n\n\n# 逐个相乘非矩阵乘法\n>>> n9 = np.asarray([[1,1],[0,1]])\n>>> print(n9)\n[[1 1]\n [0 1]]\n>>> n10=np.arange(4).reshape((2,2))\n>>> print(n10)\n[[0 1]\n [2 3]]\n>>> print(n9 * n10) \n[[0 1]\n [0 3]]\n```\n\n### 矩阵计算\n```python\n# Ax=B 求解x\n>>> A = np.array([[2, 1, -2], [3, 0, 1], [1, 1, -1]])\n>>> B = np.transpose(np.array([[-3, 5, -2]]))\n>>> x = np.linalg.solve(A, B)\n>>> print('x:\\n', x)\nx:\n [[ 1.]\n [-1.]\n [ 2.]]\n\n# 矩阵相乘 C=AB  求解C\n>>> A = np.array([[3, 2, -2], [3, 1, 4], [3, 1, -2]])\n>>> B = np.arange(9).reshape((3,3))\n>>> C = np.dot(A, B)\n>>> print('C:\\n',C)\nC:\n [[-6 -3  0]\n [27 35 43]\n [-9 -7 -5]]\n\n\n# 矩阵乘向量\n>>> v=np.asarray([1,2])\n>>> print(v)\n[1 2]\n>>> A=np.arange(1,5).reshape(2,2)\n>>> print(A)\n[[1 2]\n [3 4]]\n>>> D=v.dot(A)\n>>> print(D)\n[ 7 10]\n# 自动将v转换为列向量，结果有自动转化为行向量\n>>> C=A.dot(v)\n>>> print(C)\n[ 5 11]\n\n\n# 矩阵的逆\n>>> A=np.arange(1,5).reshape(2,2)\n>>> print(A)\n[[1 2]\n [3 4]]\n>>> invA=np.linalg.inv(A)\n>>> print(invA)\n[[-2.   1. ]\n [ 1.5 -0.5]]\n#   矩阵乘以矩阵的逆等于单位矩阵对角线都为1,其他为0，这里有浮点误差\n>>> print(A.dot(invA))\n[[1.00000000e+00 1.11022302e-16]\n [0.00000000e+00 1.00000000e+00]]\n\n# 对于非方阵求伪逆矩阵\n>>> A=np.arange(1,11).reshape(2,5)\n>>> print(A)\n[[ 1  2  3  4  5]\n [ 6  7  8  9 10]]\n>>> pinvA=np.linalg.pinv(A)\n>>> print(pinvA)\n[[-0.36  0.16]\n [-0.2   0.1 ]\n [-0.04  0.04]\n [ 0.12 -0.02]\n [ 0.28 -0.08]]\n>>> print(A.dot(pinvA))\n[[ 1.00000000e+00 -1.11022302e-16]\n [-8.88178420e-16  1.00000000e+00]]\n```\n### 排序与arg\n```python\n>>> x=np.asarray([2,6,7,1,4,5,8,3,10,9])\n>>> print(x)\n[ 2  6  7  1  4  5  8  3 10  9]\n\n# argxxx 索引函数\n>>> print(np.argmax(x)) #最大数的索引为8\n8\n>>> print(np.argmin(x))\n3\n\n# 排序\n>>> print(np.sort(x))\n[ 1  2  3  4  5  6  7  8  9 10]\n\n# x原地排序\n>>> x.sort()\n>>> print(x)\n[ 1  2  3  4  5  6  7  8  9 10]\n\n#打乱顺序\n>>> np.random.shuffle(x)\n>>> print(x)\n[ 9  3  5  6  2  1  8  4  7 10]\n\n# 返回排序索引\n>>> print(np.argsort(x))\n[5 4 1 7 2 3 8 6 0 9]\n\n# 划分大于3和小于3 （快排子过程）\n>>> print(np.partition(x,3))\n[ 2  1  3  4  5  6  8  7  9 10]\n```\n\n### FancyIndexing与np比较\n```python\n>>> x=np.arange(16)\n>>> print(x)\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]\n\n# FancyIndexing\n>>> a=[3,5,8]\n>>> print(x[a])\n[3 5 8]\n\n# np数组比较\n>>> x<3\narray([ True,  True,  True, False, False, False, False, False, False,\n       False, False, False, False, False, False, False])\n\n>>> 2*x==24-4*x\narray([False, False, False, False,  True, False, False, False, False,\n       False, False, False, False, False, False, False])\n\n# 小于等于3的元素Ture/False序列\n>>> i=(x<=3)\n>>> print(i)\n[ True  True  True  True False False False False False False False False\n False False False False]\n>>> print(x[i])\n[0 1 2 3]\n>>> np.sum(i) # 对值Ture累加记数\n4\n\n# 是否含有零元素\n>>> np.any(x==0)\nTrue\n\n# 是否都等于零\n>>> np.all(x==0)\nFalse\n\n# 判断两个数组是否相等\n>>> np.all(x==x)\nTrue\n```\n### 读取数据\n```python\n>>> np.genfromtxt(\"http://aima.cs.berkeley.edu/data/iris.csv\", delimiter=\",\",skip_header=0,dtype=\"f8,f8,f,i4,|S8\")\narray([(5.1, 3.5, 1.4, 0, b'setosa'), (4.9, 3. , 1.4, 0, b'setosa'),\n       (4.7, 3.2, 1.3, 0, b'setosa'), (4.6, 3.1, 1.5, 0, b'setosa'),\n       (5. , 3.6, 1.4, 0, b'setosa'), (5.4, 3.9, 1.7, 0, b'setosa'),\n       (4.6, 3.4, 1.4, 0, b'setosa'), (5. , 3.4, 1.5, 0, b'setosa'),\n       (4.4, 2.9, 1.4, 0, b'setosa'), (4.9, 3.1, 1.5, 0, b'setosa'),\n       (5.4, 3.7, 1.5, 0, b'setosa'), (4.8, 3.4, 1.6, 0, b'setosa'),\n  ......\n  ......\n       (5.8, 2.7, 5.1, 1, b'virginic'), (6.8, 3.2, 5.9, 2, b'virginic'),\n       (6.7, 3.3, 5.7, 2, b'virginic'), (6.7, 3. , 5.2, 2, b'virginic'),\n       (6.3, 2.5, 5. , 1, b'virginic'), (6.5, 3. , 5.2, 2, b'virginic'),\n       (6.2, 3.4, 5.4, 2, b'virginic'), (5.9, 3. , 5.1, 1, b'virginic')],\n      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<f8'), ('f3', '<i4'), ('f4', 'S8')])\n```\n","source":"_posts/机器学习/20181204-机器学习利器之Numpy.md","raw":">![Numpy](https://upload-images.jianshu.io/upload_images/12637001-1f83105a35a4de31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024)\n\n>![多维数组](https://upload-images.jianshu.io/upload_images/12637001-b627be9af0ff85ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024)\n\n>PS：机器学习相关代码：https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter\nGitHub源码：https://github.com/coderzc/machine_learning\n等有时间整理一下，发出来\n\n### Numpy 创建N维数组\n```python\nimport numpy as np\n\n''' 创建10行10列的数值为浮点0的矩阵 '''\n>>> print(\"np.zeros\\n\", np.zeros([10, 10]))\nnp.zeros\n [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n\n''' 创建10行10列的数值为浮点1的矩阵 '''\n>>> print(\"np.ones\\n\", np.ones([10, 10]))\nnp.ones\n [[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]\n\n\n''' 创建10行10列的数值为浮点1的对角矩阵 '''\n>>> print(\"np.eye\\n\", np.eye(10, 10))\nnp.eye\n [[1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]\n\n''' 从数值范围创建数组 开始，结束，步长，输出元素类型 '''\n>>> print(\"np.arange\\n\", np.arange(0, 100, 2, float))\nnp.arange\n [ 0.  2.  4.  6.  8. 10. 12. 14. 16. 18. 20. 22. 24. 26. 28. 30. 32. 34.\n 36. 38. 40. 42. 44. 46. 48. 50. 52. 54. 56. 58. 60. 62. 64. 66. 68. 70.\n 72. 74. 76. 78. 80. 82. 84. 86. 88. 90. 92. 94. 96. 98.]\n\n'''生产随机数组 5行5列 范围0～1'''\n>>> np.random.rand(5, 5)\narray([[0.79909192, 0.40687012, 0.05833267, 0.90631693, 0.85774438],\n       [0.65685319, 0.99620959, 0.64195711, 0.28694344, 0.54805126],\n       [0.87347445, 0.20443748, 0.45883044, 0.90017425, 0.17487183],\n       [0.4833086 , 0.59498315, 0.75053456, 0.93725983, 0.79870607],\n       [0.8908418 , 0.49860926, 0.44097606, 0.53744394, 0.21089092]])\n\n\n''' 生成在半开半闭区间 [low,high)上离散均匀分布的整数值;若high=None，则取值区间变为[0,low) ; size维度 '''\n>>> np.random.randint(4,10,size=(5, 5))\narray([[6, 6, 6, 7, 9],\n       [4, 8, 6, 7, 7],\n       [6, 8, 6, 5, 7],\n       [7, 8, 8, 4, 5],\n       [7, 6, 5, 5, 7]])\n\n\n''' 给定均值/标准差/维度的正态分布 '''\n>>> np.random.normal(1.75, 0.1, (3, 4))\narray([[1.83246388, 1.73186179, 1.78198763, 1.76844117],\n       [1.69089184, 1.69620751, 1.78018062, 1.68086896],\n       [1.86462936, 1.61972878, 1.95645574, 1.66104741]])\n\n\n''' 将列表转换为np数组 '''\n>>> array = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n>>> np_array = np.array(array, dtype=float)  # copy,新数组\n>>> print(\"np.array:\\n\", np_array)\nnp.array:\n [[ 1.  2.  3.  4.]\n [ 5.  6.  7.  8.]\n [ 9. 10. 11. 12.]]\n\n>>> np_array2 = np.asarray(array, dtype=float)  # view,会改变原数组\n>>> print(\"np.asarray:\\n\", np_array2)\nnp.asarray:\n [[ 1.  2.  3.  4.]\n [ 5.  6.  7.  8.]\n [ 9. 10. 11. 12.]]\n```\n\n### 查看数组属性\n```python\n# 数组元素个数\n>>> print(\"数组元素个数 size:\", np_array.size)\n数组元素个数 size: 12\n# 数组形状\n>>> print(\"数组形状 shape:\", np_array.shape)\n数组形状 shape: (3, 4)\n# 数组维度\n>>> print(\"数组维度 ndim:\", np_array.ndim)\n数组维度 ndim: 2\n# 数组元素类型\n>>> print(\"数组元素类型 dtype:\", np_array.dtype)\n数组元素类型 dtype: float64\n# 数组中每个元素的字节大小\n>>> print(\"数组元素类型 itemsize:\", np_array.itemsize)\n数组元素类型 itemsize: 8\n```\n### shape操作\n```python\n>>> array = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n>>> n1 = np.asarray(array)\n\n# 改变数组的格式\n>>> n2 = n1.reshape(6, 2)\n>>> print(n1)\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(n2)\n[[ 1  2]\n [ 3  4]\n [ 5  6]\n [ 7  8]\n [ 9 10]\n [11 12]]\n\n# 将多维降到1维展开\n>>> print(\"flatten():\", n2.flatten())  # copy,新数组\nflatten(): [ 1  2  3  4  5  6  7  8  9 10 11 12]\n>>> print(\"ravel():\", n2.ravel())  # view，会改变原数组,却不会改变shape\nravel(): [ 1  2  3  4  5  6  7  8  9 10 11 12]\n\n# 转置\n>>> n3 = np.arange(12)\n>>> n3 = n3.reshape(3, 4)\n>>> print(\"n3:\", n3)\nn3: [[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n\n>>> print(\"n3.T:\", n3.T)\nn3.T: [[ 0  4  8]\n [ 1  5  9]\n [ 2  6 10]\n [ 3  7 11]]\n\n# reshape一些特殊值\n>>> n4 = np.arange(10, 130, 10)\n>>> print(\"n4:\", n4.reshape(4, 3))\nn4: [[ 10  20  30]\n [ 40  50  60]\n [ 70  80  90]\n [100 110 120]]\n\n#   -1 一维展开 与 ravel()作用相似\n>>> print(n4.reshape(-1))\n[ 10  20  30  40  50  60  70  80  90 100 110 120]\n\n#   (-1,1) n行，1列\n>>> print(n4.reshape(-1, 1))\n[[ 10]\n [ 20]\n [ 30]\n [ 40]\n [ 50]\n [ 60]\n [ 70]\n [ 80]\n [ 90]\n [100]\n [110]\n [120]]\n\n#   (1,-1) 1行，n列但任然是二维矩阵\n>>> print(n4.reshape(1, -1))\n[[ 10  20  30  40  50  60  70  80  90 100 110 120]]\n```\n\n### 数组索引和迭代\n```python\n>>> print('\\n\\n')\n>>> n5 = np.arange(30)\n>>> print('n5:', n5)\nn5: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n 24 25 26 27 28 29]\n\n# 获取第一个元素\n>>> print(n5[0])\n0\n\n# 获取倒数第一个元素\n>>> print(n5[-1])\n29\n\n# 取前十个数\n>>> print(n5[:10])\n[0 1 2 3 4 5 6 7 8 9]\n\n# 取后十个数\n>>> print(n5[-10:])\n[20 21 22 23 24 25 26 27 28 29]\n\n# 取前11-20个数，左闭右开\n>>> print(n5[10:20])\n[10 11 12 13 14 15 16 17 18 19]\n\n# 前十个数中，每2个数取一个\n>>> print(n5[:10:2])\n[0 2 4 6 8]\n\n# 第6-15个数中，每3个数取一个\n>>> print(n5[5:15:3])\n[ 5  8 11 14]\n\n# 所有的数中，每10个数取一个\n>>> print(n5[::10])\n[ 0 10 20]\n\n# 什么都不写，可以原样复制一个数组\n>>> print(n5[:])\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n 24 25 26 27 28 29]\n\n\n############### 多维数组索引与切片 ###############\n>>> n6 = n5.reshape(5, 6)\n>>> print('n6:', n6)\nn6: [[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]\n [24 25 26 27 28 29]]\n\n#   索引第二行第三列的元素\n>>> print('n6[1, 2]:', n6[1, 2])\nn6[1, 2]: 8\n\n#   在第一维取前两行，第二维每+2取一个元素\n>>> print('n6[:2, ::2]:\\n', n6[:2, ::2])\nn6[:2, ::2]:\n [[ 0  2  4]\n [ 6  8 10]]\n\n# 取第一列\n>>> print('n6[:, 0]]:\\n', n6[:, 0])\nn6[:, 0]]:\n [ 0  6 12 18 24]\n\n# 取第2、3列\n>>> print('n6[:, 3:5]]:\\n', n6[:, 3:5])\nn6[:, 3:5]]:\n [[ 3  4]\n [ 9 10]\n [15 16]\n [21 22]\n [27 28]]\n```\n\n\n\n### 拼接、分割\n```python\n>>> A=np.arange(10,20).reshape(5,2)\n>>> print(A)\n[[10 11]\n [12 13]\n [14 15]\n [16 17]\n [18 19]]\n\n>>> B=np.arange(20,30).reshape(5,2)\n>>> print(B)\n[[20 21]\n [22 23]\n [24 25]\n [26 27]\n [28 29]]\n\n# 垂直拼接\n>>> C=np.vstack([A,B]) #C=np.r_[A,B]\n>>> print(C)\n[[10 11]\n [12 13]\n [14 15]\n [16 17]\n [18 19]\n [20 21]\n [22 23]\n [24 25]\n [26 27]\n [28 29]]\n\n# 自我堆叠\n>>> v=np.asarray([1,2])\n>>> a=np.vstack([v]*2)\n>>> print(a)\n[[1 2]\n [1 2]]\n# 横向堆叠两次，纵向堆叠一次\n>>> b=np.tile(v,(2,1))\n>>> print(b)\n[[1 2]\n [1 2]]\n\n# 水平拼接\n>>> C=np.hstack([A,B]) #C=np.c_[A,B]\n>>> print(C)\n[[10 11 20 21]\n [12 13 22 23]\n [14 15 24 25]\n [16 17 26 27]\n [18 19 28 29]]\n\n#列组合column_stack([A,B]) 一维数组：按列方向组合  二维数组：同hstack一样\n>>> A=np.arange(10,20)\n>>> print(A)\n[10 11 12 13 14 15 16 17 18 19]\n#行组合row_stack([A,B]) 一维数组：按行方向组合  二维数组：同vstack一样\n```\n### 基础运算\n```python\n>>> n7 = np.asarray([10, 20, 30,40])\n>>> n8 = np.arange(4)\n>>> print(n7)\n[10 20 30 40]\n>>> print(n8)\n[0 1 2 3]\n\n# 计算立方\n>>> print(n7**3)\n[ 1000  8000 27000 64000]\n\n# 三角函数\n>>> print(np.sin(n7))\n[-0.54402111  0.91294525 -0.98803162  0.74511316]\n\n# 指定轴最大/小值\n>>> print(np.amax(n7, axis=0))\n40\n>>> print(np.amin(n7, axis=0))\n10\n\n# 平均值\n>>> print(np.mean(n7, axis=0))\n25.0\n\n# 中位数\n>>> print(np.median(n7))\n25.0\n\n# 方差\n>>> print(n7.var())\n125.0\n\n# 标准差\n>>> print(np.std(n7, axis=0))\n11.180339887498949\n\n# 差值\n>>> print(\"n7-n8:\",n7-n8)\nn7-n8: [10 19 28 37]\n\n\n# 逐个相乘非矩阵乘法\n>>> n9 = np.asarray([[1,1],[0,1]])\n>>> print(n9)\n[[1 1]\n [0 1]]\n>>> n10=np.arange(4).reshape((2,2))\n>>> print(n10)\n[[0 1]\n [2 3]]\n>>> print(n9 * n10) \n[[0 1]\n [0 3]]\n```\n\n### 矩阵计算\n```python\n# Ax=B 求解x\n>>> A = np.array([[2, 1, -2], [3, 0, 1], [1, 1, -1]])\n>>> B = np.transpose(np.array([[-3, 5, -2]]))\n>>> x = np.linalg.solve(A, B)\n>>> print('x:\\n', x)\nx:\n [[ 1.]\n [-1.]\n [ 2.]]\n\n# 矩阵相乘 C=AB  求解C\n>>> A = np.array([[3, 2, -2], [3, 1, 4], [3, 1, -2]])\n>>> B = np.arange(9).reshape((3,3))\n>>> C = np.dot(A, B)\n>>> print('C:\\n',C)\nC:\n [[-6 -3  0]\n [27 35 43]\n [-9 -7 -5]]\n\n\n# 矩阵乘向量\n>>> v=np.asarray([1,2])\n>>> print(v)\n[1 2]\n>>> A=np.arange(1,5).reshape(2,2)\n>>> print(A)\n[[1 2]\n [3 4]]\n>>> D=v.dot(A)\n>>> print(D)\n[ 7 10]\n# 自动将v转换为列向量，结果有自动转化为行向量\n>>> C=A.dot(v)\n>>> print(C)\n[ 5 11]\n\n\n# 矩阵的逆\n>>> A=np.arange(1,5).reshape(2,2)\n>>> print(A)\n[[1 2]\n [3 4]]\n>>> invA=np.linalg.inv(A)\n>>> print(invA)\n[[-2.   1. ]\n [ 1.5 -0.5]]\n#   矩阵乘以矩阵的逆等于单位矩阵对角线都为1,其他为0，这里有浮点误差\n>>> print(A.dot(invA))\n[[1.00000000e+00 1.11022302e-16]\n [0.00000000e+00 1.00000000e+00]]\n\n# 对于非方阵求伪逆矩阵\n>>> A=np.arange(1,11).reshape(2,5)\n>>> print(A)\n[[ 1  2  3  4  5]\n [ 6  7  8  9 10]]\n>>> pinvA=np.linalg.pinv(A)\n>>> print(pinvA)\n[[-0.36  0.16]\n [-0.2   0.1 ]\n [-0.04  0.04]\n [ 0.12 -0.02]\n [ 0.28 -0.08]]\n>>> print(A.dot(pinvA))\n[[ 1.00000000e+00 -1.11022302e-16]\n [-8.88178420e-16  1.00000000e+00]]\n```\n### 排序与arg\n```python\n>>> x=np.asarray([2,6,7,1,4,5,8,3,10,9])\n>>> print(x)\n[ 2  6  7  1  4  5  8  3 10  9]\n\n# argxxx 索引函数\n>>> print(np.argmax(x)) #最大数的索引为8\n8\n>>> print(np.argmin(x))\n3\n\n# 排序\n>>> print(np.sort(x))\n[ 1  2  3  4  5  6  7  8  9 10]\n\n# x原地排序\n>>> x.sort()\n>>> print(x)\n[ 1  2  3  4  5  6  7  8  9 10]\n\n#打乱顺序\n>>> np.random.shuffle(x)\n>>> print(x)\n[ 9  3  5  6  2  1  8  4  7 10]\n\n# 返回排序索引\n>>> print(np.argsort(x))\n[5 4 1 7 2 3 8 6 0 9]\n\n# 划分大于3和小于3 （快排子过程）\n>>> print(np.partition(x,3))\n[ 2  1  3  4  5  6  8  7  9 10]\n```\n\n### FancyIndexing与np比较\n```python\n>>> x=np.arange(16)\n>>> print(x)\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]\n\n# FancyIndexing\n>>> a=[3,5,8]\n>>> print(x[a])\n[3 5 8]\n\n# np数组比较\n>>> x<3\narray([ True,  True,  True, False, False, False, False, False, False,\n       False, False, False, False, False, False, False])\n\n>>> 2*x==24-4*x\narray([False, False, False, False,  True, False, False, False, False,\n       False, False, False, False, False, False, False])\n\n# 小于等于3的元素Ture/False序列\n>>> i=(x<=3)\n>>> print(i)\n[ True  True  True  True False False False False False False False False\n False False False False]\n>>> print(x[i])\n[0 1 2 3]\n>>> np.sum(i) # 对值Ture累加记数\n4\n\n# 是否含有零元素\n>>> np.any(x==0)\nTrue\n\n# 是否都等于零\n>>> np.all(x==0)\nFalse\n\n# 判断两个数组是否相等\n>>> np.all(x==x)\nTrue\n```\n### 读取数据\n```python\n>>> np.genfromtxt(\"http://aima.cs.berkeley.edu/data/iris.csv\", delimiter=\",\",skip_header=0,dtype=\"f8,f8,f,i4,|S8\")\narray([(5.1, 3.5, 1.4, 0, b'setosa'), (4.9, 3. , 1.4, 0, b'setosa'),\n       (4.7, 3.2, 1.3, 0, b'setosa'), (4.6, 3.1, 1.5, 0, b'setosa'),\n       (5. , 3.6, 1.4, 0, b'setosa'), (5.4, 3.9, 1.7, 0, b'setosa'),\n       (4.6, 3.4, 1.4, 0, b'setosa'), (5. , 3.4, 1.5, 0, b'setosa'),\n       (4.4, 2.9, 1.4, 0, b'setosa'), (4.9, 3.1, 1.5, 0, b'setosa'),\n       (5.4, 3.7, 1.5, 0, b'setosa'), (4.8, 3.4, 1.6, 0, b'setosa'),\n  ......\n  ......\n       (5.8, 2.7, 5.1, 1, b'virginic'), (6.8, 3.2, 5.9, 2, b'virginic'),\n       (6.7, 3.3, 5.7, 2, b'virginic'), (6.7, 3. , 5.2, 2, b'virginic'),\n       (6.3, 2.5, 5. , 1, b'virginic'), (6.5, 3. , 5.2, 2, b'virginic'),\n       (6.2, 3.4, 5.4, 2, b'virginic'), (5.9, 3. , 5.1, 1, b'virginic')],\n      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<f8'), ('f3', '<i4'), ('f4', 'S8')])\n```\n","slug":"机器学习/20181204-机器学习利器之Numpy","published":1,"date":"2018-12-03T16:00:00.000Z","updated":"2021-08-17T18:45:34.769Z","title":"机器学习利器之Numpy","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0s000gnnvbhdcj95mr","content":"<blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1f83105a35a4de31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024\" alt=\"Numpy\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-b627be9af0ff85ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024\" alt=\"多维数组\"></p>\n</blockquote>\n<blockquote>\n<p>PS：机器学习相关代码：<a href=\"https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter\">https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter</a><br>GitHub源码：<a href=\"https://github.com/coderzc/machine_learning\">https://github.com/coderzc/machine_learning</a><br>等有时间整理一下，发出来</p>\n</blockquote>\n<h3 id=\"Numpy-创建N维数组\"><a href=\"#Numpy-创建N维数组\" class=\"headerlink\" title=\"Numpy 创建N维数组\"></a>Numpy 创建N维数组</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 创建10行10列的数值为浮点0的矩阵 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.zeros\\n&quot;</span>, np.zeros([<span class=\"number\">10</span>, <span class=\"number\">10</span>]))</span><br><span class=\"line\">np.zeros</span><br><span class=\"line\"> [[<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 创建10行10列的数值为浮点1的矩阵 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.ones\\n&quot;</span>, np.ones([<span class=\"number\">10</span>, <span class=\"number\">10</span>]))</span><br><span class=\"line\">np.ones</span><br><span class=\"line\"> [[<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 创建10行10列的数值为浮点1的对角矩阵 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.eye\\n&quot;</span>, np.eye(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">np.eye</span><br><span class=\"line\"> [[<span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 从数值范围创建数组 开始，结束，步长，输出元素类型 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.arange\\n&quot;</span>, np.arange(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">2</span>, <span class=\"built_in\">float</span>))</span><br><span class=\"line\">np.arange</span><br><span class=\"line\"> [ <span class=\"number\">0.</span>  <span class=\"number\">2.</span>  <span class=\"number\">4.</span>  <span class=\"number\">6.</span>  <span class=\"number\">8.</span> <span class=\"number\">10.</span> <span class=\"number\">12.</span> <span class=\"number\">14.</span> <span class=\"number\">16.</span> <span class=\"number\">18.</span> <span class=\"number\">20.</span> <span class=\"number\">22.</span> <span class=\"number\">24.</span> <span class=\"number\">26.</span> <span class=\"number\">28.</span> <span class=\"number\">30.</span> <span class=\"number\">32.</span> <span class=\"number\">34.</span></span><br><span class=\"line\"> <span class=\"number\">36.</span> <span class=\"number\">38.</span> <span class=\"number\">40.</span> <span class=\"number\">42.</span> <span class=\"number\">44.</span> <span class=\"number\">46.</span> <span class=\"number\">48.</span> <span class=\"number\">50.</span> <span class=\"number\">52.</span> <span class=\"number\">54.</span> <span class=\"number\">56.</span> <span class=\"number\">58.</span> <span class=\"number\">60.</span> <span class=\"number\">62.</span> <span class=\"number\">64.</span> <span class=\"number\">66.</span> <span class=\"number\">68.</span> <span class=\"number\">70.</span></span><br><span class=\"line\"> <span class=\"number\">72.</span> <span class=\"number\">74.</span> <span class=\"number\">76.</span> <span class=\"number\">78.</span> <span class=\"number\">80.</span> <span class=\"number\">82.</span> <span class=\"number\">84.</span> <span class=\"number\">86.</span> <span class=\"number\">88.</span> <span class=\"number\">90.</span> <span class=\"number\">92.</span> <span class=\"number\">94.</span> <span class=\"number\">96.</span> <span class=\"number\">98.</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;生产随机数组 5行5列 范围0～1&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.rand(<span class=\"number\">5</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0.79909192</span>, <span class=\"number\">0.40687012</span>, <span class=\"number\">0.05833267</span>, <span class=\"number\">0.90631693</span>, <span class=\"number\">0.85774438</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.65685319</span>, <span class=\"number\">0.99620959</span>, <span class=\"number\">0.64195711</span>, <span class=\"number\">0.28694344</span>, <span class=\"number\">0.54805126</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.87347445</span>, <span class=\"number\">0.20443748</span>, <span class=\"number\">0.45883044</span>, <span class=\"number\">0.90017425</span>, <span class=\"number\">0.17487183</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.4833086</span> , <span class=\"number\">0.59498315</span>, <span class=\"number\">0.75053456</span>, <span class=\"number\">0.93725983</span>, <span class=\"number\">0.79870607</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.8908418</span> , <span class=\"number\">0.49860926</span>, <span class=\"number\">0.44097606</span>, <span class=\"number\">0.53744394</span>, <span class=\"number\">0.21089092</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 生成在半开半闭区间 [low,high)上离散均匀分布的整数值;若high=None，则取值区间变为[0,low) ; size维度 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.randint(<span class=\"number\">4</span>,<span class=\"number\">10</span>,size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">array([[<span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">       [<span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">       [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 给定均值/标准差/维度的正态分布 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.normal(<span class=\"number\">1.75</span>, <span class=\"number\">0.1</span>, (<span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">array([[<span class=\"number\">1.83246388</span>, <span class=\"number\">1.73186179</span>, <span class=\"number\">1.78198763</span>, <span class=\"number\">1.76844117</span>],</span><br><span class=\"line\">       [<span class=\"number\">1.69089184</span>, <span class=\"number\">1.69620751</span>, <span class=\"number\">1.78018062</span>, <span class=\"number\">1.68086896</span>],</span><br><span class=\"line\">       [<span class=\"number\">1.86462936</span>, <span class=\"number\">1.61972878</span>, <span class=\"number\">1.95645574</span>, <span class=\"number\">1.66104741</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 将列表转换为np数组 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np_array = np.array(array, dtype=<span class=\"built_in\">float</span>)  <span class=\"comment\"># copy,新数组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.array:\\n&quot;</span>, np_array)</span><br><span class=\"line\">np.array:</span><br><span class=\"line\"> [[ <span class=\"number\">1.</span>  <span class=\"number\">2.</span>  <span class=\"number\">3.</span>  <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5.</span>  <span class=\"number\">6.</span>  <span class=\"number\">7.</span>  <span class=\"number\">8.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9.</span> <span class=\"number\">10.</span> <span class=\"number\">11.</span> <span class=\"number\">12.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np_array2 = np.asarray(array, dtype=<span class=\"built_in\">float</span>)  <span class=\"comment\"># view,会改变原数组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.asarray:\\n&quot;</span>, np_array2)</span><br><span class=\"line\">np.asarray:</span><br><span class=\"line\"> [[ <span class=\"number\">1.</span>  <span class=\"number\">2.</span>  <span class=\"number\">3.</span>  <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5.</span>  <span class=\"number\">6.</span>  <span class=\"number\">7.</span>  <span class=\"number\">8.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9.</span> <span class=\"number\">10.</span> <span class=\"number\">11.</span> <span class=\"number\">12.</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看数组属性\"><a href=\"#查看数组属性\" class=\"headerlink\" title=\"查看数组属性\"></a>查看数组属性</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组元素个数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组元素个数 size:&quot;</span>, np_array.size)</span><br><span class=\"line\">数组元素个数 size: <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"comment\"># 数组形状</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组形状 shape:&quot;</span>, np_array.shape)</span><br><span class=\"line\">数组形状 shape: (<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 数组维度</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组维度 ndim:&quot;</span>, np_array.ndim)</span><br><span class=\"line\">数组维度 ndim: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 数组元素类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组元素类型 dtype:&quot;</span>, np_array.dtype)</span><br><span class=\"line\">数组元素类型 dtype: float64</span><br><span class=\"line\"><span class=\"comment\"># 数组中每个元素的字节大小</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组元素类型 itemsize:&quot;</span>, np_array.itemsize)</span><br><span class=\"line\">数组元素类型 itemsize: <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"shape操作\"><a href=\"#shape操作\" class=\"headerlink\" title=\"shape操作\"></a>shape操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n1 = np.asarray(array)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变数组的格式</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n2 = n1.reshape(<span class=\"number\">6</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n1)</span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n2)</span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>]</span><br><span class=\"line\"> [ <span class=\"number\">3</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5</span>  <span class=\"number\">6</span>]</span><br><span class=\"line\"> [ <span class=\"number\">7</span>  <span class=\"number\">8</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"> [<span class=\"number\">11</span> <span class=\"number\">12</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将多维降到1维展开</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;flatten():&quot;</span>, n2.flatten())  <span class=\"comment\"># copy,新数组</span></span><br><span class=\"line\">flatten(): [ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;ravel():&quot;</span>, n2.ravel())  <span class=\"comment\"># view，会改变原数组,却不会改变shape</span></span><br><span class=\"line\">ravel(): [ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转置</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n3 = np.arange(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n3 = n3.reshape(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n3:&quot;</span>, n3)</span><br><span class=\"line\">n3: [[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>]</span><br><span class=\"line\"> [ <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>]</span><br><span class=\"line\"> [ <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n3.T:&quot;</span>, n3.T)</span><br><span class=\"line\">n3.T: [[ <span class=\"number\">0</span>  <span class=\"number\">4</span>  <span class=\"number\">8</span>]</span><br><span class=\"line\"> [ <span class=\"number\">1</span>  <span class=\"number\">5</span>  <span class=\"number\">9</span>]</span><br><span class=\"line\"> [ <span class=\"number\">2</span>  <span class=\"number\">6</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"> [ <span class=\"number\">3</span>  <span class=\"number\">7</span> <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># reshape一些特殊值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n4 = np.arange(<span class=\"number\">10</span>, <span class=\"number\">130</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n4:&quot;</span>, n4.reshape(<span class=\"number\">4</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">n4: [[ <span class=\"number\">10</span>  <span class=\"number\">20</span>  <span class=\"number\">30</span>]</span><br><span class=\"line\"> [ <span class=\"number\">40</span>  <span class=\"number\">50</span>  <span class=\"number\">60</span>]</span><br><span class=\"line\"> [ <span class=\"number\">70</span>  <span class=\"number\">80</span>  <span class=\"number\">90</span>]</span><br><span class=\"line\"> [<span class=\"number\">100</span> <span class=\"number\">110</span> <span class=\"number\">120</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   -1 一维展开 与 ravel()作用相似</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n4.reshape(-<span class=\"number\">1</span>))</span><br><span class=\"line\">[ <span class=\"number\">10</span>  <span class=\"number\">20</span>  <span class=\"number\">30</span>  <span class=\"number\">40</span>  <span class=\"number\">50</span>  <span class=\"number\">60</span>  <span class=\"number\">70</span>  <span class=\"number\">80</span>  <span class=\"number\">90</span> <span class=\"number\">100</span> <span class=\"number\">110</span> <span class=\"number\">120</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   (-1,1) n行，1列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n4.reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">[[ <span class=\"number\">10</span>]</span><br><span class=\"line\"> [ <span class=\"number\">20</span>]</span><br><span class=\"line\"> [ <span class=\"number\">30</span>]</span><br><span class=\"line\"> [ <span class=\"number\">40</span>]</span><br><span class=\"line\"> [ <span class=\"number\">50</span>]</span><br><span class=\"line\"> [ <span class=\"number\">60</span>]</span><br><span class=\"line\"> [ <span class=\"number\">70</span>]</span><br><span class=\"line\"> [ <span class=\"number\">80</span>]</span><br><span class=\"line\"> [ <span class=\"number\">90</span>]</span><br><span class=\"line\"> [<span class=\"number\">100</span>]</span><br><span class=\"line\"> [<span class=\"number\">110</span>]</span><br><span class=\"line\"> [<span class=\"number\">120</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   (1,-1) 1行，n列但任然是二维矩阵</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n4.reshape(<span class=\"number\">1</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">[[ <span class=\"number\">10</span>  <span class=\"number\">20</span>  <span class=\"number\">30</span>  <span class=\"number\">40</span>  <span class=\"number\">50</span>  <span class=\"number\">60</span>  <span class=\"number\">70</span>  <span class=\"number\">80</span>  <span class=\"number\">90</span> <span class=\"number\">100</span> <span class=\"number\">110</span> <span class=\"number\">120</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组索引和迭代\"><a href=\"#数组索引和迭代\" class=\"headerlink\" title=\"数组索引和迭代\"></a>数组索引和迭代</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n5 = np.arange(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n5:&#x27;</span>, n5)</span><br><span class=\"line\">n5: [ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span></span><br><span class=\"line\"> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取倒数第一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"number\">29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取前十个数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[:<span class=\"number\">10</span>])</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取后十个数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[-<span class=\"number\">10</span>:])</span><br><span class=\"line\">[<span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取前11-20个数，左闭右开</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[<span class=\"number\">10</span>:<span class=\"number\">20</span>])</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前十个数中，每2个数取一个</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[:<span class=\"number\">10</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">6</span> <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第6-15个数中，每3个数取一个</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[<span class=\"number\">5</span>:<span class=\"number\">15</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">[ <span class=\"number\">5</span>  <span class=\"number\">8</span> <span class=\"number\">11</span> <span class=\"number\">14</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有的数中，每10个数取一个</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[::<span class=\"number\">10</span>])</span><br><span class=\"line\">[ <span class=\"number\">0</span> <span class=\"number\">10</span> <span class=\"number\">20</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 什么都不写，可以原样复制一个数组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[:])</span><br><span class=\"line\">[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span></span><br><span class=\"line\"> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############### 多维数组索引与切片 ###############</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n6 = n5.reshape(<span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6:&#x27;</span>, n6)</span><br><span class=\"line\">n6: [[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>]</span><br><span class=\"line\"> [ <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   索引第二行第三列的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[1, 2]:&#x27;</span>, n6[<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">n6[<span class=\"number\">1</span>, <span class=\"number\">2</span>]: <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   在第一维取前两行，第二维每+2取一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[:2, ::2]:\\n&#x27;</span>, n6[:<span class=\"number\">2</span>, ::<span class=\"number\">2</span>])</span><br><span class=\"line\">n6[:<span class=\"number\">2</span>, ::<span class=\"number\">2</span>]:</span><br><span class=\"line\"> [[ <span class=\"number\">0</span>  <span class=\"number\">2</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">6</span>  <span class=\"number\">8</span> <span class=\"number\">10</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取第一列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[:, 0]]:\\n&#x27;</span>, n6[:, <span class=\"number\">0</span>])</span><br><span class=\"line\">n6[:, <span class=\"number\">0</span>]]:</span><br><span class=\"line\"> [ <span class=\"number\">0</span>  <span class=\"number\">6</span> <span class=\"number\">12</span> <span class=\"number\">18</span> <span class=\"number\">24</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取第2、3列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[:, 3:5]]:\\n&#x27;</span>, n6[:, <span class=\"number\">3</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">n6[:, <span class=\"number\">3</span>:<span class=\"number\">5</span>]]:</span><br><span class=\"line\"> [[ <span class=\"number\">3</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"> [<span class=\"number\">15</span> <span class=\"number\">16</span>]</span><br><span class=\"line\"> [<span class=\"number\">21</span> <span class=\"number\">22</span>]</span><br><span class=\"line\"> [<span class=\"number\">27</span> <span class=\"number\">28</span>]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"拼接、分割\"><a href=\"#拼接、分割\" class=\"headerlink\" title=\"拼接、分割\"></a>拼接、分割</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">10</span>,<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[<span class=\"number\">10</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span>]</span><br><span class=\"line\"> [<span class=\"number\">14</span> <span class=\"number\">15</span>]</span><br><span class=\"line\"> [<span class=\"number\">16</span> <span class=\"number\">17</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B=np.arange(<span class=\"number\">20</span>,<span class=\"number\">30</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(B)</span><br><span class=\"line\">[[<span class=\"number\">20</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> [<span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">24</span> <span class=\"number\">25</span>]</span><br><span class=\"line\"> [<span class=\"number\">26</span> <span class=\"number\">27</span>]</span><br><span class=\"line\"> [<span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 垂直拼接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C=np.vstack([A,B]) <span class=\"comment\">#C=np.r_[A,B]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">[[<span class=\"number\">10</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span>]</span><br><span class=\"line\"> [<span class=\"number\">14</span> <span class=\"number\">15</span>]</span><br><span class=\"line\"> [<span class=\"number\">16</span> <span class=\"number\">17</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\"> [<span class=\"number\">20</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> [<span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">24</span> <span class=\"number\">25</span>]</span><br><span class=\"line\"> [<span class=\"number\">26</span> <span class=\"number\">27</span>]</span><br><span class=\"line\"> [<span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自我堆叠</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v=np.asarray([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=np.vstack([v]*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">1</span> <span class=\"number\">2</span>]]</span><br><span class=\"line\"><span class=\"comment\"># 横向堆叠两次，纵向堆叠一次</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=np.tile(v,(<span class=\"number\">2</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">1</span> <span class=\"number\">2</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 水平拼接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C=np.hstack([A,B]) <span class=\"comment\">#C=np.c_[A,B]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">[[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">20</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">24</span> <span class=\"number\">25</span>]</span><br><span class=\"line\"> [<span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">26</span> <span class=\"number\">27</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列组合column_stack([A,B]) 一维数组：按列方向组合  二维数组：同hstack一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\"><span class=\"comment\">#行组合row_stack([A,B]) 一维数组：按行方向组合  二维数组：同vstack一样</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"基础运算\"><a href=\"#基础运算\" class=\"headerlink\" title=\"基础运算\"></a>基础运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n7 = np.asarray([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>,<span class=\"number\">40</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n8 = np.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n7)</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">30</span> <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n8)</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算立方</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n7**<span class=\"number\">3</span>)</span><br><span class=\"line\">[ <span class=\"number\">1000</span>  <span class=\"number\">8000</span> <span class=\"number\">27000</span> <span class=\"number\">64000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三角函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.sin(n7))</span><br><span class=\"line\">[-<span class=\"number\">0.54402111</span>  <span class=\"number\">0.91294525</span> -<span class=\"number\">0.98803162</span>  <span class=\"number\">0.74511316</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定轴最大/小值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.amax(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.amin(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 平均值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.mean(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">25.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中位数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.median(n7))</span><br><span class=\"line\"><span class=\"number\">25.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方差</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n7.var())</span><br><span class=\"line\"><span class=\"number\">125.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标准差</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.std(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">11.180339887498949</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 差值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n7-n8:&quot;</span>,n7-n8)</span><br><span class=\"line\">n7-n8: [<span class=\"number\">10</span> <span class=\"number\">19</span> <span class=\"number\">28</span> <span class=\"number\">37</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐个相乘非矩阵乘法</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n9 = np.asarray([[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n9)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">0</span> <span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n10=np.arange(<span class=\"number\">4</span>).reshape((<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n10)</span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n9 * n10) </span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">0</span> <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵计算\"><a href=\"#矩阵计算\" class=\"headerlink\" title=\"矩阵计算\"></a>矩阵计算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ax=B 求解x</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array([[<span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.transpose(np.array([[-<span class=\"number\">3</span>, <span class=\"number\">5</span>, -<span class=\"number\">2</span>]]))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = np.linalg.solve(A, B)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x:\\n&#x27;</span>, x)</span><br><span class=\"line\">x:</span><br><span class=\"line\"> [[ <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [-<span class=\"number\">1.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">2.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵相乘 C=AB  求解C</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array([[<span class=\"number\">3</span>, <span class=\"number\">2</span>, -<span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">1</span>, -<span class=\"number\">2</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C = np.dot(A, B)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;C:\\n&#x27;</span>,C)</span><br><span class=\"line\">C:</span><br><span class=\"line\"> [[-<span class=\"number\">6</span> -<span class=\"number\">3</span>  <span class=\"number\">0</span>]</span><br><span class=\"line\"> [<span class=\"number\">27</span> <span class=\"number\">35</span> <span class=\"number\">43</span>]</span><br><span class=\"line\"> [-<span class=\"number\">9</span> -<span class=\"number\">7</span> -<span class=\"number\">5</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘向量</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v=np.asarray([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(v)</span><br><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">1</span>,<span class=\"number\">5</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>D=v.dot(A)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(D)</span><br><span class=\"line\">[ <span class=\"number\">7</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\"># 自动将v转换为列向量，结果有自动转化为行向量</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C=A.dot(v)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">[ <span class=\"number\">5</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵的逆</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">1</span>,<span class=\"number\">5</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>invA=np.linalg.inv(A)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(invA)</span><br><span class=\"line\">[[-<span class=\"number\">2.</span>   <span class=\"number\">1.</span> ]</span><br><span class=\"line\"> [ <span class=\"number\">1.5</span> -<span class=\"number\">0.5</span>]]</span><br><span class=\"line\"><span class=\"comment\">#   矩阵乘以矩阵的逆等于单位矩阵对角线都为1,其他为0，这里有浮点误差</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.dot(invA))</span><br><span class=\"line\">[[<span class=\"number\">1.00000000e+00</span> <span class=\"number\">1.11022302e-16</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.00000000e+00</span> <span class=\"number\">1.00000000e+00</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对于非方阵求伪逆矩阵</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">1</span>,<span class=\"number\">11</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>]</span><br><span class=\"line\"> [ <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pinvA=np.linalg.pinv(A)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(pinvA)</span><br><span class=\"line\">[[-<span class=\"number\">0.36</span>  <span class=\"number\">0.16</span>]</span><br><span class=\"line\"> [-<span class=\"number\">0.2</span>   <span class=\"number\">0.1</span> ]</span><br><span class=\"line\"> [-<span class=\"number\">0.04</span>  <span class=\"number\">0.04</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.12</span> -<span class=\"number\">0.02</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.28</span> -<span class=\"number\">0.08</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.dot(pinvA))</span><br><span class=\"line\">[[ <span class=\"number\">1.00000000e+00</span> -<span class=\"number\">1.11022302e-16</span>]</span><br><span class=\"line\"> [-<span class=\"number\">8.88178420e-16</span>  <span class=\"number\">1.00000000e+00</span>]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"排序与arg\"><a href=\"#排序与arg\" class=\"headerlink\" title=\"排序与arg\"></a>排序与arg</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x=np.asarray([<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">2</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">1</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">8</span>  <span class=\"number\">3</span> <span class=\"number\">10</span>  <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># argxxx 索引函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.argmax(x)) <span class=\"comment\">#最大数的索引为8</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.argmin(x))</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.sort(x))</span><br><span class=\"line\">[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># x原地排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x.sort()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#打乱顺序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.shuffle(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">9</span>  <span class=\"number\">3</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">2</span>  <span class=\"number\">1</span>  <span class=\"number\">8</span>  <span class=\"number\">4</span>  <span class=\"number\">7</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回排序索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.argsort(x))</span><br><span class=\"line\">[<span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">1</span> <span class=\"number\">7</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">8</span> <span class=\"number\">6</span> <span class=\"number\">0</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 划分大于3和小于3 （快排子过程）</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.partition(x,<span class=\"number\">3</span>))</span><br><span class=\"line\">[ <span class=\"number\">2</span>  <span class=\"number\">1</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">8</span>  <span class=\"number\">7</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FancyIndexing与np比较\"><a href=\"#FancyIndexing与np比较\" class=\"headerlink\" title=\"FancyIndexing与np比较\"></a>FancyIndexing与np比较</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x=np.arange(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># FancyIndexing</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=[<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x[a])</span><br><span class=\"line\">[<span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># np数组比较</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x&lt;<span class=\"number\">3</span></span><br><span class=\"line\">array([ <span class=\"literal\">True</span>,  <span class=\"literal\">True</span>,  <span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>,</span><br><span class=\"line\">       <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span>*x==<span class=\"number\">24</span>-<span class=\"number\">4</span>*x</span><br><span class=\"line\">array([<span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>,  <span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>,</span><br><span class=\"line\">       <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 小于等于3的元素Ture/False序列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>i=(x&lt;=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">[ <span class=\"literal\">True</span>  <span class=\"literal\">True</span>  <span class=\"literal\">True</span>  <span class=\"literal\">True</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span></span><br><span class=\"line\"> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x[i])</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">sum</span>(i) <span class=\"comment\"># 对值Ture累加记数</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否含有零元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">any</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否都等于零</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">all</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断两个数组是否相等</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">all</span>(x==x)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.genfromtxt(<span class=\"string\">&quot;http://aima.cs.berkeley.edu/data/iris.csv&quot;</span>, delimiter=<span class=\"string\">&quot;,&quot;</span>,skip_header=<span class=\"number\">0</span>,dtype=<span class=\"string\">&quot;f8,f8,f,i4,|S8&quot;</span>)</span><br><span class=\"line\">array([(<span class=\"number\">5.1</span>, <span class=\"number\">3.5</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.9</span>, <span class=\"number\">3.</span> , <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">4.7</span>, <span class=\"number\">3.2</span>, <span class=\"number\">1.3</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">5.</span> , <span class=\"number\">3.6</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">5.4</span>, <span class=\"number\">3.9</span>, <span class=\"number\">1.7</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">4.6</span>, <span class=\"number\">3.4</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">5.</span> , <span class=\"number\">3.4</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">4.4</span>, <span class=\"number\">2.9</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.9</span>, <span class=\"number\">3.1</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">5.4</span>, <span class=\"number\">3.7</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.8</span>, <span class=\"number\">3.4</span>, <span class=\"number\">1.6</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  ......</span><br><span class=\"line\">       (<span class=\"number\">5.8</span>, <span class=\"number\">2.7</span>, <span class=\"number\">5.1</span>, <span class=\"number\">1</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">6.8</span>, <span class=\"number\">3.2</span>, <span class=\"number\">5.9</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">6.7</span>, <span class=\"number\">3.3</span>, <span class=\"number\">5.7</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">6.7</span>, <span class=\"number\">3.</span> , <span class=\"number\">5.2</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">6.3</span>, <span class=\"number\">2.5</span>, <span class=\"number\">5.</span> , <span class=\"number\">1</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">6.5</span>, <span class=\"number\">3.</span> , <span class=\"number\">5.2</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">6.2</span>, <span class=\"number\">3.4</span>, <span class=\"number\">5.4</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">5.9</span>, <span class=\"number\">3.</span> , <span class=\"number\">5.1</span>, <span class=\"number\">1</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>)],</span><br><span class=\"line\">      dtype=[(<span class=\"string\">&#x27;f0&#x27;</span>, <span class=\"string\">&#x27;&lt;f8&#x27;</span>), (<span class=\"string\">&#x27;f1&#x27;</span>, <span class=\"string\">&#x27;&lt;f8&#x27;</span>), (<span class=\"string\">&#x27;f2&#x27;</span>, <span class=\"string\">&#x27;&lt;f8&#x27;</span>), (<span class=\"string\">&#x27;f3&#x27;</span>, <span class=\"string\">&#x27;&lt;i4&#x27;</span>), (<span class=\"string\">&#x27;f4&#x27;</span>, <span class=\"string\">&#x27;S8&#x27;</span>)])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"2YN1BBW","excerpt":"PS：机器学习相关代码：https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter\nGitHub源码：https://github.com/coderzc/machine_learning\n等有时间整理一下，发出来\n\nNumpy 创建N维数组\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n4","more":"<blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1f83105a35a4de31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024\" alt=\"Numpy\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-b627be9af0ff85ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024\" alt=\"多维数组\"></p>\n</blockquote>\n<blockquote>\n<p>PS：机器学习相关代码：<a href=\"https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter\">https://nbviewer.jupyter.org/github/coderzc/machine_learning/tree/master/jupyter</a><br>GitHub源码：<a href=\"https://github.com/coderzc/machine_learning\">https://github.com/coderzc/machine_learning</a><br>等有时间整理一下，发出来</p>\n</blockquote>\n<h3 id=\"Numpy-创建N维数组\"><a href=\"#Numpy-创建N维数组\" class=\"headerlink\" title=\"Numpy 创建N维数组\"></a>Numpy 创建N维数组</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 创建10行10列的数值为浮点0的矩阵 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.zeros\\n&quot;</span>, np.zeros([<span class=\"number\">10</span>, <span class=\"number\">10</span>]))</span><br><span class=\"line\">np.zeros</span><br><span class=\"line\"> [[<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 创建10行10列的数值为浮点1的矩阵 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.ones\\n&quot;</span>, np.ones([<span class=\"number\">10</span>, <span class=\"number\">10</span>]))</span><br><span class=\"line\">np.ones</span><br><span class=\"line\"> [[<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 创建10行10列的数值为浮点1的对角矩阵 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.eye\\n&quot;</span>, np.eye(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">np.eye</span><br><span class=\"line\"> [[<span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span> <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">0.</span> <span class=\"number\">1.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 从数值范围创建数组 开始，结束，步长，输出元素类型 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.arange\\n&quot;</span>, np.arange(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">2</span>, <span class=\"built_in\">float</span>))</span><br><span class=\"line\">np.arange</span><br><span class=\"line\"> [ <span class=\"number\">0.</span>  <span class=\"number\">2.</span>  <span class=\"number\">4.</span>  <span class=\"number\">6.</span>  <span class=\"number\">8.</span> <span class=\"number\">10.</span> <span class=\"number\">12.</span> <span class=\"number\">14.</span> <span class=\"number\">16.</span> <span class=\"number\">18.</span> <span class=\"number\">20.</span> <span class=\"number\">22.</span> <span class=\"number\">24.</span> <span class=\"number\">26.</span> <span class=\"number\">28.</span> <span class=\"number\">30.</span> <span class=\"number\">32.</span> <span class=\"number\">34.</span></span><br><span class=\"line\"> <span class=\"number\">36.</span> <span class=\"number\">38.</span> <span class=\"number\">40.</span> <span class=\"number\">42.</span> <span class=\"number\">44.</span> <span class=\"number\">46.</span> <span class=\"number\">48.</span> <span class=\"number\">50.</span> <span class=\"number\">52.</span> <span class=\"number\">54.</span> <span class=\"number\">56.</span> <span class=\"number\">58.</span> <span class=\"number\">60.</span> <span class=\"number\">62.</span> <span class=\"number\">64.</span> <span class=\"number\">66.</span> <span class=\"number\">68.</span> <span class=\"number\">70.</span></span><br><span class=\"line\"> <span class=\"number\">72.</span> <span class=\"number\">74.</span> <span class=\"number\">76.</span> <span class=\"number\">78.</span> <span class=\"number\">80.</span> <span class=\"number\">82.</span> <span class=\"number\">84.</span> <span class=\"number\">86.</span> <span class=\"number\">88.</span> <span class=\"number\">90.</span> <span class=\"number\">92.</span> <span class=\"number\">94.</span> <span class=\"number\">96.</span> <span class=\"number\">98.</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;生产随机数组 5行5列 范围0～1&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.rand(<span class=\"number\">5</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">array([[<span class=\"number\">0.79909192</span>, <span class=\"number\">0.40687012</span>, <span class=\"number\">0.05833267</span>, <span class=\"number\">0.90631693</span>, <span class=\"number\">0.85774438</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.65685319</span>, <span class=\"number\">0.99620959</span>, <span class=\"number\">0.64195711</span>, <span class=\"number\">0.28694344</span>, <span class=\"number\">0.54805126</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.87347445</span>, <span class=\"number\">0.20443748</span>, <span class=\"number\">0.45883044</span>, <span class=\"number\">0.90017425</span>, <span class=\"number\">0.17487183</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.4833086</span> , <span class=\"number\">0.59498315</span>, <span class=\"number\">0.75053456</span>, <span class=\"number\">0.93725983</span>, <span class=\"number\">0.79870607</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.8908418</span> , <span class=\"number\">0.49860926</span>, <span class=\"number\">0.44097606</span>, <span class=\"number\">0.53744394</span>, <span class=\"number\">0.21089092</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 生成在半开半闭区间 [low,high)上离散均匀分布的整数值;若high=None，则取值区间变为[0,low) ; size维度 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.randint(<span class=\"number\">4</span>,<span class=\"number\">10</span>,size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">array([[<span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>],</span><br><span class=\"line\">       [<span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">       [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">       [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 给定均值/标准差/维度的正态分布 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.normal(<span class=\"number\">1.75</span>, <span class=\"number\">0.1</span>, (<span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">array([[<span class=\"number\">1.83246388</span>, <span class=\"number\">1.73186179</span>, <span class=\"number\">1.78198763</span>, <span class=\"number\">1.76844117</span>],</span><br><span class=\"line\">       [<span class=\"number\">1.69089184</span>, <span class=\"number\">1.69620751</span>, <span class=\"number\">1.78018062</span>, <span class=\"number\">1.68086896</span>],</span><br><span class=\"line\">       [<span class=\"number\">1.86462936</span>, <span class=\"number\">1.61972878</span>, <span class=\"number\">1.95645574</span>, <span class=\"number\">1.66104741</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; 将列表转换为np数组 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np_array = np.array(array, dtype=<span class=\"built_in\">float</span>)  <span class=\"comment\"># copy,新数组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.array:\\n&quot;</span>, np_array)</span><br><span class=\"line\">np.array:</span><br><span class=\"line\"> [[ <span class=\"number\">1.</span>  <span class=\"number\">2.</span>  <span class=\"number\">3.</span>  <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5.</span>  <span class=\"number\">6.</span>  <span class=\"number\">7.</span>  <span class=\"number\">8.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9.</span> <span class=\"number\">10.</span> <span class=\"number\">11.</span> <span class=\"number\">12.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np_array2 = np.asarray(array, dtype=<span class=\"built_in\">float</span>)  <span class=\"comment\"># view,会改变原数组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;np.asarray:\\n&quot;</span>, np_array2)</span><br><span class=\"line\">np.asarray:</span><br><span class=\"line\"> [[ <span class=\"number\">1.</span>  <span class=\"number\">2.</span>  <span class=\"number\">3.</span>  <span class=\"number\">4.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5.</span>  <span class=\"number\">6.</span>  <span class=\"number\">7.</span>  <span class=\"number\">8.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9.</span> <span class=\"number\">10.</span> <span class=\"number\">11.</span> <span class=\"number\">12.</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看数组属性\"><a href=\"#查看数组属性\" class=\"headerlink\" title=\"查看数组属性\"></a>查看数组属性</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组元素个数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组元素个数 size:&quot;</span>, np_array.size)</span><br><span class=\"line\">数组元素个数 size: <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"comment\"># 数组形状</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组形状 shape:&quot;</span>, np_array.shape)</span><br><span class=\"line\">数组形状 shape: (<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 数组维度</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组维度 ndim:&quot;</span>, np_array.ndim)</span><br><span class=\"line\">数组维度 ndim: <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 数组元素类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组元素类型 dtype:&quot;</span>, np_array.dtype)</span><br><span class=\"line\">数组元素类型 dtype: float64</span><br><span class=\"line\"><span class=\"comment\"># 数组中每个元素的字节大小</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数组元素类型 itemsize:&quot;</span>, np_array.itemsize)</span><br><span class=\"line\">数组元素类型 itemsize: <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"shape操作\"><a href=\"#shape操作\" class=\"headerlink\" title=\"shape操作\"></a>shape操作</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n1 = np.asarray(array)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变数组的格式</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n2 = n1.reshape(<span class=\"number\">6</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n1)</span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n2)</span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>]</span><br><span class=\"line\"> [ <span class=\"number\">3</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5</span>  <span class=\"number\">6</span>]</span><br><span class=\"line\"> [ <span class=\"number\">7</span>  <span class=\"number\">8</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"> [<span class=\"number\">11</span> <span class=\"number\">12</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将多维降到1维展开</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;flatten():&quot;</span>, n2.flatten())  <span class=\"comment\"># copy,新数组</span></span><br><span class=\"line\">flatten(): [ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;ravel():&quot;</span>, n2.ravel())  <span class=\"comment\"># view，会改变原数组,却不会改变shape</span></span><br><span class=\"line\">ravel(): [ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转置</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n3 = np.arange(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n3 = n3.reshape(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n3:&quot;</span>, n3)</span><br><span class=\"line\">n3: [[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>]</span><br><span class=\"line\"> [ <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>]</span><br><span class=\"line\"> [ <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n3.T:&quot;</span>, n3.T)</span><br><span class=\"line\">n3.T: [[ <span class=\"number\">0</span>  <span class=\"number\">4</span>  <span class=\"number\">8</span>]</span><br><span class=\"line\"> [ <span class=\"number\">1</span>  <span class=\"number\">5</span>  <span class=\"number\">9</span>]</span><br><span class=\"line\"> [ <span class=\"number\">2</span>  <span class=\"number\">6</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"> [ <span class=\"number\">3</span>  <span class=\"number\">7</span> <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># reshape一些特殊值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n4 = np.arange(<span class=\"number\">10</span>, <span class=\"number\">130</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n4:&quot;</span>, n4.reshape(<span class=\"number\">4</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">n4: [[ <span class=\"number\">10</span>  <span class=\"number\">20</span>  <span class=\"number\">30</span>]</span><br><span class=\"line\"> [ <span class=\"number\">40</span>  <span class=\"number\">50</span>  <span class=\"number\">60</span>]</span><br><span class=\"line\"> [ <span class=\"number\">70</span>  <span class=\"number\">80</span>  <span class=\"number\">90</span>]</span><br><span class=\"line\"> [<span class=\"number\">100</span> <span class=\"number\">110</span> <span class=\"number\">120</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   -1 一维展开 与 ravel()作用相似</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n4.reshape(-<span class=\"number\">1</span>))</span><br><span class=\"line\">[ <span class=\"number\">10</span>  <span class=\"number\">20</span>  <span class=\"number\">30</span>  <span class=\"number\">40</span>  <span class=\"number\">50</span>  <span class=\"number\">60</span>  <span class=\"number\">70</span>  <span class=\"number\">80</span>  <span class=\"number\">90</span> <span class=\"number\">100</span> <span class=\"number\">110</span> <span class=\"number\">120</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   (-1,1) n行，1列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n4.reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">[[ <span class=\"number\">10</span>]</span><br><span class=\"line\"> [ <span class=\"number\">20</span>]</span><br><span class=\"line\"> [ <span class=\"number\">30</span>]</span><br><span class=\"line\"> [ <span class=\"number\">40</span>]</span><br><span class=\"line\"> [ <span class=\"number\">50</span>]</span><br><span class=\"line\"> [ <span class=\"number\">60</span>]</span><br><span class=\"line\"> [ <span class=\"number\">70</span>]</span><br><span class=\"line\"> [ <span class=\"number\">80</span>]</span><br><span class=\"line\"> [ <span class=\"number\">90</span>]</span><br><span class=\"line\"> [<span class=\"number\">100</span>]</span><br><span class=\"line\"> [<span class=\"number\">110</span>]</span><br><span class=\"line\"> [<span class=\"number\">120</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   (1,-1) 1行，n列但任然是二维矩阵</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n4.reshape(<span class=\"number\">1</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">[[ <span class=\"number\">10</span>  <span class=\"number\">20</span>  <span class=\"number\">30</span>  <span class=\"number\">40</span>  <span class=\"number\">50</span>  <span class=\"number\">60</span>  <span class=\"number\">70</span>  <span class=\"number\">80</span>  <span class=\"number\">90</span> <span class=\"number\">100</span> <span class=\"number\">110</span> <span class=\"number\">120</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组索引和迭代\"><a href=\"#数组索引和迭代\" class=\"headerlink\" title=\"数组索引和迭代\"></a>数组索引和迭代</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n5 = np.arange(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n5:&#x27;</span>, n5)</span><br><span class=\"line\">n5: [ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span></span><br><span class=\"line\"> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取倒数第一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"number\">29</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取前十个数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[:<span class=\"number\">10</span>])</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取后十个数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[-<span class=\"number\">10</span>:])</span><br><span class=\"line\">[<span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取前11-20个数，左闭右开</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[<span class=\"number\">10</span>:<span class=\"number\">20</span>])</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前十个数中，每2个数取一个</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[:<span class=\"number\">10</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">6</span> <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第6-15个数中，每3个数取一个</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[<span class=\"number\">5</span>:<span class=\"number\">15</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">[ <span class=\"number\">5</span>  <span class=\"number\">8</span> <span class=\"number\">11</span> <span class=\"number\">14</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有的数中，每10个数取一个</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[::<span class=\"number\">10</span>])</span><br><span class=\"line\">[ <span class=\"number\">0</span> <span class=\"number\">10</span> <span class=\"number\">20</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 什么都不写，可以原样复制一个数组</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n5[:])</span><br><span class=\"line\">[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span></span><br><span class=\"line\"> <span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############### 多维数组索引与切片 ###############</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n6 = n5.reshape(<span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6:&#x27;</span>, n6)</span><br><span class=\"line\">n6: [[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>]</span><br><span class=\"line\"> [ <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">24</span> <span class=\"number\">25</span> <span class=\"number\">26</span> <span class=\"number\">27</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   索引第二行第三列的元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[1, 2]:&#x27;</span>, n6[<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">n6[<span class=\"number\">1</span>, <span class=\"number\">2</span>]: <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#   在第一维取前两行，第二维每+2取一个元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[:2, ::2]:\\n&#x27;</span>, n6[:<span class=\"number\">2</span>, ::<span class=\"number\">2</span>])</span><br><span class=\"line\">n6[:<span class=\"number\">2</span>, ::<span class=\"number\">2</span>]:</span><br><span class=\"line\"> [[ <span class=\"number\">0</span>  <span class=\"number\">2</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">6</span>  <span class=\"number\">8</span> <span class=\"number\">10</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取第一列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[:, 0]]:\\n&#x27;</span>, n6[:, <span class=\"number\">0</span>])</span><br><span class=\"line\">n6[:, <span class=\"number\">0</span>]]:</span><br><span class=\"line\"> [ <span class=\"number\">0</span>  <span class=\"number\">6</span> <span class=\"number\">12</span> <span class=\"number\">18</span> <span class=\"number\">24</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取第2、3列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n6[:, 3:5]]:\\n&#x27;</span>, n6[:, <span class=\"number\">3</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">n6[:, <span class=\"number\">3</span>:<span class=\"number\">5</span>]]:</span><br><span class=\"line\"> [[ <span class=\"number\">3</span>  <span class=\"number\">4</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"> [<span class=\"number\">15</span> <span class=\"number\">16</span>]</span><br><span class=\"line\"> [<span class=\"number\">21</span> <span class=\"number\">22</span>]</span><br><span class=\"line\"> [<span class=\"number\">27</span> <span class=\"number\">28</span>]]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"拼接、分割\"><a href=\"#拼接、分割\" class=\"headerlink\" title=\"拼接、分割\"></a>拼接、分割</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">10</span>,<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[<span class=\"number\">10</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span>]</span><br><span class=\"line\"> [<span class=\"number\">14</span> <span class=\"number\">15</span>]</span><br><span class=\"line\"> [<span class=\"number\">16</span> <span class=\"number\">17</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B=np.arange(<span class=\"number\">20</span>,<span class=\"number\">30</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(B)</span><br><span class=\"line\">[[<span class=\"number\">20</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> [<span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">24</span> <span class=\"number\">25</span>]</span><br><span class=\"line\"> [<span class=\"number\">26</span> <span class=\"number\">27</span>]</span><br><span class=\"line\"> [<span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 垂直拼接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C=np.vstack([A,B]) <span class=\"comment\">#C=np.r_[A,B]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">[[<span class=\"number\">10</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span>]</span><br><span class=\"line\"> [<span class=\"number\">14</span> <span class=\"number\">15</span>]</span><br><span class=\"line\"> [<span class=\"number\">16</span> <span class=\"number\">17</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\"> [<span class=\"number\">20</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> [<span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">24</span> <span class=\"number\">25</span>]</span><br><span class=\"line\"> [<span class=\"number\">26</span> <span class=\"number\">27</span>]</span><br><span class=\"line\"> [<span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自我堆叠</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v=np.asarray([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=np.vstack([v]*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">1</span> <span class=\"number\">2</span>]]</span><br><span class=\"line\"><span class=\"comment\"># 横向堆叠两次，纵向堆叠一次</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=np.tile(v,(<span class=\"number\">2</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(b)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">1</span> <span class=\"number\">2</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 水平拼接</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C=np.hstack([A,B]) <span class=\"comment\">#C=np.c_[A,B]</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">[[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">20</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> [<span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">22</span> <span class=\"number\">23</span>]</span><br><span class=\"line\"> [<span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">24</span> <span class=\"number\">25</span>]</span><br><span class=\"line\"> [<span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">26</span> <span class=\"number\">27</span>]</span><br><span class=\"line\"> [<span class=\"number\">18</span> <span class=\"number\">19</span> <span class=\"number\">28</span> <span class=\"number\">29</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列组合column_stack([A,B]) 一维数组：按列方向组合  二维数组：同hstack一样</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\"><span class=\"comment\">#行组合row_stack([A,B]) 一维数组：按行方向组合  二维数组：同vstack一样</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"基础运算\"><a href=\"#基础运算\" class=\"headerlink\" title=\"基础运算\"></a>基础运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n7 = np.asarray([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>,<span class=\"number\">40</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n8 = np.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n7)</span><br><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">20</span> <span class=\"number\">30</span> <span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n8)</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算立方</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n7**<span class=\"number\">3</span>)</span><br><span class=\"line\">[ <span class=\"number\">1000</span>  <span class=\"number\">8000</span> <span class=\"number\">27000</span> <span class=\"number\">64000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 三角函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.sin(n7))</span><br><span class=\"line\">[-<span class=\"number\">0.54402111</span>  <span class=\"number\">0.91294525</span> -<span class=\"number\">0.98803162</span>  <span class=\"number\">0.74511316</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定轴最大/小值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.amax(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.amin(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 平均值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.mean(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">25.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中位数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.median(n7))</span><br><span class=\"line\"><span class=\"number\">25.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方差</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n7.var())</span><br><span class=\"line\"><span class=\"number\">125.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标准差</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.std(n7, axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"><span class=\"number\">11.180339887498949</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 差值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;n7-n8:&quot;</span>,n7-n8)</span><br><span class=\"line\">n7-n8: [<span class=\"number\">10</span> <span class=\"number\">19</span> <span class=\"number\">28</span> <span class=\"number\">37</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐个相乘非矩阵乘法</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n9 = np.asarray([[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n9)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">0</span> <span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n10=np.arange(<span class=\"number\">4</span>).reshape((<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n10)</span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">2</span> <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(n9 * n10) </span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">0</span> <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵计算\"><a href=\"#矩阵计算\" class=\"headerlink\" title=\"矩阵计算\"></a>矩阵计算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ax=B 求解x</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array([[<span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.transpose(np.array([[-<span class=\"number\">3</span>, <span class=\"number\">5</span>, -<span class=\"number\">2</span>]]))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = np.linalg.solve(A, B)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x:\\n&#x27;</span>, x)</span><br><span class=\"line\">x:</span><br><span class=\"line\"> [[ <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [-<span class=\"number\">1.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">2.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵相乘 C=AB  求解C</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array([[<span class=\"number\">3</span>, <span class=\"number\">2</span>, -<span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">1</span>, -<span class=\"number\">2</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C = np.dot(A, B)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;C:\\n&#x27;</span>,C)</span><br><span class=\"line\">C:</span><br><span class=\"line\"> [[-<span class=\"number\">6</span> -<span class=\"number\">3</span>  <span class=\"number\">0</span>]</span><br><span class=\"line\"> [<span class=\"number\">27</span> <span class=\"number\">35</span> <span class=\"number\">43</span>]</span><br><span class=\"line\"> [-<span class=\"number\">9</span> -<span class=\"number\">7</span> -<span class=\"number\">5</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵乘向量</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v=np.asarray([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(v)</span><br><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">1</span>,<span class=\"number\">5</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>D=v.dot(A)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(D)</span><br><span class=\"line\">[ <span class=\"number\">7</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\"># 自动将v转换为列向量，结果有自动转化为行向量</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C=A.dot(v)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\">[ <span class=\"number\">5</span> <span class=\"number\">11</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 矩阵的逆</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">1</span>,<span class=\"number\">5</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span>]</span><br><span class=\"line\"> [<span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>invA=np.linalg.inv(A)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(invA)</span><br><span class=\"line\">[[-<span class=\"number\">2.</span>   <span class=\"number\">1.</span> ]</span><br><span class=\"line\"> [ <span class=\"number\">1.5</span> -<span class=\"number\">0.5</span>]]</span><br><span class=\"line\"><span class=\"comment\">#   矩阵乘以矩阵的逆等于单位矩阵对角线都为1,其他为0，这里有浮点误差</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.dot(invA))</span><br><span class=\"line\">[[<span class=\"number\">1.00000000e+00</span> <span class=\"number\">1.11022302e-16</span>]</span><br><span class=\"line\"> [<span class=\"number\">0.00000000e+00</span> <span class=\"number\">1.00000000e+00</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对于非方阵求伪逆矩阵</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A=np.arange(<span class=\"number\">1</span>,<span class=\"number\">11</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>]</span><br><span class=\"line\"> [ <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pinvA=np.linalg.pinv(A)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(pinvA)</span><br><span class=\"line\">[[-<span class=\"number\">0.36</span>  <span class=\"number\">0.16</span>]</span><br><span class=\"line\"> [-<span class=\"number\">0.2</span>   <span class=\"number\">0.1</span> ]</span><br><span class=\"line\"> [-<span class=\"number\">0.04</span>  <span class=\"number\">0.04</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.12</span> -<span class=\"number\">0.02</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.28</span> -<span class=\"number\">0.08</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.dot(pinvA))</span><br><span class=\"line\">[[ <span class=\"number\">1.00000000e+00</span> -<span class=\"number\">1.11022302e-16</span>]</span><br><span class=\"line\"> [-<span class=\"number\">8.88178420e-16</span>  <span class=\"number\">1.00000000e+00</span>]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"排序与arg\"><a href=\"#排序与arg\" class=\"headerlink\" title=\"排序与arg\"></a>排序与arg</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x=np.asarray([<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">2</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">1</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">8</span>  <span class=\"number\">3</span> <span class=\"number\">10</span>  <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># argxxx 索引函数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.argmax(x)) <span class=\"comment\">#最大数的索引为8</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.argmin(x))</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.sort(x))</span><br><span class=\"line\">[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># x原地排序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x.sort()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#打乱顺序</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.shuffle(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">9</span>  <span class=\"number\">3</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">2</span>  <span class=\"number\">1</span>  <span class=\"number\">8</span>  <span class=\"number\">4</span>  <span class=\"number\">7</span> <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回排序索引</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.argsort(x))</span><br><span class=\"line\">[<span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">1</span> <span class=\"number\">7</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">8</span> <span class=\"number\">6</span> <span class=\"number\">0</span> <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 划分大于3和小于3 （快排子过程）</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(np.partition(x,<span class=\"number\">3</span>))</span><br><span class=\"line\">[ <span class=\"number\">2</span>  <span class=\"number\">1</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">8</span>  <span class=\"number\">7</span>  <span class=\"number\">9</span> <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FancyIndexing与np比较\"><a href=\"#FancyIndexing与np比较\" class=\"headerlink\" title=\"FancyIndexing与np比较\"></a>FancyIndexing与np比较</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x=np.arange(<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>  <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># FancyIndexing</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=[<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x[a])</span><br><span class=\"line\">[<span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># np数组比较</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x&lt;<span class=\"number\">3</span></span><br><span class=\"line\">array([ <span class=\"literal\">True</span>,  <span class=\"literal\">True</span>,  <span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>,</span><br><span class=\"line\">       <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span>*x==<span class=\"number\">24</span>-<span class=\"number\">4</span>*x</span><br><span class=\"line\">array([<span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>,  <span class=\"literal\">True</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>,</span><br><span class=\"line\">       <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 小于等于3的元素Ture/False序列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>i=(x&lt;=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">[ <span class=\"literal\">True</span>  <span class=\"literal\">True</span>  <span class=\"literal\">True</span>  <span class=\"literal\">True</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span></span><br><span class=\"line\"> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x[i])</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">sum</span>(i) <span class=\"comment\"># 对值Ture累加记数</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否含有零元素</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">any</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否都等于零</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">all</span>(x==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断两个数组是否相等</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.<span class=\"built_in\">all</span>(x==x)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.genfromtxt(<span class=\"string\">&quot;http://aima.cs.berkeley.edu/data/iris.csv&quot;</span>, delimiter=<span class=\"string\">&quot;,&quot;</span>,skip_header=<span class=\"number\">0</span>,dtype=<span class=\"string\">&quot;f8,f8,f,i4,|S8&quot;</span>)</span><br><span class=\"line\">array([(<span class=\"number\">5.1</span>, <span class=\"number\">3.5</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.9</span>, <span class=\"number\">3.</span> , <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">4.7</span>, <span class=\"number\">3.2</span>, <span class=\"number\">1.3</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.6</span>, <span class=\"number\">3.1</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">5.</span> , <span class=\"number\">3.6</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">5.4</span>, <span class=\"number\">3.9</span>, <span class=\"number\">1.7</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">4.6</span>, <span class=\"number\">3.4</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">5.</span> , <span class=\"number\">3.4</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">4.4</span>, <span class=\"number\">2.9</span>, <span class=\"number\">1.4</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.9</span>, <span class=\"number\">3.1</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">5.4</span>, <span class=\"number\">3.7</span>, <span class=\"number\">1.5</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>), (<span class=\"number\">4.8</span>, <span class=\"number\">3.4</span>, <span class=\"number\">1.6</span>, <span class=\"number\">0</span>, <span class=\"string\">b&#x27;setosa&#x27;</span>),</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  ......</span><br><span class=\"line\">       (<span class=\"number\">5.8</span>, <span class=\"number\">2.7</span>, <span class=\"number\">5.1</span>, <span class=\"number\">1</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">6.8</span>, <span class=\"number\">3.2</span>, <span class=\"number\">5.9</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">6.7</span>, <span class=\"number\">3.3</span>, <span class=\"number\">5.7</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">6.7</span>, <span class=\"number\">3.</span> , <span class=\"number\">5.2</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">6.3</span>, <span class=\"number\">2.5</span>, <span class=\"number\">5.</span> , <span class=\"number\">1</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">6.5</span>, <span class=\"number\">3.</span> , <span class=\"number\">5.2</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>),</span><br><span class=\"line\">       (<span class=\"number\">6.2</span>, <span class=\"number\">3.4</span>, <span class=\"number\">5.4</span>, <span class=\"number\">2</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>), (<span class=\"number\">5.9</span>, <span class=\"number\">3.</span> , <span class=\"number\">5.1</span>, <span class=\"number\">1</span>, <span class=\"string\">b&#x27;virginic&#x27;</span>)],</span><br><span class=\"line\">      dtype=[(<span class=\"string\">&#x27;f0&#x27;</span>, <span class=\"string\">&#x27;&lt;f8&#x27;</span>), (<span class=\"string\">&#x27;f1&#x27;</span>, <span class=\"string\">&#x27;&lt;f8&#x27;</span>), (<span class=\"string\">&#x27;f2&#x27;</span>, <span class=\"string\">&#x27;&lt;f8&#x27;</span>), (<span class=\"string\">&#x27;f3&#x27;</span>, <span class=\"string\">&#x27;&lt;i4&#x27;</span>), (<span class=\"string\">&#x27;f4&#x27;</span>, <span class=\"string\">&#x27;S8&#x27;</span>)])</span><br></pre></td></tr></table></figure>\n"},{"_content":"#### 提出的原因，以前的机器学习方法不能很好解决图像识别的问题\n**难点：视角、光照、形变、遮挡、 背景混淆、 区分度小、 图片尺寸**\n\n![依赖专家设计特征去处理不够好](https://upload-images.jianshu.io/upload_images/12637001-ad8f72e34471b76f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 学习多层特征？\n![图像识别几种任务](https://upload-images.jianshu.io/upload_images/12637001-608ff3c10396748e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* ImageNet 分类图库\n* LSVRC 比赛\n![81540600963_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-3a9ab762a55e16f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n","source":"_posts/机器学习/20181204-深度学习概述.md","raw":"#### 提出的原因，以前的机器学习方法不能很好解决图像识别的问题\n**难点：视角、光照、形变、遮挡、 背景混淆、 区分度小、 图片尺寸**\n\n![依赖专家设计特征去处理不够好](https://upload-images.jianshu.io/upload_images/12637001-ad8f72e34471b76f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 学习多层特征？\n![图像识别几种任务](https://upload-images.jianshu.io/upload_images/12637001-608ff3c10396748e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* ImageNet 分类图库\n* LSVRC 比赛\n![81540600963_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-3a9ab762a55e16f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n","slug":"机器学习/20181204-深度学习概述","published":1,"date":"2018-12-03T16:00:00.000Z","updated":"2021-08-17T18:45:34.769Z","title":"深度学习概述","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0y000innvb1dmb3o0q","content":"<h4 id=\"提出的原因，以前的机器学习方法不能很好解决图像识别的问题\"><a href=\"#提出的原因，以前的机器学习方法不能很好解决图像识别的问题\" class=\"headerlink\" title=\"提出的原因，以前的机器学习方法不能很好解决图像识别的问题\"></a>提出的原因，以前的机器学习方法不能很好解决图像识别的问题</h4><p><strong>难点：视角、光照、形变、遮挡、 背景混淆、 区分度小、 图片尺寸</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ad8f72e34471b76f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"依赖专家设计特征去处理不够好\"></p>\n<h4 id=\"学习多层特征？\"><a href=\"#学习多层特征？\" class=\"headerlink\" title=\"学习多层特征？\"></a>学习多层特征？</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-608ff3c10396748e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图像识别几种任务\"></p>\n<ul>\n<li>ImageNet 分类图库</li>\n<li>LSVRC 比赛<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3a9ab762a55e16f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"81540600963_.pic.jpg\"></li>\n</ul>\n","site":{"data":{}},"abbrlink":"K4VT24","excerpt":"提出的原因，以前的机器学习方法不能很好解决图像识别的问题\n难点：视角、光照、形变、遮挡、 背景混淆、 区分度小、 图片尺寸\n\n\n\n学习多层特征？\n\n\n * ImageNet 分类图库\n * LSVRC 比赛","more":"<h4 id=\"提出的原因，以前的机器学习方法不能很好解决图像识别的问题\"><a href=\"#提出的原因，以前的机器学习方法不能很好解决图像识别的问题\" class=\"headerlink\" title=\"提出的原因，以前的机器学习方法不能很好解决图像识别的问题\"></a>提出的原因，以前的机器学习方法不能很好解决图像识别的问题</h4><p><strong>难点：视角、光照、形变、遮挡、 背景混淆、 区分度小、 图片尺寸</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ad8f72e34471b76f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"依赖专家设计特征去处理不够好\"></p>\n<h4 id=\"学习多层特征？\"><a href=\"#学习多层特征？\" class=\"headerlink\" title=\"学习多层特征？\"></a>学习多层特征？</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-608ff3c10396748e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图像识别几种任务\"></p>\n<ul>\n<li>ImageNet 分类图库</li>\n<li>LSVRC 比赛<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3a9ab762a55e16f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"81540600963_.pic.jpg\"></li>\n</ul>\n"},{"_content":"![线性回归模型](https://upload-images.jianshu.io/upload_images/12637001-e28a9e2e6291f4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![logistic模型](https://upload-images.jianshu.io/upload_images/12637001-e6dbde2291a2305f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![softmax回归模型](https://upload-images.jianshu.io/upload_images/12637001-f078bd43caaa0fb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![感知机模型](https://upload-images.jianshu.io/upload_images/12637001-248e9dbf22d31966.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![1661540605851_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-e56b11173a1e2329.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![1671540605965_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-0a4f0a8030f89d6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![91540606249_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-69e09fa2a3ecbeca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n","source":"_posts/机器学习/20181204-神经网络.md","raw":"![线性回归模型](https://upload-images.jianshu.io/upload_images/12637001-e28a9e2e6291f4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![logistic模型](https://upload-images.jianshu.io/upload_images/12637001-e6dbde2291a2305f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![softmax回归模型](https://upload-images.jianshu.io/upload_images/12637001-f078bd43caaa0fb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![感知机模型](https://upload-images.jianshu.io/upload_images/12637001-248e9dbf22d31966.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![1661540605851_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-e56b11173a1e2329.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![1671540605965_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-0a4f0a8030f89d6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![91540606249_.pic.jpg](https://upload-images.jianshu.io/upload_images/12637001-69e09fa2a3ecbeca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n","slug":"机器学习/20181204-神经网络","published":1,"date":"2018-12-03T16:00:00.000Z","updated":"2021-08-17T18:45:34.770Z","title":"神经网络","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze0z000jnnvbb8nh4wfm","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e28a9e2e6291f4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"线性回归模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e6dbde2291a2305f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"logistic模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-f078bd43caaa0fb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"softmax回归模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-248e9dbf22d31966.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"感知机模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e56b11173a1e2329.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1661540605851_.pic.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-0a4f0a8030f89d6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1671540605965_.pic.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-69e09fa2a3ecbeca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"91540606249_.pic.jpg\"></p>\n","site":{"data":{}},"abbrlink":"3WMCFQ","excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e28a9e2e6291f4f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"线性回归模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e6dbde2291a2305f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"logistic模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-f078bd43caaa0fb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"softmax回归模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-248e9dbf22d31966.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"感知机模型\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-e56b11173a1e2329.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1661540605851_.pic.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-0a4f0a8030f89d6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1671540605965_.pic.jpg\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-69e09fa2a3ecbeca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"91540606249_.pic.jpg\"></p>\n"},{"_content":"### @Autowired 与@Resource的区别\n* @Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。\n*  @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：\n```java\n@Autowired\n@Qualifier(\"myServiceImpl\")\nprivate MyService myservice;\n```\n* @Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。**但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配**。\n* @Autowired是根据类型进行自动装配的。如果当Spring上下文中存在不止一个MyService类型的bean时，就会抛出BeanCreationException异常;如果Spring上下文中不存在MyService类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。\n* 新补充：原本以为之前的理解已经完整了，直到我发现有一种特殊情况@Autowired也能正常注入，就是有一个实现类指定id为\"myService\"。所以应该是：@Autowired也是先按照name 装配，其实和@Resource一样，只不过@Autowired只能取字段名进行装配，不能单独指定要装配的name而已\n\n#### Spring对Bean的name默认生成规则\nSpring对注解形式的bean的名字的默认处理就是将类名首字母小写，再拼接后面的字符，还有另外的一个特殊处理：**当类的名字是以两个或以上的大写字母开头的话，bean的名字会与类名保持一致例如：\nBKYInfoServcie.java------>@Service(\"BKYInfoServcie\")**\n","source":"_posts/杂记/20181016-@Autowired-与@Resource.md","raw":"### @Autowired 与@Resource的区别\n* @Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。\n*  @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：\n```java\n@Autowired\n@Qualifier(\"myServiceImpl\")\nprivate MyService myservice;\n```\n* @Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。**但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配**。\n* @Autowired是根据类型进行自动装配的。如果当Spring上下文中存在不止一个MyService类型的bean时，就会抛出BeanCreationException异常;如果Spring上下文中不存在MyService类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。\n* 新补充：原本以为之前的理解已经完整了，直到我发现有一种特殊情况@Autowired也能正常注入，就是有一个实现类指定id为\"myService\"。所以应该是：@Autowired也是先按照name 装配，其实和@Resource一样，只不过@Autowired只能取字段名进行装配，不能单独指定要装配的name而已\n\n#### Spring对Bean的name默认生成规则\nSpring对注解形式的bean的名字的默认处理就是将类名首字母小写，再拼接后面的字符，还有另外的一个特殊处理：**当类的名字是以两个或以上的大写字母开头的话，bean的名字会与类名保持一致例如：\nBKYInfoServcie.java------>@Service(\"BKYInfoServcie\")**\n","slug":"杂记/20181016-@Autowired-与@Resource","published":1,"date":"2018-10-15T16:00:00.000Z","updated":"2021-05-04T11:43:38.464Z","title":"Autowired-与@Resource","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze10000knnvb3vsg82js","content":"<h3 id=\"Autowired-与-Resource的区别\"><a href=\"#Autowired-与-Resource的区别\" class=\"headerlink\" title=\"@Autowired 与@Resource的区别\"></a>@Autowired 与@Resource的区别</h3><ul>\n<li>@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。</li>\n<li> @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;myServiceImpl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> MyService myservice;</span><br></pre></td></tr></table></figure></li>\n<li>@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。<strong>但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配</strong>。</li>\n<li>@Autowired是根据类型进行自动装配的。如果当Spring上下文中存在不止一个MyService类型的bean时，就会抛出BeanCreationException异常;如果Spring上下文中不存在MyService类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。</li>\n<li>新补充：原本以为之前的理解已经完整了，直到我发现有一种特殊情况@Autowired也能正常注入，就是有一个实现类指定id为”myService”。所以应该是：@Autowired也是先按照name 装配，其实和@Resource一样，只不过@Autowired只能取字段名进行装配，不能单独指定要装配的name而已</li>\n</ul>\n<h4 id=\"Spring对Bean的name默认生成规则\"><a href=\"#Spring对Bean的name默认生成规则\" class=\"headerlink\" title=\"Spring对Bean的name默认生成规则\"></a>Spring对Bean的name默认生成规则</h4><p>Spring对注解形式的bean的名字的默认处理就是将类名首字母小写，再拼接后面的字符，还有另外的一个特殊处理：<strong>当类的名字是以两个或以上的大写字母开头的话，bean的名字会与类名保持一致例如：<br>BKYInfoServcie.java——&gt;@Service(“BKYInfoServcie”)</strong></p>\n","site":{"data":{}},"abbrlink":"2HS8T0D","excerpt":"@Autowired 与@Resource的区别\n * @Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。\n *  @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：1\n   2\n   3\n   \n   \n   @Autowired\n   @Qualifier(\"myServiceImp","more":"<h3 id=\"Autowired-与-Resource的区别\"><a href=\"#Autowired-与-Resource的区别\" class=\"headerlink\" title=\"@Autowired 与@Resource的区别\"></a>@Autowired 与@Resource的区别</h3><ul>\n<li>@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。</li>\n<li> @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;myServiceImpl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> MyService myservice;</span><br></pre></td></tr></table></figure></li>\n<li>@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。<strong>但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配</strong>。</li>\n<li>@Autowired是根据类型进行自动装配的。如果当Spring上下文中存在不止一个MyService类型的bean时，就会抛出BeanCreationException异常;如果Spring上下文中不存在MyService类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。</li>\n<li>新补充：原本以为之前的理解已经完整了，直到我发现有一种特殊情况@Autowired也能正常注入，就是有一个实现类指定id为”myService”。所以应该是：@Autowired也是先按照name 装配，其实和@Resource一样，只不过@Autowired只能取字段名进行装配，不能单独指定要装配的name而已</li>\n</ul>\n<h4 id=\"Spring对Bean的name默认生成规则\"><a href=\"#Spring对Bean的name默认生成规则\" class=\"headerlink\" title=\"Spring对Bean的name默认生成规则\"></a>Spring对Bean的name默认生成规则</h4><p>Spring对注解形式的bean的名字的默认处理就是将类名首字母小写，再拼接后面的字符，还有另外的一个特殊处理：<strong>当类的名字是以两个或以上的大写字母开头的话，bean的名字会与类名保持一致例如：<br>BKYInfoServcie.java——&gt;@Service(“BKYInfoServcie”)</strong></p>\n"},{"_content":"### 1.数字类型(number)\n- int\n- float\n```python\n>>> type(1)\nint\n\n>>> type(1.0)\nfloat\n\n>>> type(1+0.1)\nfloat\n\n>>> type(1+1.0)\nfloat\n\n>>> type(1/2)\nfloat\n\n>>> type(1//2)\nint\n```\n/ 是浮点运算\n// 是取整运算\n\n- 进制转换\n```python\n#二进制\n>>> 0b10   \n2\n\n#八进制\n>>> 0o10\n8\n\n#十六进制\n>>> 0x10\n16\n\n#转化为二进制\n>>> bin(10)\n'0b1010'\n\n#转化为十进制\n>>> int(0b111)\n7\n\n#转化为八进制\n>>> oct(0b111)\n'0o7'\n\n#转化为十六进制\n>>> hex(0o7777)\n'0xfff'\n```\n\n- bool 布尔类型\n`True` `False`   注意大小写\n```python\n>>> type(True)\nbool\n\n>>> int(True)\n1\n>>> int(False)\n0\n\n>>> bool(1)\nTrue\n>>> bool(0)\nFalse\n\n>>> bool(2.2) # 非零就是True\nTrue\n>>> bool(-1.1)\nTrue\n>>> bool(0) \nFalse\n\n>>> bool('')\nFalse\n\n>>> bool([1,2,3])\nTrue\n>>> bool([])\nFalse\n\n>>> bool({1,2,3})\nTrue\n>>> bool({})\nFalse\n\n>>> bool(None)\nFalse\n```\n\n- 复数\n  36j\n\n### 2.字符串类型(string)\n```python\n>>> type('1')\nstr\n\n>>>\"let's go\"\n\"let's go\"\n\n# 多行文本\n>>> '''\n... swdwd\n... dwd\n... dwd\n... '''\n'\\nswdwd\\ndwd\\ndwd\\n'\n\n>>>'helo\\\nworld'\n'helloworld'\n\n#原始字符串，不解析转移字符串\n>>> print(r'c:\\northwind\\northwest')\nc:\\northwind\\northwest\n```\n\n#### 2.2字符串运算\n```python\n>>> 'hello'+'world'\n'helloworld'\n\n>>> \"hello\"*3\n'hellohellohello'\n\n>>> 'hello world'[0]\n'h'\n\n#倒数选取\n>>> 'hello world'[-1]\n'd'\n\n>>> 'hello world'[0:5]\n'hello'\n\n>>> 'hello world'[6:-1]\n'worl'\n\n>>> 'hello world'[6:]\n'world'\n```\n","source":"_posts/杂记/20181113-Python-数据类型.md","raw":"### 1.数字类型(number)\n- int\n- float\n```python\n>>> type(1)\nint\n\n>>> type(1.0)\nfloat\n\n>>> type(1+0.1)\nfloat\n\n>>> type(1+1.0)\nfloat\n\n>>> type(1/2)\nfloat\n\n>>> type(1//2)\nint\n```\n/ 是浮点运算\n// 是取整运算\n\n- 进制转换\n```python\n#二进制\n>>> 0b10   \n2\n\n#八进制\n>>> 0o10\n8\n\n#十六进制\n>>> 0x10\n16\n\n#转化为二进制\n>>> bin(10)\n'0b1010'\n\n#转化为十进制\n>>> int(0b111)\n7\n\n#转化为八进制\n>>> oct(0b111)\n'0o7'\n\n#转化为十六进制\n>>> hex(0o7777)\n'0xfff'\n```\n\n- bool 布尔类型\n`True` `False`   注意大小写\n```python\n>>> type(True)\nbool\n\n>>> int(True)\n1\n>>> int(False)\n0\n\n>>> bool(1)\nTrue\n>>> bool(0)\nFalse\n\n>>> bool(2.2) # 非零就是True\nTrue\n>>> bool(-1.1)\nTrue\n>>> bool(0) \nFalse\n\n>>> bool('')\nFalse\n\n>>> bool([1,2,3])\nTrue\n>>> bool([])\nFalse\n\n>>> bool({1,2,3})\nTrue\n>>> bool({})\nFalse\n\n>>> bool(None)\nFalse\n```\n\n- 复数\n  36j\n\n### 2.字符串类型(string)\n```python\n>>> type('1')\nstr\n\n>>>\"let's go\"\n\"let's go\"\n\n# 多行文本\n>>> '''\n... swdwd\n... dwd\n... dwd\n... '''\n'\\nswdwd\\ndwd\\ndwd\\n'\n\n>>>'helo\\\nworld'\n'helloworld'\n\n#原始字符串，不解析转移字符串\n>>> print(r'c:\\northwind\\northwest')\nc:\\northwind\\northwest\n```\n\n#### 2.2字符串运算\n```python\n>>> 'hello'+'world'\n'helloworld'\n\n>>> \"hello\"*3\n'hellohellohello'\n\n>>> 'hello world'[0]\n'h'\n\n#倒数选取\n>>> 'hello world'[-1]\n'd'\n\n>>> 'hello world'[0:5]\n'hello'\n\n>>> 'hello world'[6:-1]\n'worl'\n\n>>> 'hello world'[6:]\n'world'\n```\n","slug":"杂记/20181113-Python-数据类型","published":1,"date":"2018-11-12T16:00:00.000Z","updated":"2021-05-04T11:43:38.464Z","title":"Python-数据类型","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze10000mnnvbc9ur9ao3","content":"<h3 id=\"1-数字类型-number\"><a href=\"#1-数字类型-number\" class=\"headerlink\" title=\"1.数字类型(number)\"></a>1.数字类型(number)</h3><ul>\n<li><p>int</p>\n</li>\n<li><p>float</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>+<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>+<span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>/<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>//<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">int</span></span><br></pre></td></tr></table></figure>\n<p>/ 是浮点运算<br>// 是取整运算</p>\n</li>\n<li><p>进制转换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#二进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0b10</span>   </span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0o10</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x10</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为二进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0b1010&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为十进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">0b111</span>)</span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">oct</span>(<span class=\"number\">0b111</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0o7&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">hex</span>(<span class=\"number\">0o7777</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0xfff&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>bool 布尔类型<br><code>True</code> <code>False</code>   注意大小写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2.2</span>) <span class=\"comment\"># 非零就是True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>([])</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></li>\n<li><p>复数<br>36j</p>\n</li>\n</ul>\n<h3 id=\"2-字符串类型-string\"><a href=\"#2-字符串类型-string\" class=\"headerlink\" title=\"2.字符串类型(string)\"></a>2.字符串类型(string)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"string\">&quot;let&#x27;s go&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;let&#x27;s go&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行文本</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>swdwd</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>dwd</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>dwd</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;\\nswdwd\\ndwd\\ndwd\\n&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"string\">&#x27;helo\\</span></span><br><span class=\"line\"><span class=\"string\">world&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;helloworld&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#原始字符串，不解析转移字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">r&#x27;c:\\northwind\\northwest&#x27;</span>)</span><br><span class=\"line\">c:\\northwind\\northwest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2字符串运算\"><a href=\"#2-2字符串运算\" class=\"headerlink\" title=\"2.2字符串运算\"></a>2.2字符串运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello&#x27;</span>+<span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;helloworld&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;hello&quot;</span>*<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"string\">&#x27;hellohellohello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;h&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#倒数选取</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;d&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">6</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;worl&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">6</span>:]</span><br><span class=\"line\"><span class=\"string\">&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"26EK0PC","excerpt":"1.数字类型(number)\n * int\n   \n   \n * float\n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n   \n   >>> type(1)\n   int\n   \n   >>> type(1.0)\n   float\n   \n   >>> type(1+0.1)\n   float\n   \n   >>> type(1+1.0)\n   float\n   \n   >>> type(1/2)\n   float\n   \n   >>>","more":"<h3 id=\"1-数字类型-number\"><a href=\"#1-数字类型-number\" class=\"headerlink\" title=\"1.数字类型(number)\"></a>1.数字类型(number)</h3><ul>\n<li><p>int</p>\n</li>\n<li><p>float</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>+<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>+<span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>/<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">float</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">1</span>//<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">int</span></span><br></pre></td></tr></table></figure>\n<p>/ 是浮点运算<br>// 是取整运算</p>\n</li>\n<li><p>进制转换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#二进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0b10</span>   </span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0o10</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x10</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为二进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0b1010&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为十进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"number\">0b111</span>)</span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为八进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">oct</span>(<span class=\"number\">0b111</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0o7&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#转化为十六进制</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">hex</span>(<span class=\"number\">0o7777</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0xfff&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>bool 布尔类型<br><code>True</code> <code>False</code>   注意大小写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">int</span>(<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">2.2</span>) <span class=\"comment\"># 非零就是True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(-<span class=\"number\">1.1</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>([])</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>(<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></li>\n<li><p>复数<br>36j</p>\n</li>\n</ul>\n<h3 id=\"2-字符串类型-string\"><a href=\"#2-字符串类型-string\" class=\"headerlink\" title=\"2.字符串类型(string)\"></a>2.字符串类型(string)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"string\">&quot;let&#x27;s go&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;let&#x27;s go&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多行文本</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>swdwd</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>dwd</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>dwd</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;\\nswdwd\\ndwd\\ndwd\\n&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"string\">&#x27;helo\\</span></span><br><span class=\"line\"><span class=\"string\">world&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;helloworld&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#原始字符串，不解析转移字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">r&#x27;c:\\northwind\\northwest&#x27;</span>)</span><br><span class=\"line\">c:\\northwind\\northwest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2字符串运算\"><a href=\"#2-2字符串运算\" class=\"headerlink\" title=\"2.2字符串运算\"></a>2.2字符串运算</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello&#x27;</span>+<span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;helloworld&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;hello&quot;</span>*<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"string\">&#x27;hellohellohello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;h&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#倒数选取</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;d&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">6</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;worl&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;hello world&#x27;</span>[<span class=\"number\">6</span>:]</span><br><span class=\"line\"><span class=\"string\">&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"####  1.subList(l,r)  是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素\n\n\n#### 2.subList() 返回对象是RandomAccessSubList不可序列化的实例化\nhttps://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception\n![](https://upload-images.jianshu.io/upload_images/12637001-955b421ecaf7cff6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n#### 3.切记不要这么写：list = (LinkedList) list.subList(0, 2);\n***否则程序会这样报复你：java.util.SubList cannot be cast to java.util.LinkedList*** \n***向下转型的前提是你要先是那个类***\n\n#### 总结：list = new ArrayList(list.subList(0, 2)); 这么写总没错啦～\n","source":"_posts/杂记/20181116subList()-的坑.md","raw":"####  1.subList(l,r)  是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素\n\n\n#### 2.subList() 返回对象是RandomAccessSubList不可序列化的实例化\nhttps://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception\n![](https://upload-images.jianshu.io/upload_images/12637001-955b421ecaf7cff6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600)\n\n#### 3.切记不要这么写：list = (LinkedList) list.subList(0, 2);\n***否则程序会这样报复你：java.util.SubList cannot be cast to java.util.LinkedList*** \n***向下转型的前提是你要先是那个类***\n\n#### 总结：list = new ArrayList(list.subList(0, 2)); 这么写总没错啦～\n","slug":"杂记/20181116subList()-的坑","published":1,"date":"2018-11-15T16:00:00.000Z","updated":"2021-05-04T11:43:38.464Z","title":"ubList()-的坑","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze12000nnnvb716bdi8i","content":"<h4 id=\"1-subList-l-r-是左闭右开-例如：subList-1-3-截取的是下标为1和2两个元素\"><a href=\"#1-subList-l-r-是左闭右开-例如：subList-1-3-截取的是下标为1和2两个元素\" class=\"headerlink\" title=\"1.subList(l,r)  是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素\"></a>1.subList(l,r)  是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素</h4><h4 id=\"2-subList-返回对象是RandomAccessSubList不可序列化的实例化\"><a href=\"#2-subList-返回对象是RandomAccessSubList不可序列化的实例化\" class=\"headerlink\" title=\"2.subList() 返回对象是RandomAccessSubList不可序列化的实例化\"></a>2.subList() 返回对象是RandomAccessSubList不可序列化的实例化</h4><p><a href=\"https://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception\">https://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception</a><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-955b421ecaf7cff6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\"></p>\n<h4 id=\"3-切记不要这么写：list-LinkedList-list-subList-0-2\"><a href=\"#3-切记不要这么写：list-LinkedList-list-subList-0-2\" class=\"headerlink\" title=\"3.切记不要这么写：list = (LinkedList) list.subList(0, 2);\"></a>3.切记不要这么写：list = (LinkedList) list.subList(0, 2);</h4><p><em><strong>否则程序会这样报复你：java.util.SubList cannot be cast to java.util.LinkedList</strong></em><br><em><strong>向下转型的前提是你要先是那个类</strong></em></p>\n<h4 id=\"总结：list-new-ArrayList-list-subList-0-2-这么写总没错啦～\"><a href=\"#总结：list-new-ArrayList-list-subList-0-2-这么写总没错啦～\" class=\"headerlink\" title=\"总结：list = new ArrayList(list.subList(0, 2)); 这么写总没错啦～\"></a>总结：list = new ArrayList(list.subList(0, 2)); 这么写总没错啦～</h4>","site":{"data":{}},"abbrlink":"3N6TCHE","excerpt":"1.subList(l,r) 是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素\n2.subList() 返回对象是RandomAccessSubList不可序列化的实例化\nhttps://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception\n\n\n3.切记不要这么写：list = (LinkedList) list.subList(0, 2);\n否则程序会这样报复你：java.util.SubList cannot be cas","more":"<h4 id=\"1-subList-l-r-是左闭右开-例如：subList-1-3-截取的是下标为1和2两个元素\"><a href=\"#1-subList-l-r-是左闭右开-例如：subList-1-3-截取的是下标为1和2两个元素\" class=\"headerlink\" title=\"1.subList(l,r)  是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素\"></a>1.subList(l,r)  是左闭右开 例如：subList(1,3) 截取的是下标为1和2两个元素</h4><h4 id=\"2-subList-返回对象是RandomAccessSubList不可序列化的实例化\"><a href=\"#2-subList-返回对象是RandomAccessSubList不可序列化的实例化\" class=\"headerlink\" title=\"2.subList() 返回对象是RandomAccessSubList不可序列化的实例化\"></a>2.subList() 返回对象是RandomAccessSubList不可序列化的实例化</h4><p><a href=\"https://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception\">https://stackoverflow.com/questions/26568205/resolve-a-java-util-arraylistsublist-notserializable-exception</a><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-955b421ecaf7cff6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\"></p>\n<h4 id=\"3-切记不要这么写：list-LinkedList-list-subList-0-2\"><a href=\"#3-切记不要这么写：list-LinkedList-list-subList-0-2\" class=\"headerlink\" title=\"3.切记不要这么写：list = (LinkedList) list.subList(0, 2);\"></a>3.切记不要这么写：list = (LinkedList) list.subList(0, 2);</h4><p><em><strong>否则程序会这样报复你：java.util.SubList cannot be cast to java.util.LinkedList</strong></em><br><em><strong>向下转型的前提是你要先是那个类</strong></em></p>\n<h4 id=\"总结：list-new-ArrayList-list-subList-0-2-这么写总没错啦～\"><a href=\"#总结：list-new-ArrayList-list-subList-0-2-这么写总没错啦～\" class=\"headerlink\" title=\"总结：list = new ArrayList(list.subList(0, 2)); 这么写总没错啦～\"></a>总结：list = new ArrayList(list.subList(0, 2)); 这么写总没错啦～</h4>"},{"_content":"#### 题目描述\n>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n说明:\n返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n>示例:\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n#### 分析\n>有序的查找想到二分查找，运用`对撞指针`的思想，前后各设置一个指针分别向中间移动\n\n#### 代码\n```java\n      public static int binarySearch(int[] arr, int l, int k) {\n        // 在[l...r]中查找k\n        int r = arr.length - 1;\n        while (l <= r) {\n            int middle = l + ((r - l) >> 1);\n\n            if (k == arr[middle])\n                return middle;\n            else if (k < arr[middle])\n                r = middle - 1;\n            else\n                l = middle + 1;\n        }\n\n        return -1;\n    }\n\n    public int[] twoSum(int[] numbers, int target) {\n        int[] ret = new int[2];\n        for (int i = 0; i < numbers.length; i++) {\n            int j = binarySearch(numbers, i + 1, target - numbers[i]);\n            if ( j != -1) {\n                ret[0]=i+1;\n                ret[1]=j+1;\n            }\n        }\n        return ret;\n    }\n\n\n    //O(n) 指针碰撞\n    public int[] twoSum2(int[] numbers, int target) {\n        int[] ret=new int[2];\n\n        int l=0;\n        int r=numbers.length-1;\n        while (l<r){\n            if(numbers[l]+numbers[r]==target) {\n                ret[0]=l+1;\n                ret[1]=r+1;\n                return ret;\n            }else if(numbers[l]+numbers[r]<target){\n                l++;\n            }else {\n                r--;\n            }\n        }\n        return ret;\n    }\n```\n","source":"_posts/算法集/20180818-算法集-LeetCode-167-两数之和II---输入有序数组.md","raw":"#### 题目描述\n>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n说明:\n返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n>示例:\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n#### 分析\n>有序的查找想到二分查找，运用`对撞指针`的思想，前后各设置一个指针分别向中间移动\n\n#### 代码\n```java\n      public static int binarySearch(int[] arr, int l, int k) {\n        // 在[l...r]中查找k\n        int r = arr.length - 1;\n        while (l <= r) {\n            int middle = l + ((r - l) >> 1);\n\n            if (k == arr[middle])\n                return middle;\n            else if (k < arr[middle])\n                r = middle - 1;\n            else\n                l = middle + 1;\n        }\n\n        return -1;\n    }\n\n    public int[] twoSum(int[] numbers, int target) {\n        int[] ret = new int[2];\n        for (int i = 0; i < numbers.length; i++) {\n            int j = binarySearch(numbers, i + 1, target - numbers[i]);\n            if ( j != -1) {\n                ret[0]=i+1;\n                ret[1]=j+1;\n            }\n        }\n        return ret;\n    }\n\n\n    //O(n) 指针碰撞\n    public int[] twoSum2(int[] numbers, int target) {\n        int[] ret=new int[2];\n\n        int l=0;\n        int r=numbers.length-1;\n        while (l<r){\n            if(numbers[l]+numbers[r]==target) {\n                ret[0]=l+1;\n                ret[1]=r+1;\n                return ret;\n            }else if(numbers[l]+numbers[r]<target){\n                l++;\n            }else {\n                r--;\n            }\n        }\n        return ret;\n    }\n```\n","slug":"算法集/20180818-算法集-LeetCode-167-两数之和II---输入有序数组","published":1,"date":"2018-08-17T16:00:00.000Z","updated":"2021-08-17T16:21:48.473Z","title":"算法集-LeetCode-167-两数之和II---输入有序数组","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze13000onnvb0zrg424c","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><blockquote>\n<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。<br>说明:<br>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n</blockquote>\n<blockquote>\n<p>示例:<br>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>\n</blockquote>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><blockquote>\n<p>有序的查找想到二分查找，运用<code>对撞指针</code>的思想，前后各设置一个指针分别向中间移动</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在[l...r]中查找k</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = l + ((r - l) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == arr[middle])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt; arr[middle])</span><br><span class=\"line\">            r = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            l = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = binarySearch(numbers, i + <span class=\"number\">1</span>, target - numbers[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( j != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>]=j+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O(n) 指针碰撞</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum2(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ret=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r=numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers[l]+numbers[r]==target) &#123;</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>]=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>]=r+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(numbers[l]+numbers[r]&lt;target)&#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"3C1QF4B","excerpt":"题目描述\n给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n说明:\n返回的下标值（index1 和 index2）不是从零开始的。\n你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n示例:\n输入: numbers = [2, 7, 11, 15], target = 9\n输出: [1,2]\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n分析\n有序的查找想到二分查找，运用对撞指针的思想，前后各","more":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><blockquote>\n<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。<br>说明:<br>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n</blockquote>\n<blockquote>\n<p>示例:<br>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>\n</blockquote>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><blockquote>\n<p>有序的查找想到二分查找，运用<code>对撞指针</code>的思想，前后各设置一个指针分别向中间移动</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在[l...r]中查找k</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = l + ((r - l) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == arr[middle])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt; arr[middle])</span><br><span class=\"line\">            r = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            l = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = binarySearch(numbers, i + <span class=\"number\">1</span>, target - numbers[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( j != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>]=j+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O(n) 指针碰撞</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum2(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ret=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r=numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers[l]+numbers[r]==target) &#123;</span><br><span class=\"line\">            ret[<span class=\"number\">0</span>]=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">            ret[<span class=\"number\">1</span>]=r+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(numbers[l]+numbers[r]&lt;target)&#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"####题目描述\n>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\n>Example 1:\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\n>Example 2:\nInput: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\nNote: \n**You may assume k is always valid, 1 ≤ k ≤ array's length.**\n\n####分析\n>不用java的sort类库，用快排思想，Quick Select，划分为左面比p大右比p小，然后判断j与k的关系判断应该去那个子集继续查找\n\n####代码\n```java\n    private static void swap(int arr[], int x, int y) {\n        int temp = arr[x];\n        arr[x] = arr[y];\n        arr[y] = temp;\n    }\n    \n    public int findKthLargest(int[] nums, int k) {\n\n        if(nums==null||nums.length<k) return -1;\n\n        int l=0;\n        int r=nums.length-1;\n        while (l<=r){\n            int p=nums[l];\n            int i=l+1;\n            int j=r;\n            while (true){\n                while (i<=r&&nums[i]>p) i++;\n                while (j>=l+1&&nums[j]<p) j--;\n\n                if(i>=j) break;\n                else swap(nums,i++,j--);\n            }\n            swap(nums,j,l);\n\n            if(k==j+1) return p;\n            else if(k<j+1) {r=j-1;}\n            else {l=j+1;}\n        }\n\n        return -1;\n\n    }\n```\n\n","source":"_posts/算法集/20180818-算法集-LeetCode-215-寻找数组中第k大元素.md","raw":"####题目描述\n>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\n>Example 1:\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\n>Example 2:\nInput: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\nNote: \n**You may assume k is always valid, 1 ≤ k ≤ array's length.**\n\n####分析\n>不用java的sort类库，用快排思想，Quick Select，划分为左面比p大右比p小，然后判断j与k的关系判断应该去那个子集继续查找\n\n####代码\n```java\n    private static void swap(int arr[], int x, int y) {\n        int temp = arr[x];\n        arr[x] = arr[y];\n        arr[y] = temp;\n    }\n    \n    public int findKthLargest(int[] nums, int k) {\n\n        if(nums==null||nums.length<k) return -1;\n\n        int l=0;\n        int r=nums.length-1;\n        while (l<=r){\n            int p=nums[l];\n            int i=l+1;\n            int j=r;\n            while (true){\n                while (i<=r&&nums[i]>p) i++;\n                while (j>=l+1&&nums[j]<p) j--;\n\n                if(i>=j) break;\n                else swap(nums,i++,j--);\n            }\n            swap(nums,j,l);\n\n            if(k==j+1) return p;\n            else if(k<j+1) {r=j-1;}\n            else {l=j+1;}\n        }\n\n        return -1;\n\n    }\n```\n\n","slug":"算法集/20180818-算法集-LeetCode-215-寻找数组中第k大元素","published":1,"date":"2018-08-17T16:00:00.000Z","updated":"2021-08-17T16:21:48.473Z","title":"算法集-LeetCode-215-寻找数组中第k大元素","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze14000pnnvbbr2i9o4o","content":"<p>####题目描述</p>\n<blockquote>\n<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\n</blockquote>\n<blockquote>\n<p>Example 1:<br>Input: [3,2,1,5,6,4] and k = 2<br>Output: 5<br>Example 2:<br>Input: [3,2,3,1,2,4,5,5,6] and k = 4<br>Output: 4<br>Note:<br><strong>You may assume k is always valid, 1 ≤ k ≤ array’s length.</strong></p>\n</blockquote>\n<p>####分析</p>\n<blockquote>\n<p>不用java的sort类库，用快排思想，Quick Select，划分为左面比p大右比p小，然后判断j与k的关系判断应该去那个子集继续查找</p>\n</blockquote>\n<p>####代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[x];</span><br><span class=\"line\">    arr[x] = arr[y];</span><br><span class=\"line\">    arr[y] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums==<span class=\"keyword\">null</span>||nums.length&lt;k) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r=nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=nums[l];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=r;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i&lt;=r&amp;&amp;nums[i]&gt;p) i++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j&gt;=l+<span class=\"number\">1</span>&amp;&amp;nums[j]&lt;p) j--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;=j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> swap(nums,i++,j--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums,j,l);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==j+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;j+<span class=\"number\">1</span>) &#123;r=j-<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;l=j+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"abbrlink":"155B7MX","excerpt":"####题目描述\n\nFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\nExample 1:\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\nExample 2:\nInput: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\nNote:\nYou may assume k is always vali","more":"<p>####题目描述</p>\n<blockquote>\n<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\n</blockquote>\n<blockquote>\n<p>Example 1:<br>Input: [3,2,1,5,6,4] and k = 2<br>Output: 5<br>Example 2:<br>Input: [3,2,3,1,2,4,5,5,6] and k = 4<br>Output: 4<br>Note:<br><strong>You may assume k is always valid, 1 ≤ k ≤ array’s length.</strong></p>\n</blockquote>\n<p>####分析</p>\n<blockquote>\n<p>不用java的sort类库，用快排思想，Quick Select，划分为左面比p大右比p小，然后判断j与k的关系判断应该去那个子集继续查找</p>\n</blockquote>\n<p>####代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[x];</span><br><span class=\"line\">    arr[x] = arr[y];</span><br><span class=\"line\">    arr[y] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums==<span class=\"keyword\">null</span>||nums.length&lt;k) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r=nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=nums[l];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=r;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i&lt;=r&amp;&amp;nums[i]&gt;p) i++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j&gt;=l+<span class=\"number\">1</span>&amp;&amp;nums[j]&lt;p) j--;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&gt;=j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> swap(nums,i++,j--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums,j,l);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==j+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k&lt;j+<span class=\"number\">1</span>) &#123;r=j-<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;l=j+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"####题目描述\n>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n>示例:\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n####分析：\n这是第一题很简单，就是两层for循环然后一个一个去试，结果代码倒是通过了，可是一看时间分析比大佬的代码慢好多，于是又看了第一名的代码，果然列害，通过HashMap以值为key如果发现与存在key正好匹配的数则返回，只遍历了一遍即可。\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-afb77ebd9864a649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####代码：\n\n```java\n    /**\n     * 我的代码\n     */\n    public int[] twoSum(int[] nums, int target) {\n\n        int[] ret = new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums.length; j++) {\n                if (j == i) continue;\n                if (nums[i] + nums[j] == target) {\n                    ret[0] = i;\n                    ret[1] = j;\n                    return ret;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * 最优算法\n     */\n    public int[] twoSum2(int[] numbers, int target) {\n        int[] res = new int[2];\n        if (numbers == null || numbers.length < 2)\n            return res;\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < numbers.length; i++) {\n            if (!map.containsKey(target - numbers[i])) {\n                map.put(numbers[i], i);\n            } else {\n                res[0] = map.get(target - numbers[i]);\n                res[1] = i;\n                break;\n            }\n        }\n        return res;\n    }\n```\n","source":"_posts/算法集/20180818-算法集-leetcode-两数之和(Two-Sum).md","raw":"####题目描述\n>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n>示例:\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n####分析：\n这是第一题很简单，就是两层for循环然后一个一个去试，结果代码倒是通过了，可是一看时间分析比大佬的代码慢好多，于是又看了第一名的代码，果然列害，通过HashMap以值为key如果发现与存在key正好匹配的数则返回，只遍历了一遍即可。\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-afb77ebd9864a649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####代码：\n\n```java\n    /**\n     * 我的代码\n     */\n    public int[] twoSum(int[] nums, int target) {\n\n        int[] ret = new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums.length; j++) {\n                if (j == i) continue;\n                if (nums[i] + nums[j] == target) {\n                    ret[0] = i;\n                    ret[1] = j;\n                    return ret;\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    /**\n     * 最优算法\n     */\n    public int[] twoSum2(int[] numbers, int target) {\n        int[] res = new int[2];\n        if (numbers == null || numbers.length < 2)\n            return res;\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < numbers.length; i++) {\n            if (!map.containsKey(target - numbers[i])) {\n                map.put(numbers[i], i);\n            } else {\n                res[0] = map.get(target - numbers[i]);\n                res[1] = i;\n                break;\n            }\n        }\n        return res;\n    }\n```\n","slug":"算法集/20180818-算法集-leetcode-两数之和(Two-Sum)","published":1,"date":"2018-08-17T16:00:00.000Z","updated":"2021-08-17T16:21:48.473Z","title":"算法集-leetcode-两数之和(Two-Sum)","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze16000qnnvb365u0y4e","content":"<p>####题目描述</p>\n<blockquote>\n<p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>\n</blockquote>\n<blockquote>\n<p>示例:<br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<p>####分析：<br>这是第一题很简单，就是两层for循环然后一个一个去试，结果代码倒是通过了，可是一看时间分析比大佬的代码慢好多，于是又看了第一名的代码，果然列害，通过HashMap以值为key如果发现与存在key正好匹配的数则返回，只遍历了一遍即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-afb77ebd9864a649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>####代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 我的代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class=\"line\">                ret[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                ret[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum2(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numbers == <span class=\"keyword\">null</span> || numbers.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!map.containsKey(target - numbers[i])) &#123;</span><br><span class=\"line\">            map.put(numbers[i], i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res[<span class=\"number\">0</span>] = map.get(target - numbers[i]);</span><br><span class=\"line\">            res[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"2J8PSHE","excerpt":"####题目描述\n\n给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n示例:\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n\n####分析：\n这是第一题很简单，就是两层for循环然后一个一个去试，结果代码倒是通过了，可是一看时间分析比大佬的代码慢好多，于是又看了第一名的代码，果然列害，通过HashMap以值为key如果发现与存在key正好匹配的数则返回，只遍历了一遍即可。\n\n\n####代码：\n\n1\n2","more":"<p>####题目描述</p>\n<blockquote>\n<p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p>\n</blockquote>\n<blockquote>\n<p>示例:<br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n</blockquote>\n<p>####分析：<br>这是第一题很简单，就是两层for循环然后一个一个去试，结果代码倒是通过了，可是一看时间分析比大佬的代码慢好多，于是又看了第一名的代码，果然列害，通过HashMap以值为key如果发现与存在key正好匹配的数则返回，只遍历了一遍即可。<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-afb77ebd9864a649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>####代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 我的代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class=\"line\">                ret[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">                ret[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum2(<span class=\"keyword\">int</span>[] numbers, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numbers == <span class=\"keyword\">null</span> || numbers.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!map.containsKey(target - numbers[i])) &#123;</span><br><span class=\"line\">            map.put(numbers[i], i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res[<span class=\"number\">0</span>] = map.get(target - numbers[i]);</span><br><span class=\"line\">            res[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"####题目描述：\n>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n>你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n>示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n\n####分析：\n这道题就是模拟加法手算过程，主要是对边界值的判断，尤其是两组不等长最后一位的处理，像999+1这种要一直进位。\n\n####代码：\n```java\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode pre=new ListNode(0);\n        ListNode head=pre;\n        while (l1 != null && l2 != null) {\n            int sum = l1.val + l2.val;\n            int a = -1; //进位\n            if (sum >= 10) {\n                a = 1;\n                pre.next=new ListNode(sum % 10);\n                pre=pre.next;\n            } else {\n                pre.next=new ListNode(sum);\n                pre=pre.next;\n            }\n            l1 = l1.next;\n            l2 = l2.next;\n\n            if(a==-1) continue;\n\n            if (l2 == null & l1 == null) {\n                pre.next=new ListNode(a);\n                pre=pre.next;\n            } else if (l2 == null && l1 != null) {\n                l1.val += a;\n            } else {\n                l2.val += a;\n            }\n        }\n\n        if (l1 == null && l2 != null) {\n            while (l2 != null) {\n                if(l2.val>=10){\n                    int a=l2.val%10;\n                    l2.val=a;\n                    if(l2.next!=null){\n                        l2.next.val+=1;\n                    }else {\n                        l2.next=new ListNode(1);\n                    }\n                }\n                pre.next=new ListNode(l2.val);\n                pre=pre.next;\n                l2 = l2.next;\n            }\n        }\n\n        if (l1 != null && l2 == null) {\n            while (l1 != null) {\n                if(l1.val>=10){\n                    int a=l1.val%10;\n                    l1.val=a;\n                    if(l1.next!=null){\n                        l1.next.val+=1;\n                    }else {\n                        l1.next=new ListNode(1);\n                    }\n                }\n                pre.next=new ListNode(l1.val);\n                pre=pre.next;\n                l1 = l1.next;\n            }\n        }\n\n        return head.next;\n    }\n```\n","source":"_posts/算法集/20180818-算法集-leetcode-两数相加(Add-Two-Numbers).md","raw":"####题目描述：\n>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n>你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n>示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n\n####分析：\n这道题就是模拟加法手算过程，主要是对边界值的判断，尤其是两组不等长最后一位的处理，像999+1这种要一直进位。\n\n####代码：\n```java\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode pre=new ListNode(0);\n        ListNode head=pre;\n        while (l1 != null && l2 != null) {\n            int sum = l1.val + l2.val;\n            int a = -1; //进位\n            if (sum >= 10) {\n                a = 1;\n                pre.next=new ListNode(sum % 10);\n                pre=pre.next;\n            } else {\n                pre.next=new ListNode(sum);\n                pre=pre.next;\n            }\n            l1 = l1.next;\n            l2 = l2.next;\n\n            if(a==-1) continue;\n\n            if (l2 == null & l1 == null) {\n                pre.next=new ListNode(a);\n                pre=pre.next;\n            } else if (l2 == null && l1 != null) {\n                l1.val += a;\n            } else {\n                l2.val += a;\n            }\n        }\n\n        if (l1 == null && l2 != null) {\n            while (l2 != null) {\n                if(l2.val>=10){\n                    int a=l2.val%10;\n                    l2.val=a;\n                    if(l2.next!=null){\n                        l2.next.val+=1;\n                    }else {\n                        l2.next=new ListNode(1);\n                    }\n                }\n                pre.next=new ListNode(l2.val);\n                pre=pre.next;\n                l2 = l2.next;\n            }\n        }\n\n        if (l1 != null && l2 == null) {\n            while (l1 != null) {\n                if(l1.val>=10){\n                    int a=l1.val%10;\n                    l1.val=a;\n                    if(l1.next!=null){\n                        l1.next.val+=1;\n                    }else {\n                        l1.next=new ListNode(1);\n                    }\n                }\n                pre.next=new ListNode(l1.val);\n                pre=pre.next;\n                l1 = l1.next;\n            }\n        }\n\n        return head.next;\n    }\n```\n","slug":"算法集/20180818-算法集-leetcode-两数相加(Add-Two-Numbers)","published":1,"date":"2018-08-17T16:00:00.000Z","updated":"2021-08-17T16:21:48.473Z","title":"算法集-leetcode-两数相加(Add-Two-Numbers)","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze16000rnnvb50sd66pn","content":"<p>####题目描述：</p>\n<blockquote>\n<p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n</blockquote>\n<blockquote>\n<p>示例：<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p>\n</blockquote>\n<p>####分析：<br>这道题就是模拟加法手算过程，主要是对边界值的判断，尤其是两组不等长最后一位的处理，像999+1这种要一直进位。</p>\n<p>####代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode pre=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode head=pre;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = l1.val + l2.val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = -<span class=\"number\">1</span>; <span class=\"comment\">//进位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            a = <span class=\"number\">1</span>;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(sum);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l1 = l1.next;</span><br><span class=\"line\">        l2 = l2.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==-<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span> &amp; l1 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(a);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span> &amp;&amp; l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            l1.val += a;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l2.val += a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l2.val&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> a=l2.val%<span class=\"number\">10</span>;</span><br><span class=\"line\">                l2.val=a;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(l2.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    l2.next.val+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l2.next=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1.val&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> a=l1.val%<span class=\"number\">10</span>;</span><br><span class=\"line\">                l1.val=a;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(l1.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    l1.next.val+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l1.next=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"23PNP83","excerpt":"####题目描述：\n\n给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n示例：\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n\n####分析：\n这道题就是模拟加法手算过程，主要是对边界值的判断，尤其是两组不等长最后一位的处理，像999+1这种要一直进位。\n\n####代码：\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n","more":"<p>####题目描述：</p>\n<blockquote>\n<p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。<br>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n</blockquote>\n<blockquote>\n<p>示例：<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p>\n</blockquote>\n<p>####分析：<br>这道题就是模拟加法手算过程，主要是对边界值的判断，尤其是两组不等长最后一位的处理，像999+1这种要一直进位。</p>\n<p>####代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    ListNode pre=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode head=pre;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = l1.val + l2.val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = -<span class=\"number\">1</span>; <span class=\"comment\">//进位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            a = <span class=\"number\">1</span>;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(sum);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l1 = l1.next;</span><br><span class=\"line\">        l2 = l2.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==-<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span> &amp; l1 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(a);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span> &amp;&amp; l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            l1.val += a;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l2.val += a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l2.val&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> a=l2.val%<span class=\"number\">10</span>;</span><br><span class=\"line\">                l2.val=a;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(l2.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    l2.next.val+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l2.next=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l1.val&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> a=l1.val%<span class=\"number\">10</span>;</span><br><span class=\"line\">                l1.val=a;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(l1.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    l1.next.val+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l1.next=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre.next=<span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"从今天开始我要训练算法了，用博客记录一下\n对应代码的github链接：https://github.com/coderzc/ACode\n题目预计来源：牛客网，剑指offer，leetcode 等等（还会不断再加入别的）\n代码暂时只准备写Java实现的，以后有时间也许可能会写C++或python版，哈哈\n算法集：https://www.jianshu.com/nb/28378096\n\n**加油吧，少年！！！**\n![算法.png](https://upload-images.jianshu.io/upload_images/12637001-80ae644bc2a3e827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/算法集/20180818-算法集-初篇.md","raw":"从今天开始我要训练算法了，用博客记录一下\n对应代码的github链接：https://github.com/coderzc/ACode\n题目预计来源：牛客网，剑指offer，leetcode 等等（还会不断再加入别的）\n代码暂时只准备写Java实现的，以后有时间也许可能会写C++或python版，哈哈\n算法集：https://www.jianshu.com/nb/28378096\n\n**加油吧，少年！！！**\n![算法.png](https://upload-images.jianshu.io/upload_images/12637001-80ae644bc2a3e827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"算法集/20180818-算法集-初篇","published":1,"date":"2018-08-17T16:00:00.000Z","updated":"2021-08-17T16:21:48.473Z","title":"算法集-初篇","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze17000snnvba9nv70c0","content":"<p>从今天开始我要训练算法了，用博客记录一下<br>对应代码的github链接：<a href=\"https://github.com/coderzc/ACode\">https://github.com/coderzc/ACode</a><br>题目预计来源：牛客网，剑指offer，leetcode 等等（还会不断再加入别的）<br>代码暂时只准备写Java实现的，以后有时间也许可能会写C++或python版，哈哈<br>算法集：<a href=\"https://www.jianshu.com/nb/28378096\">https://www.jianshu.com/nb/28378096</a></p>\n<p><strong>加油吧，少年！！！</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-80ae644bc2a3e827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"算法.png\"></p>\n","site":{"data":{}},"abbrlink":"2Y5V70S","excerpt":"从今天开始我要训练算法了，用博客记录一下\n对应代码的github链接：https://github.com/coderzc/ACode\n题目预计来源：牛客网，剑指offer，leetcode 等等（还会不断再加入别的）\n代码暂时只准备写Java实现的，以后有时间也许可能会写C++或python版，哈哈\n算法集：https://www.jianshu.com/nb/28378096\n\n加油吧，少年！！！","more":"<p>从今天开始我要训练算法了，用博客记录一下<br>对应代码的github链接：<a href=\"https://github.com/coderzc/ACode\">https://github.com/coderzc/ACode</a><br>题目预计来源：牛客网，剑指offer，leetcode 等等（还会不断再加入别的）<br>代码暂时只准备写Java实现的，以后有时间也许可能会写C++或python版，哈哈<br>算法集：<a href=\"https://www.jianshu.com/nb/28378096\">https://www.jianshu.com/nb/28378096</a></p>\n<p><strong>加油吧，少年！！！</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-80ae644bc2a3e827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"算法.png\"></p>\n"},{"_content":"####题目描述：\n>找出1~n的数字中缺失的两个数\n\n####代码：\n```java\npublic class FindMissNumber {\n\n    public static int[] findMissNumber(int[] arr) {\n        if (null == arr || arr.length <= 1) {\n            return new int[]{-1, -1};\n        }\n        boolean[] b = new boolean[arr.length + 2];\n\n        int[] rets = new int[2];\n        for (int i = 0; i < arr.length; i++) {\n            b[arr[i] - 1] = true;\n        }\n\n        int j = 0;\n        for (int i = 0; i < b.length; i++) {\n            if (!b[i]) {\n                rets[j++] = i + 1;\n            }\n        }\n\n        return rets;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {2, 4, 3, 9, 5, 6, 1};\n        int[] missNumber = findMissNumber(arr);\n        for (int i = 0; i < missNumber.length; i++) {\n            System.out.println(missNumber[i]);\n        }\n    }\n\n}\n```\n","source":"_posts/算法集/20180818-算法集-找出缺失的数字.md","raw":"####题目描述：\n>找出1~n的数字中缺失的两个数\n\n####代码：\n```java\npublic class FindMissNumber {\n\n    public static int[] findMissNumber(int[] arr) {\n        if (null == arr || arr.length <= 1) {\n            return new int[]{-1, -1};\n        }\n        boolean[] b = new boolean[arr.length + 2];\n\n        int[] rets = new int[2];\n        for (int i = 0; i < arr.length; i++) {\n            b[arr[i] - 1] = true;\n        }\n\n        int j = 0;\n        for (int i = 0; i < b.length; i++) {\n            if (!b[i]) {\n                rets[j++] = i + 1;\n            }\n        }\n\n        return rets;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {2, 4, 3, 9, 5, 6, 1};\n        int[] missNumber = findMissNumber(arr);\n        for (int i = 0; i < missNumber.length; i++) {\n            System.out.println(missNumber[i]);\n        }\n    }\n\n}\n```\n","slug":"算法集/20180818-算法集-找出缺失的数字","published":1,"date":"2018-08-17T16:00:00.000Z","updated":"2021-08-17T16:21:48.473Z","title":"算法集-找出缺失的数字","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1a000tnnvbbkc85njn","content":"<p>####题目描述：</p>\n<blockquote>\n<p>找出1~n的数字中缺失的两个数</p>\n</blockquote>\n<p>####代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindMissNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] findMissNumber(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[arr.length + <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rets = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            b[arr[i] - <span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; b.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!b[i]) &#123;</span><br><span class=\"line\">                rets[j++] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] missNumber = findMissNumber(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; missNumber.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(missNumber[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":"30GBRYE","excerpt":"####题目描述：\n\n找出1~n的数字中缺失的两个数\n\n####代码：\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\npublic class FindMissNumber {\n\n    public static int[] findMissNumber(int[] arr) {\n        if (null == arr || arr.length <= 1) {\n            return new int[]{-1, -1};\n       ","more":"<p>####题目描述：</p>\n<blockquote>\n<p>找出1~n的数字中缺失的两个数</p>\n</blockquote>\n<p>####代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindMissNumber</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] findMissNumber(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[arr.length + <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] rets = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            b[arr[i] - <span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; b.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!b[i]) &#123;</span><br><span class=\"line\">                rets[j++] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] missNumber = findMissNumber(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; missNumber.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(missNumber[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"### 一. 数据结构三要素\n![数据结构.png](https://upload-images.jianshu.io/upload_images/12637001-ffa4ec0b29479f84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 二.算法基本概念\n**算法** 是对特定问题求解步骤的一种描述，它是指令的有序序列，其中每一条指令表示一个或多个操作。此外还具有下列5个重要特性。\n1. 有穷性\n2. 确定性\n3. 可行性\n4. 输入\n5. 输出\n\n### 三.算法效率的量度\n算法效率的量度是通过时间复杂度和空间复杂度来描述的。\n\n**3.1 时间复制度**\n  T(n)=O(f(n))  n表示数据规模   O(f(n)) 表示运行这个算法所需要执行的指令数，和f(n)成正比\n![其中 a，b，c，d 是常数不随n增大](https://upload-images.jianshu.io/upload_images/12637001-4b8a42d3d817a97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-1eb2c3776a6456df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-13943e5eb632aee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-72120fbaf222325f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**我们平时说的时间复杂度是指平均时间复杂度，即在所以可能输入等概率情况下**\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-54ad4d074c2647d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**3.2 空间复杂度**\n多开一个辅助数组：O(n)\n多开一个辅助二维数组：O(n^2)\n多开辅助常数：O(1)\n\n**递归调用是有空间代价的：\n递归深度如果为n 额外空间复杂度则为O(n)**\n","source":"_posts/计算机基础/20180813-数据结构-基本概念.md","raw":"### 一. 数据结构三要素\n![数据结构.png](https://upload-images.jianshu.io/upload_images/12637001-ffa4ec0b29479f84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 二.算法基本概念\n**算法** 是对特定问题求解步骤的一种描述，它是指令的有序序列，其中每一条指令表示一个或多个操作。此外还具有下列5个重要特性。\n1. 有穷性\n2. 确定性\n3. 可行性\n4. 输入\n5. 输出\n\n### 三.算法效率的量度\n算法效率的量度是通过时间复杂度和空间复杂度来描述的。\n\n**3.1 时间复制度**\n  T(n)=O(f(n))  n表示数据规模   O(f(n)) 表示运行这个算法所需要执行的指令数，和f(n)成正比\n![其中 a，b，c，d 是常数不随n增大](https://upload-images.jianshu.io/upload_images/12637001-4b8a42d3d817a97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-1eb2c3776a6456df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-13943e5eb632aee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-72120fbaf222325f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**我们平时说的时间复杂度是指平均时间复杂度，即在所以可能输入等概率情况下**\n\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-54ad4d074c2647d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**3.2 空间复杂度**\n多开一个辅助数组：O(n)\n多开一个辅助二维数组：O(n^2)\n多开辅助常数：O(1)\n\n**递归调用是有空间代价的：\n递归深度如果为n 额外空间复杂度则为O(n)**\n","slug":"计算机基础/20180813-数据结构-基本概念","published":1,"date":"2018-08-12T16:00:00.000Z","updated":"2021-08-17T18:45:34.805Z","title":"数据结构-基本概念","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1b000unnvbgb71369m","content":"<h3 id=\"一-数据结构三要素\"><a href=\"#一-数据结构三要素\" class=\"headerlink\" title=\"一. 数据结构三要素\"></a>一. 数据结构三要素</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ffa4ec0b29479f84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"数据结构.png\"></p>\n<h3 id=\"二-算法基本概念\"><a href=\"#二-算法基本概念\" class=\"headerlink\" title=\"二.算法基本概念\"></a>二.算法基本概念</h3><p><strong>算法</strong> 是对特定问题求解步骤的一种描述，它是指令的有序序列，其中每一条指令表示一个或多个操作。此外还具有下列5个重要特性。</p>\n<ol>\n<li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出</li>\n</ol>\n<h3 id=\"三-算法效率的量度\"><a href=\"#三-算法效率的量度\" class=\"headerlink\" title=\"三.算法效率的量度\"></a>三.算法效率的量度</h3><p>算法效率的量度是通过时间复杂度和空间复杂度来描述的。</p>\n<p><strong>3.1 时间复制度</strong><br>  T(n)=O(f(n))  n表示数据规模   O(f(n)) 表示运行这个算法所需要执行的指令数，和f(n)成正比<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-4b8a42d3d817a97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"其中 a，b，c，d 是常数不随n增大\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1eb2c3776a6456df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-13943e5eb632aee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-72120fbaf222325f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>我们平时说的时间复杂度是指平均时间复杂度，即在所以可能输入等概率情况下</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-54ad4d074c2647d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>3.2 空间复杂度</strong><br>多开一个辅助数组：O(n)<br>多开一个辅助二维数组：O(n^2)<br>多开辅助常数：O(1)</p>\n<p><strong>递归调用是有空间代价的：<br>递归深度如果为n 额外空间复杂度则为O(n)</strong></p>\n","site":{"data":{}},"abbrlink":"E4XA1K","excerpt":"一. 数据结构三要素\n\n\n二.算法基本概念\n算法 是对特定问题求解步骤的一种描述，它是指令的有序序列，其中每一条指令表示一个或多个操作。此外还具有下列5个重要特性。\n\n 1. 有穷性\n 2. 确定性\n 3. 可行性\n 4. 输入\n 5. 输出\n\n三.算法效率的量度\n算法效率的量度是通过时间复杂度和空间复杂度来描述的。\n\n3.1 时间复制度\nT(n)=O(f(n)) n表示数据规模 O(f(n)) 表示运行这个算法所需要执行的指令数，和f(n)成正比\n\n\n\n\n\n\n\n\n我们平时说的时间复杂度是指平均时间复杂度，即在所以可能输入等概率情况下\n\n\n\n3.2 空间复杂度\n多开一个辅助数组：O(n)\n多开","more":"<h3 id=\"一-数据结构三要素\"><a href=\"#一-数据结构三要素\" class=\"headerlink\" title=\"一. 数据结构三要素\"></a>一. 数据结构三要素</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ffa4ec0b29479f84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"数据结构.png\"></p>\n<h3 id=\"二-算法基本概念\"><a href=\"#二-算法基本概念\" class=\"headerlink\" title=\"二.算法基本概念\"></a>二.算法基本概念</h3><p><strong>算法</strong> 是对特定问题求解步骤的一种描述，它是指令的有序序列，其中每一条指令表示一个或多个操作。此外还具有下列5个重要特性。</p>\n<ol>\n<li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出</li>\n</ol>\n<h3 id=\"三-算法效率的量度\"><a href=\"#三-算法效率的量度\" class=\"headerlink\" title=\"三.算法效率的量度\"></a>三.算法效率的量度</h3><p>算法效率的量度是通过时间复杂度和空间复杂度来描述的。</p>\n<p><strong>3.1 时间复制度</strong><br>  T(n)=O(f(n))  n表示数据规模   O(f(n)) 表示运行这个算法所需要执行的指令数，和f(n)成正比<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-4b8a42d3d817a97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"其中 a，b，c，d 是常数不随n增大\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-1eb2c3776a6456df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-13943e5eb632aee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-72120fbaf222325f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>我们平时说的时间复杂度是指平均时间复杂度，即在所以可能输入等概率情况下</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-54ad4d074c2647d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>3.2 空间复杂度</strong><br>多开一个辅助数组：O(n)<br>多开一个辅助二维数组：O(n^2)<br>多开辅助常数：O(1)</p>\n<p><strong>递归调用是有空间代价的：<br>递归深度如果为n 额外空间复杂度则为O(n)</strong></p>\n"},{"_content":"#### 排序算法总览\n![排序算法](https://upload-images.jianshu.io/upload_images/12637001-5c7c3186ffc1d8e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 冒泡排序（Bubble Sort）\n>从前往后两两比较相邻元素的值，若为逆序则交换他们，直到（n-1+i），若某次遍历未发现有逆序情况证明已经有序则应该直接返回。\n![Bubble Sort](https://upload-images.jianshu.io/upload_images/12637001-68fca7881fa55a71.gif?imageMogr2/auto-orient/strip)\n\n\n```java\n    /**\n     * 1.冒泡排序\n     * 每次在0～(n-1-i)中将最大的一步一步冒泡到最后\n     *\n     * @param arr\n     */\n    private static void bubbleSort(int arr[]) {\n        int n = arr.length;\n        boolean flag = false;//是否已经正序\n        for (int i = 0; !flag; i++) {\n            flag = true;\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    swap(arr, j, j + 1);\n                    flag = false;\n                }\n            }\n        }\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于对于相等元素不会交换所以 => 稳定\n\n#### 选择排序 （Selection Sort）\n>每次找出i~(n-1) 最小值 与第i位交换\n\n![Selection Sort](https://upload-images.jianshu.io/upload_images/12637001-11c29a40f2286605.gif?imageMogr2/auto-orient/strip)\n\n```java\n    /**\n     * 2.选择排序\n     * 每次从i～(n-1)找出最小元素放在最前面\n     *\n     * @param arr\n     */\n    private static void selectSort(int arr[]) {\n        int n = arr.length;\n        int minIndex = 0;\n        for (int i = 0; i < n; i++) {\n            minIndex = i;//假定最小元素是第i个\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j] < arr[minIndex])\n                    minIndex = j;\n            }\n            swap(arr, minIndex, i);//把i～n中最小元素和第i位交换\n        }\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于最小值元素会直接与i位元素互换所以可能造成相同元素次序改变 => 不稳定\n同样适用于链式存储结构\n\n#### 直接插入排序（Insertion Sort）\n>从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大\n\n![Insertion Sort](https://upload-images.jianshu.io/upload_images/12637001-490c7c6970c21b77.gif?imageMogr2/auto-orient/strip)\n\n```java\n    /**\n     * 3.直接插入排序\n     * 从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大\n     *\n     * @param arr\n     */\n    private static void insertionSort(int arr[]) {\n        int n = arr.length;\n        int temp;\n        for (int i = 1; i < n; i++) {\n            temp = arr[i];//待插入的元素\n            int j = i;\n            for (; j > 0 && temp < arr[j - 1]; j--) {\n                arr[j] = arr[j - 1];\n            }\n            arr[j] = temp;\n        }\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于都是向前先比较在插入小于等于当前元素不会移动 => 稳定\n\n#### 希尔排序（Shell Sort）\n>希尔排序，又称缩小增量排序，是插入排序变形，基于插入排序适用于基本有序和数据量小的基本思想：按照增量序列函数每次按增量提取出相差h的元素组成待排序列进行直接插入排序，然后缩小增量后在排序知道增量变为1完成最后一次排序\n\n![Shell Sort](https://upload-images.jianshu.io/upload_images/12637001-c5f7a62cc2d6a106.gif?imageMogr2/auto-orient/strip)\n\n```java\n    private static void shellSort2(int arr[]) {\n        int n = arr.length;\n\n        int h = n / 2;//初始增序起始\n        while (h >= 1) {//获得增序序列并不断缩小h\n\n            int temp;\n            for (int i = h; i < n; i++) {//从第一个h位元素开始，每次和所有前面与它相差h的元素序列做插入排序\n                temp = arr[i];//待插入的元素\n                int j = i;\n                for (; j >= h && temp < arr[j - h]; j -= h) {//这里的h是 最大值而不是准确数字但该序列第二位一定大于等于h\n                    arr[j] = arr[j - h];\n                }\n                arr[j] = temp;\n            }\n\n            h = h / 2;\n        }\n\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于每次划分子序列再排序可能改变相同元素的相对次序 => 不稳定\n\n#### 归并排序（Merge Sort）\n>基本思想：将多个有序序列组合成一个新的有序表，自底向上归并应该是先2个元素合并，然后2个长度为2的元素合并，然后2个长度为4的元素合并直到直到子序列长度>=n\n\n```java\npackage basicAlgorithm.sort;\n\n/**\n * 归并排序\n */\npublic class MergeSort {\n\n    private static int[] aux;//辅助函数\n\n\n    /**\n     * 将[l...r-1]与[r..rEnd]归并\n     * @param arr\n     * @param l\n     * @param r\n     * @param rEnd\n     */\n    private static void merge(int arr[], int l, int r, int rEnd) {\n        int temp = l;\n        int lEnd = r - 1;\n\n        //先将待排序两组子序列复制到辅助数组中\n        for (int i = l; i <= rEnd; i++) {\n            aux[i] = arr[i];\n        }\n\n        while (l <= lEnd && r <= rEnd) {\n            if (aux[l] < aux[r]) {\n                arr[temp++] = aux[l++];\n            } else {\n                arr[temp++] = aux[r++];\n            }\n        }\n\n        //将另一边剩下的复制到原数组\n\n        while (l <= lEnd) {\n            arr[temp++] = aux[l++];\n        }\n\n        // (右边的不用复制吧,本来就在原数组)\n        while (r<=rEnd){\n            arr[temp++]=aux[r++];\n        }\n    }\n\n    /**\n     * 自底向上的归并排序(递归写法)\n     * @param arr\n     * @param L\n     * @param R\n     */\n    private static void mergeSort(int arr[], int L, int R) {\n        if (L >= R) {\n            return;\n        }\n        int mid = (L + R) / 2;\n        mergeSort(arr, L, mid);\n        mergeSort(arr, mid + 1, R);\n        if (arr[mid] > arr[mid + 1]) {//如果左右已经有序则不归并\n            merge(arr, L, mid + 1, R);\n        }\n    }\n\n\n    /**\n     * 自底向上的归并排序(迭代写法)\n     * @param arr\n     */\n    private static void mergeSortBU(int arr[]) {\n        int n = arr.length;\n        for (int size = 1; size < n; size = 2*size) { //size 表示每次将2个size大小的序列归并成一个序列\n            for (int i = 0; i + size < n; i = i + (size * 2)) {\n                merge(arr, i, i + size, Math.min(i + (size * 2) - 1, n - 1));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int array[] = {9, 8, 19, 6, 5, 3, 4, 2, 1};\n\n        //初始化辅助数组\n        aux = new int[array.length];\n\n//        mergeSort(array, 0, array.length - 1);\n\n        mergeSortBU(array);\n\n        for (int a : array) {\n            System.out.println(a);\n        }\n    }\n}\n\n```\n>空间复杂度:O(n)  辅助数组\n时间复杂度：O(nlogn)\n稳定性：因为依此合并没有交换操作所以 => 稳定\n\n#### 快速排序（Quick Sort）\n>号称21世纪最优化的算法来了，快排也是分治思想的应用,基本思想就是先设一个基准点然后将序列小于基准点的部分放到基准点左面小于基准点的部分放到基准点右面，然后在递归的处理左面和右面。快排有很多版本我下面代码的是最常见双路快排版\n\n![Quick Sort](https://upload-images.jianshu.io/upload_images/12637001-0d9946c5eed0f811.gif?imageMogr2/auto-orient/strip)\n```java\n    //双路快排\n    private static void quickSort2(int[] array, int l, int r) {\n        if (l >= r) {\n            return;\n        }\n\n        swap(array, l, ((int) (Math.random() * (r - l)) + l));\n        int pivote = array[l];//基点放到最左边\n\n        int i = l + 1;//左边比基点小的标志位\n        int j = r;//右边比基点大的标志位\n        while (true) {\n            while (i <= r && array[i] < pivote) {\n                i++;\n            }\n            while (j >= l + 1 && array[j] > pivote) {\n                j--;\n            }\n\n            if (i >= j) break;\n            else swap(array, i++, j--);\n\n        }\n\n        swap(array, l, j);\n\n        quickSort2(array, l, j - 1);\n        quickSort2(array, j + 1, r);\n    }\n\n    private static void quickSort(int[] array) {\n        quickSort2(array, 0, array.length - 1);\n    }\n```\n>空间复杂度:O(logn)  由于快排要借助递归实现所以要消耗额外系统栈空间平均情况下栈深log2(n)\n时间复杂度:O(nlogn)\n稳定性：因为选取基准点的过程中可能会改变相同元素次序 => 不稳定\n另外序列越无序越随机快排效率越高，而现实中的序列大多是随机分布的所以快排广泛应用\n\n#### 堆排序（Heap Sort）\n>堆是一种树形结构，是一颗完全二叉树，并满足任意节点都大于他的子结点（大根堆）\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-192a5e776e41a920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![Heap Sort](https://upload-images.jianshu.io/upload_images/12637001-87ddf8670e8b93d7.gif?imageMogr2/auto-orient/strip)\n\n```java\n    private static void sink(int[] array, int n, int k) {//下沉\n        while (2 * k + 1 <= n - 1) {\n            int j = 2 * k + 1;//左孩子索引\n            if (j + 1 <= n - 1 && array[j + 1] > array[j]) j++;//如果有右孩子并且右孩子比左孩子大 j 换成右孩子索引\n\n            if (array[j] > array[k]) {\n                swap(array, j, k);\n                k = j;\n            } else {\n                break;\n            }\n        }\n    }\n\n    private static void heapSort(int[] array) {\n        int n = array.length;\n\n        //heapify 大根堆建成\n        for (int i = (n - 1) / 2; i >= 0; i--) {\n            sink(array, n, i);\n        }\n\n        //排序\n        for (int j = n - 1; j > 0; j--) {\n            swap(array, 0, j);//把最大的和最后以为交换\n            sink(array, j, 0);//缩小对的\n        }\n    }\n```\n>*BuildHeap* 时间复杂度O(nlogn)\n*heapify* 时间复杂度O(n)\n稳定性：=> 不稳定\n空间复杂度：O(1)\n\n\n#### 计数排序（Counting Sort）\n>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n\n![Insertion Sort](https://upload-images.jianshu.io/upload_images/12637001-d8bfc8c0cf816174.gif?imageMogr2/auto-orient/strip)\n\n#### 桶排序（Bucket Sort）\n>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n1. 在额外空间充足的情况下，尽量增大桶的数量\n2. 使用的映射函数能够将输入的N个数据均匀的分配到K个桶中\n\n#### 基数排序（Radix Sort）\n>分为 MSD(最高位优先) 和 LSD(最低位优先)\n\n![LSD](https://upload-images.jianshu.io/upload_images/12637001-ae25b15703da08b7.gif?imageMogr2/auto-orient/strip)\n\n#### 基数排序 vs 计数排序 vs 桶排序\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-89637b46ae6ecb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中, d 表示位数， k 在基数排序中表示 k 进制，在桶排序中表示桶的个数， maxV 和 minV 表示元\n素最大值和最小值。\n\n*   首先，基数排序和计数排序都可以看作是桶排序。\n*   计数排序本质上是一种特殊的桶排序，当桶的个数取最大( maxV-minV+1 )的时候，就变成了计数排序。\n*   基数排序也是一种桶排序。桶排序是按值区间划分桶，基数排序是按数位来划分；基数排序可以看做是多轮桶排序，每个数位上都进行一轮桶排序。\n*   当用最大值作为基数时，基数排序就退化成了计数排序。\n*   当使用2进制时， k=2 最小，位数 d 最大，时间复杂度 O(nd) 会变大，空间复杂度 O(n+k) 会变小。当用最大值作为基数时， k=maxV 最大， d=1 最小，此时时间复杂度 O(nd) 变小，但是空间复杂度 O(n+k) 会急剧增大，此时基数排序退化成了计数排序。\n\n#### 总结\n![排序算法](https://upload-images.jianshu.io/upload_images/12637001-274c62246d49b2f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/计算机基础/20180814-数据结构-排序.md","raw":"#### 排序算法总览\n![排序算法](https://upload-images.jianshu.io/upload_images/12637001-5c7c3186ffc1d8e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 冒泡排序（Bubble Sort）\n>从前往后两两比较相邻元素的值，若为逆序则交换他们，直到（n-1+i），若某次遍历未发现有逆序情况证明已经有序则应该直接返回。\n![Bubble Sort](https://upload-images.jianshu.io/upload_images/12637001-68fca7881fa55a71.gif?imageMogr2/auto-orient/strip)\n\n\n```java\n    /**\n     * 1.冒泡排序\n     * 每次在0～(n-1-i)中将最大的一步一步冒泡到最后\n     *\n     * @param arr\n     */\n    private static void bubbleSort(int arr[]) {\n        int n = arr.length;\n        boolean flag = false;//是否已经正序\n        for (int i = 0; !flag; i++) {\n            flag = true;\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    swap(arr, j, j + 1);\n                    flag = false;\n                }\n            }\n        }\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于对于相等元素不会交换所以 => 稳定\n\n#### 选择排序 （Selection Sort）\n>每次找出i~(n-1) 最小值 与第i位交换\n\n![Selection Sort](https://upload-images.jianshu.io/upload_images/12637001-11c29a40f2286605.gif?imageMogr2/auto-orient/strip)\n\n```java\n    /**\n     * 2.选择排序\n     * 每次从i～(n-1)找出最小元素放在最前面\n     *\n     * @param arr\n     */\n    private static void selectSort(int arr[]) {\n        int n = arr.length;\n        int minIndex = 0;\n        for (int i = 0; i < n; i++) {\n            minIndex = i;//假定最小元素是第i个\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j] < arr[minIndex])\n                    minIndex = j;\n            }\n            swap(arr, minIndex, i);//把i～n中最小元素和第i位交换\n        }\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于最小值元素会直接与i位元素互换所以可能造成相同元素次序改变 => 不稳定\n同样适用于链式存储结构\n\n#### 直接插入排序（Insertion Sort）\n>从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大\n\n![Insertion Sort](https://upload-images.jianshu.io/upload_images/12637001-490c7c6970c21b77.gif?imageMogr2/auto-orient/strip)\n\n```java\n    /**\n     * 3.直接插入排序\n     * 从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大\n     *\n     * @param arr\n     */\n    private static void insertionSort(int arr[]) {\n        int n = arr.length;\n        int temp;\n        for (int i = 1; i < n; i++) {\n            temp = arr[i];//待插入的元素\n            int j = i;\n            for (; j > 0 && temp < arr[j - 1]; j--) {\n                arr[j] = arr[j - 1];\n            }\n            arr[j] = temp;\n        }\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于都是向前先比较在插入小于等于当前元素不会移动 => 稳定\n\n#### 希尔排序（Shell Sort）\n>希尔排序，又称缩小增量排序，是插入排序变形，基于插入排序适用于基本有序和数据量小的基本思想：按照增量序列函数每次按增量提取出相差h的元素组成待排序列进行直接插入排序，然后缩小增量后在排序知道增量变为1完成最后一次排序\n\n![Shell Sort](https://upload-images.jianshu.io/upload_images/12637001-c5f7a62cc2d6a106.gif?imageMogr2/auto-orient/strip)\n\n```java\n    private static void shellSort2(int arr[]) {\n        int n = arr.length;\n\n        int h = n / 2;//初始增序起始\n        while (h >= 1) {//获得增序序列并不断缩小h\n\n            int temp;\n            for (int i = h; i < n; i++) {//从第一个h位元素开始，每次和所有前面与它相差h的元素序列做插入排序\n                temp = arr[i];//待插入的元素\n                int j = i;\n                for (; j >= h && temp < arr[j - h]; j -= h) {//这里的h是 最大值而不是准确数字但该序列第二位一定大于等于h\n                    arr[j] = arr[j - h];\n                }\n                arr[j] = temp;\n            }\n\n            h = h / 2;\n        }\n\n    }\n```\n>空间复杂度:O(1)  \n时间复杂度：O(n^2)\n稳定性：由于每次划分子序列再排序可能改变相同元素的相对次序 => 不稳定\n\n#### 归并排序（Merge Sort）\n>基本思想：将多个有序序列组合成一个新的有序表，自底向上归并应该是先2个元素合并，然后2个长度为2的元素合并，然后2个长度为4的元素合并直到直到子序列长度>=n\n\n```java\npackage basicAlgorithm.sort;\n\n/**\n * 归并排序\n */\npublic class MergeSort {\n\n    private static int[] aux;//辅助函数\n\n\n    /**\n     * 将[l...r-1]与[r..rEnd]归并\n     * @param arr\n     * @param l\n     * @param r\n     * @param rEnd\n     */\n    private static void merge(int arr[], int l, int r, int rEnd) {\n        int temp = l;\n        int lEnd = r - 1;\n\n        //先将待排序两组子序列复制到辅助数组中\n        for (int i = l; i <= rEnd; i++) {\n            aux[i] = arr[i];\n        }\n\n        while (l <= lEnd && r <= rEnd) {\n            if (aux[l] < aux[r]) {\n                arr[temp++] = aux[l++];\n            } else {\n                arr[temp++] = aux[r++];\n            }\n        }\n\n        //将另一边剩下的复制到原数组\n\n        while (l <= lEnd) {\n            arr[temp++] = aux[l++];\n        }\n\n        // (右边的不用复制吧,本来就在原数组)\n        while (r<=rEnd){\n            arr[temp++]=aux[r++];\n        }\n    }\n\n    /**\n     * 自底向上的归并排序(递归写法)\n     * @param arr\n     * @param L\n     * @param R\n     */\n    private static void mergeSort(int arr[], int L, int R) {\n        if (L >= R) {\n            return;\n        }\n        int mid = (L + R) / 2;\n        mergeSort(arr, L, mid);\n        mergeSort(arr, mid + 1, R);\n        if (arr[mid] > arr[mid + 1]) {//如果左右已经有序则不归并\n            merge(arr, L, mid + 1, R);\n        }\n    }\n\n\n    /**\n     * 自底向上的归并排序(迭代写法)\n     * @param arr\n     */\n    private static void mergeSortBU(int arr[]) {\n        int n = arr.length;\n        for (int size = 1; size < n; size = 2*size) { //size 表示每次将2个size大小的序列归并成一个序列\n            for (int i = 0; i + size < n; i = i + (size * 2)) {\n                merge(arr, i, i + size, Math.min(i + (size * 2) - 1, n - 1));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int array[] = {9, 8, 19, 6, 5, 3, 4, 2, 1};\n\n        //初始化辅助数组\n        aux = new int[array.length];\n\n//        mergeSort(array, 0, array.length - 1);\n\n        mergeSortBU(array);\n\n        for (int a : array) {\n            System.out.println(a);\n        }\n    }\n}\n\n```\n>空间复杂度:O(n)  辅助数组\n时间复杂度：O(nlogn)\n稳定性：因为依此合并没有交换操作所以 => 稳定\n\n#### 快速排序（Quick Sort）\n>号称21世纪最优化的算法来了，快排也是分治思想的应用,基本思想就是先设一个基准点然后将序列小于基准点的部分放到基准点左面小于基准点的部分放到基准点右面，然后在递归的处理左面和右面。快排有很多版本我下面代码的是最常见双路快排版\n\n![Quick Sort](https://upload-images.jianshu.io/upload_images/12637001-0d9946c5eed0f811.gif?imageMogr2/auto-orient/strip)\n```java\n    //双路快排\n    private static void quickSort2(int[] array, int l, int r) {\n        if (l >= r) {\n            return;\n        }\n\n        swap(array, l, ((int) (Math.random() * (r - l)) + l));\n        int pivote = array[l];//基点放到最左边\n\n        int i = l + 1;//左边比基点小的标志位\n        int j = r;//右边比基点大的标志位\n        while (true) {\n            while (i <= r && array[i] < pivote) {\n                i++;\n            }\n            while (j >= l + 1 && array[j] > pivote) {\n                j--;\n            }\n\n            if (i >= j) break;\n            else swap(array, i++, j--);\n\n        }\n\n        swap(array, l, j);\n\n        quickSort2(array, l, j - 1);\n        quickSort2(array, j + 1, r);\n    }\n\n    private static void quickSort(int[] array) {\n        quickSort2(array, 0, array.length - 1);\n    }\n```\n>空间复杂度:O(logn)  由于快排要借助递归实现所以要消耗额外系统栈空间平均情况下栈深log2(n)\n时间复杂度:O(nlogn)\n稳定性：因为选取基准点的过程中可能会改变相同元素次序 => 不稳定\n另外序列越无序越随机快排效率越高，而现实中的序列大多是随机分布的所以快排广泛应用\n\n#### 堆排序（Heap Sort）\n>堆是一种树形结构，是一颗完全二叉树，并满足任意节点都大于他的子结点（大根堆）\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-192a5e776e41a920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![Heap Sort](https://upload-images.jianshu.io/upload_images/12637001-87ddf8670e8b93d7.gif?imageMogr2/auto-orient/strip)\n\n```java\n    private static void sink(int[] array, int n, int k) {//下沉\n        while (2 * k + 1 <= n - 1) {\n            int j = 2 * k + 1;//左孩子索引\n            if (j + 1 <= n - 1 && array[j + 1] > array[j]) j++;//如果有右孩子并且右孩子比左孩子大 j 换成右孩子索引\n\n            if (array[j] > array[k]) {\n                swap(array, j, k);\n                k = j;\n            } else {\n                break;\n            }\n        }\n    }\n\n    private static void heapSort(int[] array) {\n        int n = array.length;\n\n        //heapify 大根堆建成\n        for (int i = (n - 1) / 2; i >= 0; i--) {\n            sink(array, n, i);\n        }\n\n        //排序\n        for (int j = n - 1; j > 0; j--) {\n            swap(array, 0, j);//把最大的和最后以为交换\n            sink(array, j, 0);//缩小对的\n        }\n    }\n```\n>*BuildHeap* 时间复杂度O(nlogn)\n*heapify* 时间复杂度O(n)\n稳定性：=> 不稳定\n空间复杂度：O(1)\n\n\n#### 计数排序（Counting Sort）\n>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n\n![Insertion Sort](https://upload-images.jianshu.io/upload_images/12637001-d8bfc8c0cf816174.gif?imageMogr2/auto-orient/strip)\n\n#### 桶排序（Bucket Sort）\n>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n1. 在额外空间充足的情况下，尽量增大桶的数量\n2. 使用的映射函数能够将输入的N个数据均匀的分配到K个桶中\n\n#### 基数排序（Radix Sort）\n>分为 MSD(最高位优先) 和 LSD(最低位优先)\n\n![LSD](https://upload-images.jianshu.io/upload_images/12637001-ae25b15703da08b7.gif?imageMogr2/auto-orient/strip)\n\n#### 基数排序 vs 计数排序 vs 桶排序\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-89637b46ae6ecb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其中, d 表示位数， k 在基数排序中表示 k 进制，在桶排序中表示桶的个数， maxV 和 minV 表示元\n素最大值和最小值。\n\n*   首先，基数排序和计数排序都可以看作是桶排序。\n*   计数排序本质上是一种特殊的桶排序，当桶的个数取最大( maxV-minV+1 )的时候，就变成了计数排序。\n*   基数排序也是一种桶排序。桶排序是按值区间划分桶，基数排序是按数位来划分；基数排序可以看做是多轮桶排序，每个数位上都进行一轮桶排序。\n*   当用最大值作为基数时，基数排序就退化成了计数排序。\n*   当使用2进制时， k=2 最小，位数 d 最大，时间复杂度 O(nd) 会变大，空间复杂度 O(n+k) 会变小。当用最大值作为基数时， k=maxV 最大， d=1 最小，此时时间复杂度 O(nd) 变小，但是空间复杂度 O(n+k) 会急剧增大，此时基数排序退化成了计数排序。\n\n#### 总结\n![排序算法](https://upload-images.jianshu.io/upload_images/12637001-274c62246d49b2f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"计算机基础/20180814-数据结构-排序","published":1,"date":"2018-08-13T16:00:00.000Z","updated":"2021-08-17T18:45:34.805Z","title":"数据结构-排序","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1b000vnnvb8wln1iz5","content":"<h4 id=\"排序算法总览\"><a href=\"#排序算法总览\" class=\"headerlink\" title=\"排序算法总览\"></a>排序算法总览</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-5c7c3186ffc1d8e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"排序算法\"></p>\n<h4 id=\"冒泡排序（Bubble-Sort）\"><a href=\"#冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"冒泡排序（Bubble Sort）\"></a>冒泡排序（Bubble Sort）</h4><blockquote>\n<p>从前往后两两比较相邻元素的值，若为逆序则交换他们，直到（n-1+i），若某次遍历未发现有逆序情况证明已经有序则应该直接返回。<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-68fca7881fa55a71.gif?imageMogr2/auto-orient/strip\" alt=\"Bubble Sort\"></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次在0～(n-1-i)中将最大的一步一步冒泡到最后</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;<span class=\"comment\">//是否已经正序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; !flag; i++) &#123;</span><br><span class=\"line\">        flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于对于相等元素不会交换所以 =&gt; 稳定</p>\n</blockquote>\n<h4 id=\"选择排序-（Selection-Sort）\"><a href=\"#选择排序-（Selection-Sort）\" class=\"headerlink\" title=\"选择排序 （Selection Sort）\"></a>选择排序 （Selection Sort）</h4><blockquote>\n<p>每次找出i~(n-1) 最小值 与第i位交换</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-11c29a40f2286605.gif?imageMogr2/auto-orient/strip\" alt=\"Selection Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.选择排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次从i～(n-1)找出最小元素放在最前面</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        minIndex = i;<span class=\"comment\">//假定最小元素是第i个</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, minIndex, i);<span class=\"comment\">//把i～n中最小元素和第i位交换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于最小值元素会直接与i位元素互换所以可能造成相同元素次序改变 =&gt; 不稳定<br>同样适用于链式存储结构</p>\n</blockquote>\n<h4 id=\"直接插入排序（Insertion-Sort）\"><a href=\"#直接插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"直接插入排序（Insertion Sort）\"></a>直接插入排序（Insertion Sort）</h4><blockquote>\n<p>从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-490c7c6970c21b77.gif?imageMogr2/auto-orient/strip\" alt=\"Insertion Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.直接插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        temp = arr[i];<span class=\"comment\">//待插入的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; j &gt; <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j - <span class=\"number\">1</span>]; j--) &#123;</span><br><span class=\"line\">            arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于都是向前先比较在插入小于等于当前元素不会移动 =&gt; 稳定</p>\n</blockquote>\n<h4 id=\"希尔排序（Shell-Sort）\"><a href=\"#希尔排序（Shell-Sort）\" class=\"headerlink\" title=\"希尔排序（Shell Sort）\"></a>希尔排序（Shell Sort）</h4><blockquote>\n<p>希尔排序，又称缩小增量排序，是插入排序变形，基于插入排序适用于基本有序和数据量小的基本思想：按照增量序列函数每次按增量提取出相差h的元素组成待排序列进行直接插入排序，然后缩小增量后在排序知道增量变为1完成最后一次排序</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-c5f7a62cc2d6a106.gif?imageMogr2/auto-orient/strip\" alt=\"Shell Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = n / <span class=\"number\">2</span>;<span class=\"comment\">//初始增序起始</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>) &#123;<span class=\"comment\">//获得增序序列并不断缩小h</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; n; i++) &#123;<span class=\"comment\">//从第一个h位元素开始，每次和所有前面与它相差h的元素序列做插入排序</span></span><br><span class=\"line\">            temp = arr[i];<span class=\"comment\">//待插入的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= h &amp;&amp; temp &lt; arr[j - h]; j -= h) &#123;<span class=\"comment\">//这里的h是 最大值而不是准确数字但该序列第二位一定大于等于h</span></span><br><span class=\"line\">                arr[j] = arr[j - h];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        h = h / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于每次划分子序列再排序可能改变相同元素的相对次序 =&gt; 不稳定</p>\n</blockquote>\n<h4 id=\"归并排序（Merge-Sort）\"><a href=\"#归并排序（Merge-Sort）\" class=\"headerlink\" title=\"归并排序（Merge Sort）\"></a>归并排序（Merge Sort）</h4><blockquote>\n<p>基本思想：将多个有序序列组合成一个新的有序表，自底向上归并应该是先2个元素合并，然后2个长度为2的元素合并，然后2个长度为4的元素合并直到直到子序列长度&gt;=n</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basicAlgorithm.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 归并排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] aux;<span class=\"comment\">//辅助函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将[l...r-1]与[r..rEnd]归并</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rEnd</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rEnd)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = l;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lEnd = r - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先将待排序两组子序列复制到辅助数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= rEnd; i++) &#123;</span><br><span class=\"line\">            aux[i] = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= lEnd &amp;&amp; r &lt;= rEnd) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aux[l] &lt; aux[r]) &#123;</span><br><span class=\"line\">                arr[temp++] = aux[l++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                arr[temp++] = aux[r++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将另一边剩下的复制到原数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= lEnd) &#123;</span><br><span class=\"line\">            arr[temp++] = aux[l++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// (右边的不用复制吧,本来就在原数组)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r&lt;=rEnd)&#123;</span><br><span class=\"line\">            arr[temp++]=aux[r++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自底向上的归并排序(递归写法)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> L</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> R</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &gt;= R) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (L + R) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        mergeSort(arr, L, mid);</span><br><span class=\"line\">        mergeSort(arr, mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mid] &gt; arr[mid + <span class=\"number\">1</span>]) &#123;<span class=\"comment\">//如果左右已经有序则不归并</span></span><br><span class=\"line\">            merge(arr, L, mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自底向上的归并排序(迭代写法)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSortBU</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> size = <span class=\"number\">1</span>; size &lt; n; size = <span class=\"number\">2</span>*size) &#123; <span class=\"comment\">//size 表示每次将2个size大小的序列归并成一个序列</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i + size &lt; n; i = i + (size * <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">                merge(arr, i, i + size, Math.min(i + (size * <span class=\"number\">2</span>) - <span class=\"number\">1</span>, n - <span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = &#123;<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">19</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化辅助数组</span></span><br><span class=\"line\">        aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        mergeSort(array, 0, array.length - 1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        mergeSortBU(array);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a : array) &#123;</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(n)  辅助数组<br>时间复杂度：O(nlogn)<br>稳定性：因为依此合并没有交换操作所以 =&gt; 稳定</p>\n</blockquote>\n<h4 id=\"快速排序（Quick-Sort）\"><a href=\"#快速排序（Quick-Sort）\" class=\"headerlink\" title=\"快速排序（Quick Sort）\"></a>快速排序（Quick Sort）</h4><blockquote>\n<p>号称21世纪最优化的算法来了，快排也是分治思想的应用,基本思想就是先设一个基准点然后将序列小于基准点的部分放到基准点左面小于基准点的部分放到基准点右面，然后在递归的处理左面和右面。快排有很多版本我下面代码的是最常见双路快排版</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-0d9946c5eed0f811.gif?imageMogr2/auto-orient/strip\" alt=\"Quick Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双路快排</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    swap(array, l, ((<span class=\"keyword\">int</span>) (Math.random() * (r - l)) + l));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivote = array[l];<span class=\"comment\">//基点放到最左边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>;<span class=\"comment\">//左边比基点小的标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = r;<span class=\"comment\">//右边比基点大的标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= r &amp;&amp; array[i] &lt; pivote) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= l + <span class=\"number\">1</span> &amp;&amp; array[j] &gt; pivote) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> swap(array, i++, j--);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    swap(array, l, j);</span><br><span class=\"line\"></span><br><span class=\"line\">    quickSort2(array, l, j - <span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort2(array, j + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    quickSort2(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(logn)  由于快排要借助递归实现所以要消耗额外系统栈空间平均情况下栈深log2(n)<br>时间复杂度:O(nlogn)<br>稳定性：因为选取基准点的过程中可能会改变相同元素次序 =&gt; 不稳定<br>另外序列越无序越随机快排效率越高，而现实中的序列大多是随机分布的所以快排广泛应用</p>\n</blockquote>\n<h4 id=\"堆排序（Heap-Sort）\"><a href=\"#堆排序（Heap-Sort）\" class=\"headerlink\" title=\"堆排序（Heap Sort）\"></a>堆排序（Heap Sort）</h4><blockquote>\n<p>堆是一种树形结构，是一颗完全二叉树，并满足任意节点都大于他的子结点（大根堆）<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-192a5e776e41a920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-87ddf8670e8b93d7.gif?imageMogr2/auto-orient/strip\" alt=\"Heap Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;<span class=\"comment\">//下沉</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt;= n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;<span class=\"comment\">//左孩子索引</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt;= n - <span class=\"number\">1</span> &amp;&amp; array[j + <span class=\"number\">1</span>] &gt; array[j]) j++;<span class=\"comment\">//如果有右孩子并且右孩子比左孩子大 j 换成右孩子索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[j] &gt; array[k]) &#123;</span><br><span class=\"line\">            swap(array, j, k);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//heapify 大根堆建成</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        sink(array, n, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        swap(array, <span class=\"number\">0</span>, j);<span class=\"comment\">//把最大的和最后以为交换</span></span><br><span class=\"line\">        sink(array, j, <span class=\"number\">0</span>);<span class=\"comment\">//缩小对的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><em>BuildHeap</em> 时间复杂度O(nlogn)<br><em>heapify</em> 时间复杂度O(n)<br>稳定性：=&gt; 不稳定<br>空间复杂度：O(1)</p>\n</blockquote>\n<h4 id=\"计数排序（Counting-Sort）\"><a href=\"#计数排序（Counting-Sort）\" class=\"headerlink\" title=\"计数排序（Counting Sort）\"></a>计数排序（Counting Sort）</h4><blockquote>\n<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d8bfc8c0cf816174.gif?imageMogr2/auto-orient/strip\" alt=\"Insertion Sort\"></p>\n<h4 id=\"桶排序（Bucket-Sort）\"><a href=\"#桶排序（Bucket-Sort）\" class=\"headerlink\" title=\"桶排序（Bucket Sort）\"></a>桶排序（Bucket Sort）</h4><blockquote>\n<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>\n</blockquote>\n<ol>\n<li>在额外空间充足的情况下，尽量增大桶的数量</li>\n<li>使用的映射函数能够将输入的N个数据均匀的分配到K个桶中</li>\n</ol>\n<h4 id=\"基数排序（Radix-Sort）\"><a href=\"#基数排序（Radix-Sort）\" class=\"headerlink\" title=\"基数排序（Radix Sort）\"></a>基数排序（Radix Sort）</h4><blockquote>\n<p>分为 MSD(最高位优先) 和 LSD(最低位优先)</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ae25b15703da08b7.gif?imageMogr2/auto-orient/strip\" alt=\"LSD\"></p>\n<h4 id=\"基数排序-vs-计数排序-vs-桶排序\"><a href=\"#基数排序-vs-计数排序-vs-桶排序\" class=\"headerlink\" title=\"基数排序 vs 计数排序 vs 桶排序\"></a>基数排序 vs 计数排序 vs 桶排序</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-89637b46ae6ecb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其中, d 表示位数， k 在基数排序中表示 k 进制，在桶排序中表示桶的个数， maxV 和 minV 表示元<br>素最大值和最小值。</p>\n<ul>\n<li>  首先，基数排序和计数排序都可以看作是桶排序。</li>\n<li>  计数排序本质上是一种特殊的桶排序，当桶的个数取最大( maxV-minV+1 )的时候，就变成了计数排序。</li>\n<li>  基数排序也是一种桶排序。桶排序是按值区间划分桶，基数排序是按数位来划分；基数排序可以看做是多轮桶排序，每个数位上都进行一轮桶排序。</li>\n<li>  当用最大值作为基数时，基数排序就退化成了计数排序。</li>\n<li>  当使用2进制时， k=2 最小，位数 d 最大，时间复杂度 O(nd) 会变大，空间复杂度 O(n+k) 会变小。当用最大值作为基数时， k=maxV 最大， d=1 最小，此时时间复杂度 O(nd) 变小，但是空间复杂度 O(n+k) 会急剧增大，此时基数排序退化成了计数排序。</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-274c62246d49b2f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"排序算法\"></p>\n","site":{"data":{}},"abbrlink":"297HGTR","excerpt":"排序算法总览\n\n\n冒泡排序（Bubble Sort）\n从前往后两两比较相邻元素的值，若为逆序则交换他们，直到（n-1+i），若某次遍历未发现有逆序情况证明已经有序则应该直接返回。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n/**\n * 1.冒泡排序\n * 每次在0～(n-1-i)中将最大的一步一步冒泡到最后\n *\n * @param arr\n */\nprivate static void bubbleSort(int arr[]) {\n    int n = arr.length;\n    boolean flag = false;","more":"<h4 id=\"排序算法总览\"><a href=\"#排序算法总览\" class=\"headerlink\" title=\"排序算法总览\"></a>排序算法总览</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-5c7c3186ffc1d8e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"排序算法\"></p>\n<h4 id=\"冒泡排序（Bubble-Sort）\"><a href=\"#冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"冒泡排序（Bubble Sort）\"></a>冒泡排序（Bubble Sort）</h4><blockquote>\n<p>从前往后两两比较相邻元素的值，若为逆序则交换他们，直到（n-1+i），若某次遍历未发现有逆序情况证明已经有序则应该直接返回。<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-68fca7881fa55a71.gif?imageMogr2/auto-orient/strip\" alt=\"Bubble Sort\"></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次在0～(n-1-i)中将最大的一步一步冒泡到最后</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;<span class=\"comment\">//是否已经正序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; !flag; i++) &#123;</span><br><span class=\"line\">        flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于对于相等元素不会交换所以 =&gt; 稳定</p>\n</blockquote>\n<h4 id=\"选择排序-（Selection-Sort）\"><a href=\"#选择排序-（Selection-Sort）\" class=\"headerlink\" title=\"选择排序 （Selection Sort）\"></a>选择排序 （Selection Sort）</h4><blockquote>\n<p>每次找出i~(n-1) 最小值 与第i位交换</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-11c29a40f2286605.gif?imageMogr2/auto-orient/strip\" alt=\"Selection Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.选择排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次从i～(n-1)找出最小元素放在最前面</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        minIndex = i;<span class=\"comment\">//假定最小元素是第i个</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class=\"line\">                minIndex = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, minIndex, i);<span class=\"comment\">//把i～n中最小元素和第i位交换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于最小值元素会直接与i位元素互换所以可能造成相同元素次序改变 =&gt; 不稳定<br>同样适用于链式存储结构</p>\n</blockquote>\n<h4 id=\"直接插入排序（Insertion-Sort）\"><a href=\"#直接插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"直接插入排序（Insertion Sort）\"></a>直接插入排序（Insertion Sort）</h4><blockquote>\n<p>从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-490c7c6970c21b77.gif?imageMogr2/auto-orient/strip\" alt=\"Insertion Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.直接插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 从第二个元素开始每次从向前 0～(i-1) 有序序列倒叙依次尝试自己合适的位置，直到比前一个元素大</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        temp = arr[i];<span class=\"comment\">//待插入的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; j &gt; <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j - <span class=\"number\">1</span>]; j--) &#123;</span><br><span class=\"line\">            arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于都是向前先比较在插入小于等于当前元素不会移动 =&gt; 稳定</p>\n</blockquote>\n<h4 id=\"希尔排序（Shell-Sort）\"><a href=\"#希尔排序（Shell-Sort）\" class=\"headerlink\" title=\"希尔排序（Shell Sort）\"></a>希尔排序（Shell Sort）</h4><blockquote>\n<p>希尔排序，又称缩小增量排序，是插入排序变形，基于插入排序适用于基本有序和数据量小的基本思想：按照增量序列函数每次按增量提取出相差h的元素组成待排序列进行直接插入排序，然后缩小增量后在排序知道增量变为1完成最后一次排序</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-c5f7a62cc2d6a106.gif?imageMogr2/auto-orient/strip\" alt=\"Shell Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = n / <span class=\"number\">2</span>;<span class=\"comment\">//初始增序起始</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>) &#123;<span class=\"comment\">//获得增序序列并不断缩小h</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; n; i++) &#123;<span class=\"comment\">//从第一个h位元素开始，每次和所有前面与它相差h的元素序列做插入排序</span></span><br><span class=\"line\">            temp = arr[i];<span class=\"comment\">//待插入的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= h &amp;&amp; temp &lt; arr[j - h]; j -= h) &#123;<span class=\"comment\">//这里的h是 最大值而不是准确数字但该序列第二位一定大于等于h</span></span><br><span class=\"line\">                arr[j] = arr[j - h];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        h = h / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(1)<br>时间复杂度：O(n^2)<br>稳定性：由于每次划分子序列再排序可能改变相同元素的相对次序 =&gt; 不稳定</p>\n</blockquote>\n<h4 id=\"归并排序（Merge-Sort）\"><a href=\"#归并排序（Merge-Sort）\" class=\"headerlink\" title=\"归并排序（Merge Sort）\"></a>归并排序（Merge Sort）</h4><blockquote>\n<p>基本思想：将多个有序序列组合成一个新的有序表，自底向上归并应该是先2个元素合并，然后2个长度为2的元素合并，然后2个长度为4的元素合并直到直到子序列长度&gt;=n</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basicAlgorithm.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 归并排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] aux;<span class=\"comment\">//辅助函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将[l...r-1]与[r..rEnd]归并</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> l</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> rEnd</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> rEnd)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = l;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lEnd = r - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先将待排序两组子序列复制到辅助数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= rEnd; i++) &#123;</span><br><span class=\"line\">            aux[i] = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= lEnd &amp;&amp; r &lt;= rEnd) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aux[l] &lt; aux[r]) &#123;</span><br><span class=\"line\">                arr[temp++] = aux[l++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                arr[temp++] = aux[r++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将另一边剩下的复制到原数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= lEnd) &#123;</span><br><span class=\"line\">            arr[temp++] = aux[l++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// (右边的不用复制吧,本来就在原数组)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r&lt;=rEnd)&#123;</span><br><span class=\"line\">            arr[temp++]=aux[r++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自底向上的归并排序(递归写法)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> L</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> R</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &gt;= R) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (L + R) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        mergeSort(arr, L, mid);</span><br><span class=\"line\">        mergeSort(arr, mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mid] &gt; arr[mid + <span class=\"number\">1</span>]) &#123;<span class=\"comment\">//如果左右已经有序则不归并</span></span><br><span class=\"line\">            merge(arr, L, mid + <span class=\"number\">1</span>, R);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自底向上的归并排序(迭代写法)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSortBU</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> size = <span class=\"number\">1</span>; size &lt; n; size = <span class=\"number\">2</span>*size) &#123; <span class=\"comment\">//size 表示每次将2个size大小的序列归并成一个序列</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i + size &lt; n; i = i + (size * <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">                merge(arr, i, i + size, Math.min(i + (size * <span class=\"number\">2</span>) - <span class=\"number\">1</span>, n - <span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> array[] = &#123;<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">19</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化辅助数组</span></span><br><span class=\"line\">        aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[array.length];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        mergeSort(array, 0, array.length - 1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        mergeSortBU(array);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a : array) &#123;</span><br><span class=\"line\">            System.out.println(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(n)  辅助数组<br>时间复杂度：O(nlogn)<br>稳定性：因为依此合并没有交换操作所以 =&gt; 稳定</p>\n</blockquote>\n<h4 id=\"快速排序（Quick-Sort）\"><a href=\"#快速排序（Quick-Sort）\" class=\"headerlink\" title=\"快速排序（Quick Sort）\"></a>快速排序（Quick Sort）</h4><blockquote>\n<p>号称21世纪最优化的算法来了，快排也是分治思想的应用,基本思想就是先设一个基准点然后将序列小于基准点的部分放到基准点左面小于基准点的部分放到基准点右面，然后在递归的处理左面和右面。快排有很多版本我下面代码的是最常见双路快排版</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-0d9946c5eed0f811.gif?imageMogr2/auto-orient/strip\" alt=\"Quick Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双路快排</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    swap(array, l, ((<span class=\"keyword\">int</span>) (Math.random() * (r - l)) + l));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivote = array[l];<span class=\"comment\">//基点放到最左边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>;<span class=\"comment\">//左边比基点小的标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = r;<span class=\"comment\">//右边比基点大的标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= r &amp;&amp; array[i] &lt; pivote) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= l + <span class=\"number\">1</span> &amp;&amp; array[j] &gt; pivote) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> swap(array, i++, j--);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    swap(array, l, j);</span><br><span class=\"line\"></span><br><span class=\"line\">    quickSort2(array, l, j - <span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort2(array, j + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    quickSort2(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>空间复杂度:O(logn)  由于快排要借助递归实现所以要消耗额外系统栈空间平均情况下栈深log2(n)<br>时间复杂度:O(nlogn)<br>稳定性：因为选取基准点的过程中可能会改变相同元素次序 =&gt; 不稳定<br>另外序列越无序越随机快排效率越高，而现实中的序列大多是随机分布的所以快排广泛应用</p>\n</blockquote>\n<h4 id=\"堆排序（Heap-Sort）\"><a href=\"#堆排序（Heap-Sort）\" class=\"headerlink\" title=\"堆排序（Heap Sort）\"></a>堆排序（Heap Sort）</h4><blockquote>\n<p>堆是一种树形结构，是一颗完全二叉树，并满足任意节点都大于他的子结点（大根堆）<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-192a5e776e41a920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-87ddf8670e8b93d7.gif?imageMogr2/auto-orient/strip\" alt=\"Heap Sort\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;<span class=\"comment\">//下沉</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k + <span class=\"number\">1</span> &lt;= n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k + <span class=\"number\">1</span>;<span class=\"comment\">//左孩子索引</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt;= n - <span class=\"number\">1</span> &amp;&amp; array[j + <span class=\"number\">1</span>] &gt; array[j]) j++;<span class=\"comment\">//如果有右孩子并且右孩子比左孩子大 j 换成右孩子索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[j] &gt; array[k]) &#123;</span><br><span class=\"line\">            swap(array, j, k);</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//heapify 大根堆建成</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        sink(array, n, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">        swap(array, <span class=\"number\">0</span>, j);<span class=\"comment\">//把最大的和最后以为交换</span></span><br><span class=\"line\">        sink(array, j, <span class=\"number\">0</span>);<span class=\"comment\">//缩小对的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><em>BuildHeap</em> 时间复杂度O(nlogn)<br><em>heapify</em> 时间复杂度O(n)<br>稳定性：=&gt; 不稳定<br>空间复杂度：O(1)</p>\n</blockquote>\n<h4 id=\"计数排序（Counting-Sort）\"><a href=\"#计数排序（Counting-Sort）\" class=\"headerlink\" title=\"计数排序（Counting Sort）\"></a>计数排序（Counting Sort）</h4><blockquote>\n<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d8bfc8c0cf816174.gif?imageMogr2/auto-orient/strip\" alt=\"Insertion Sort\"></p>\n<h4 id=\"桶排序（Bucket-Sort）\"><a href=\"#桶排序（Bucket-Sort）\" class=\"headerlink\" title=\"桶排序（Bucket Sort）\"></a>桶排序（Bucket Sort）</h4><blockquote>\n<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>\n</blockquote>\n<ol>\n<li>在额外空间充足的情况下，尽量增大桶的数量</li>\n<li>使用的映射函数能够将输入的N个数据均匀的分配到K个桶中</li>\n</ol>\n<h4 id=\"基数排序（Radix-Sort）\"><a href=\"#基数排序（Radix-Sort）\" class=\"headerlink\" title=\"基数排序（Radix Sort）\"></a>基数排序（Radix Sort）</h4><blockquote>\n<p>分为 MSD(最高位优先) 和 LSD(最低位优先)</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-ae25b15703da08b7.gif?imageMogr2/auto-orient/strip\" alt=\"LSD\"></p>\n<h4 id=\"基数排序-vs-计数排序-vs-桶排序\"><a href=\"#基数排序-vs-计数排序-vs-桶排序\" class=\"headerlink\" title=\"基数排序 vs 计数排序 vs 桶排序\"></a>基数排序 vs 计数排序 vs 桶排序</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-89637b46ae6ecb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>其中, d 表示位数， k 在基数排序中表示 k 进制，在桶排序中表示桶的个数， maxV 和 minV 表示元<br>素最大值和最小值。</p>\n<ul>\n<li>  首先，基数排序和计数排序都可以看作是桶排序。</li>\n<li>  计数排序本质上是一种特殊的桶排序，当桶的个数取最大( maxV-minV+1 )的时候，就变成了计数排序。</li>\n<li>  基数排序也是一种桶排序。桶排序是按值区间划分桶，基数排序是按数位来划分；基数排序可以看做是多轮桶排序，每个数位上都进行一轮桶排序。</li>\n<li>  当用最大值作为基数时，基数排序就退化成了计数排序。</li>\n<li>  当使用2进制时， k=2 最小，位数 d 最大，时间复杂度 O(nd) 会变大，空间复杂度 O(n+k) 会变小。当用最大值作为基数时， k=maxV 最大， d=1 最小，此时时间复杂度 O(nd) 变小，但是空间复杂度 O(n+k) 会急剧增大，此时基数排序退化成了计数排序。</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-274c62246d49b2f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"排序算法\"></p>\n"},{"_content":"### 线性表简介：\n  >一种逻辑结构，相同数据类型的n个数据元素的有限序列，除第一个元素外，每个元素有且仅有一个直接前驱，除最后一个元素外，每个元素有且仅有一个直接后继。\n\n### 线性表的特点：\n（1）元素个数有限    \n（2）逻辑上元素有先后次序\n（3）数据类型相同    \n（4）仅讨论元素间的逻辑关系\n\n注：线性表是逻辑结构，顺序表和链表是存储结构。\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-3e7122686cc64386.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 区别：\n|存储类别|顺序表|单链表|\n|-----|----|----|\n|存储分配方式\t|用一段连续的存储单元依次存储线性表的数据元素|\t采用链式存储结构，用一组任意的存储单元存放线性表的元素|\n|时间性能\t|查找O（1）、插入和删除O（n）|\t查找O（n）、插入和删除O（1）|\n|空间性能\t|需要预分配存储空间，分大了浪费，小了容易发生上溢|不需要分配存储空间，只要有就可以分配，元素个数不受限制|\n\n### 链表\n#### 1. 单链表：\n只有一个next指针域\n```c\n/*单链表定义*/\ntypedef struct LNode{\nElemType data;\nstruct LNode* next;\n}LNode,*LinkList\n```\n*结构体相关知识：https://www.cnblogs.com/qyaizs/articles/2039101.html*\n\n* 头插法建立单链表：\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-6b2fb32b38aa9a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 尾插法建立单链表：**需要增加一个尾指针r**\n```c\nLinkList<DataType>::LinkList(DataType a[], int n)\n{\n    first = new Node<DataType>;\n    Node<DataType> *r = first;\n    for (int i = 0; i < n; i++)\n    {\n        Node<DataType> *s = new Node<DataType>;\n        s->data = a[i];\n        r->next = s;\n        r = s;\n    }\n    r->next = NULL;\n}\n```\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-c398be0f46b66915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*  插入节点\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-5581beb3457f80af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 删除节点\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-9a666f45fca7ee74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 2. 双向链表：\n单链表节点的缺点是只有一个后继节点，访问前驱节点只能从头遍历（如插入、删除），时间复杂度为O(n)。双链表，即添加一个指向前驱的节点，节点类型如下：\n```c\ntypedef struct DNode{\nElemType data;\nstruct DNdoe *prior,*next;\n}DNode,*DLinklist;\n```\n### 3.循环链表\n3.1循环单链表\n和单链表区别在于，表中最后一个结点的指针不是指向NULL而是指向头结点，所以判空条件不是头节点是否为空，而是它是否等于头指针。\n\n3.1循环双链表\n","source":"_posts/计算机基础/20180814-数据结构-线性表.md","raw":"### 线性表简介：\n  >一种逻辑结构，相同数据类型的n个数据元素的有限序列，除第一个元素外，每个元素有且仅有一个直接前驱，除最后一个元素外，每个元素有且仅有一个直接后继。\n\n### 线性表的特点：\n（1）元素个数有限    \n（2）逻辑上元素有先后次序\n（3）数据类型相同    \n（4）仅讨论元素间的逻辑关系\n\n注：线性表是逻辑结构，顺序表和链表是存储结构。\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-3e7122686cc64386.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 区别：\n|存储类别|顺序表|单链表|\n|-----|----|----|\n|存储分配方式\t|用一段连续的存储单元依次存储线性表的数据元素|\t采用链式存储结构，用一组任意的存储单元存放线性表的元素|\n|时间性能\t|查找O（1）、插入和删除O（n）|\t查找O（n）、插入和删除O（1）|\n|空间性能\t|需要预分配存储空间，分大了浪费，小了容易发生上溢|不需要分配存储空间，只要有就可以分配，元素个数不受限制|\n\n### 链表\n#### 1. 单链表：\n只有一个next指针域\n```c\n/*单链表定义*/\ntypedef struct LNode{\nElemType data;\nstruct LNode* next;\n}LNode,*LinkList\n```\n*结构体相关知识：https://www.cnblogs.com/qyaizs/articles/2039101.html*\n\n* 头插法建立单链表：\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-6b2fb32b38aa9a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 尾插法建立单链表：**需要增加一个尾指针r**\n```c\nLinkList<DataType>::LinkList(DataType a[], int n)\n{\n    first = new Node<DataType>;\n    Node<DataType> *r = first;\n    for (int i = 0; i < n; i++)\n    {\n        Node<DataType> *s = new Node<DataType>;\n        s->data = a[i];\n        r->next = s;\n        r = s;\n    }\n    r->next = NULL;\n}\n```\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-c398be0f46b66915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*  插入节点\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-5581beb3457f80af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 删除节点\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-9a666f45fca7ee74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 2. 双向链表：\n单链表节点的缺点是只有一个后继节点，访问前驱节点只能从头遍历（如插入、删除），时间复杂度为O(n)。双链表，即添加一个指向前驱的节点，节点类型如下：\n```c\ntypedef struct DNode{\nElemType data;\nstruct DNdoe *prior,*next;\n}DNode,*DLinklist;\n```\n### 3.循环链表\n3.1循环单链表\n和单链表区别在于，表中最后一个结点的指针不是指向NULL而是指向头结点，所以判空条件不是头节点是否为空，而是它是否等于头指针。\n\n3.1循环双链表\n","slug":"计算机基础/20180814-数据结构-线性表","published":1,"date":"2018-08-13T16:00:00.000Z","updated":"2021-08-17T18:45:34.805Z","title":"数据结构-线性表","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1c000wnnvb6zq2gtr3","content":"<h3 id=\"线性表简介：\"><a href=\"#线性表简介：\" class=\"headerlink\" title=\"线性表简介：\"></a>线性表简介：</h3><blockquote>\n<p>一种逻辑结构，相同数据类型的n个数据元素的有限序列，除第一个元素外，每个元素有且仅有一个直接前驱，除最后一个元素外，每个元素有且仅有一个直接后继。</p>\n</blockquote>\n<h3 id=\"线性表的特点：\"><a href=\"#线性表的特点：\" class=\"headerlink\" title=\"线性表的特点：\"></a>线性表的特点：</h3><p>（1）元素个数有限<br>（2）逻辑上元素有先后次序<br>（3）数据类型相同<br>（4）仅讨论元素间的逻辑关系</p>\n<p>注：线性表是逻辑结构，顺序表和链表是存储结构。<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3e7122686cc64386.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><table>\n<thead>\n<tr>\n<th>存储类别</th>\n<th>顺序表</th>\n<th>单链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储分配方式</td>\n<td>用一段连续的存储单元依次存储线性表的数据元素</td>\n<td>采用链式存储结构，用一组任意的存储单元存放线性表的元素</td>\n</tr>\n<tr>\n<td>时间性能</td>\n<td>查找O（1）、插入和删除O（n）</td>\n<td>查找O（n）、插入和删除O（1）</td>\n</tr>\n<tr>\n<td>空间性能</td>\n<td>需要预分配存储空间，分大了浪费，小了容易发生上溢</td>\n<td>不需要分配存储空间，只要有就可以分配，元素个数不受限制</td>\n</tr>\n</tbody></table>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"1-单链表：\"><a href=\"#1-单链表：\" class=\"headerlink\" title=\"1. 单链表：\"></a>1. 单链表：</h4><p>只有一个next指针域</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*单链表定义*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">ElemType data;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList</span><br></pre></td></tr></table></figure>\n<p><em>结构体相关知识：<a href=\"https://www.cnblogs.com/qyaizs/articles/2039101.html\">https://www.cnblogs.com/qyaizs/articles/2039101.html</a></em></p>\n<ul>\n<li><p>头插法建立单链表：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-6b2fb32b38aa9a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p>尾插法建立单链表：<strong>需要增加一个尾指针r</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList&lt;DataType&gt;::LinkList(DataType a[], <span class=\"keyword\">int</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    first = <span class=\"keyword\">new</span> Node&lt;DataType&gt;;</span><br><span class=\"line\">    Node&lt;DataType&gt; *r = first;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Node&lt;DataType&gt; *s = <span class=\"keyword\">new</span> Node&lt;DataType&gt;;</span><br><span class=\"line\">        s-&gt;data = a[i];</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-c398be0f46b66915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p> 插入节点<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-5581beb3457f80af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p>删除节点<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-9a666f45fca7ee74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n</ul>\n<h4 id=\"2-双向链表：\"><a href=\"#2-双向链表：\" class=\"headerlink\" title=\"2. 双向链表：\"></a>2. 双向链表：</h4><p>单链表节点的缺点是只有一个后继节点，访问前驱节点只能从头遍历（如插入、删除），时间复杂度为O(n)。双链表，即添加一个指向前驱的节点，节点类型如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">ElemType data;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNdoe</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;DNode,*DLinklist;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-循环链表\"><a href=\"#3-循环链表\" class=\"headerlink\" title=\"3.循环链表\"></a>3.循环链表</h3><p>3.1循环单链表<br>和单链表区别在于，表中最后一个结点的指针不是指向NULL而是指向头结点，所以判空条件不是头节点是否为空，而是它是否等于头指针。</p>\n<p>3.1循环双链表</p>\n","site":{"data":{}},"abbrlink":"1DH5E51","excerpt":"线性表简介：\n一种逻辑结构，相同数据类型的n个数据元素的有限序列，除第一个元素外，每个元素有且仅有一个直接前驱，除最后一个元素外，每个元素有且仅有一个直接后继。\n\n线性表的特点：\n（1）元素个数有限\n（2）逻辑上元素有先后次序\n（3）数据类型相同\n（4）仅讨论元素间的逻辑关系\n\n注：线性表是逻辑结构，顺序表和链表是存储结构。\n\n\n区别：\n存储类别顺序表单链表存储分配方式用一段连续的存储单元依次存储线性表的数据元素采用链式存储结构，用一组任意的存储单元存放线性表的元素时间性能查找O（1）、插入和删除O（n）查找O（n）、插入和删除O（1）空间性能需要预分配存储空间，分大了浪费，小了容易发生上溢不","more":"<h3 id=\"线性表简介：\"><a href=\"#线性表简介：\" class=\"headerlink\" title=\"线性表简介：\"></a>线性表简介：</h3><blockquote>\n<p>一种逻辑结构，相同数据类型的n个数据元素的有限序列，除第一个元素外，每个元素有且仅有一个直接前驱，除最后一个元素外，每个元素有且仅有一个直接后继。</p>\n</blockquote>\n<h3 id=\"线性表的特点：\"><a href=\"#线性表的特点：\" class=\"headerlink\" title=\"线性表的特点：\"></a>线性表的特点：</h3><p>（1）元素个数有限<br>（2）逻辑上元素有先后次序<br>（3）数据类型相同<br>（4）仅讨论元素间的逻辑关系</p>\n<p>注：线性表是逻辑结构，顺序表和链表是存储结构。<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-3e7122686cc64386.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a>区别：</h3><table>\n<thead>\n<tr>\n<th>存储类别</th>\n<th>顺序表</th>\n<th>单链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储分配方式</td>\n<td>用一段连续的存储单元依次存储线性表的数据元素</td>\n<td>采用链式存储结构，用一组任意的存储单元存放线性表的元素</td>\n</tr>\n<tr>\n<td>时间性能</td>\n<td>查找O（1）、插入和删除O（n）</td>\n<td>查找O（n）、插入和删除O（1）</td>\n</tr>\n<tr>\n<td>空间性能</td>\n<td>需要预分配存储空间，分大了浪费，小了容易发生上溢</td>\n<td>不需要分配存储空间，只要有就可以分配，元素个数不受限制</td>\n</tr>\n</tbody></table>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"1-单链表：\"><a href=\"#1-单链表：\" class=\"headerlink\" title=\"1. 单链表：\"></a>1. 单链表：</h4><p>只有一个next指针域</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*单链表定义*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">ElemType data;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList</span><br></pre></td></tr></table></figure>\n<p><em>结构体相关知识：<a href=\"https://www.cnblogs.com/qyaizs/articles/2039101.html\">https://www.cnblogs.com/qyaizs/articles/2039101.html</a></em></p>\n<ul>\n<li><p>头插法建立单链表：<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-6b2fb32b38aa9a6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p>尾插法建立单链表：<strong>需要增加一个尾指针r</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList&lt;DataType&gt;::LinkList(DataType a[], <span class=\"keyword\">int</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    first = <span class=\"keyword\">new</span> Node&lt;DataType&gt;;</span><br><span class=\"line\">    Node&lt;DataType&gt; *r = first;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Node&lt;DataType&gt; *s = <span class=\"keyword\">new</span> Node&lt;DataType&gt;;</span><br><span class=\"line\">        s-&gt;data = a[i];</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12637001-c398be0f46b66915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p> 插入节点<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-5581beb3457f80af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p>删除节点<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-9a666f45fca7ee74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n</ul>\n<h4 id=\"2-双向链表：\"><a href=\"#2-双向链表：\" class=\"headerlink\" title=\"2. 双向链表：\"></a>2. 双向链表：</h4><p>单链表节点的缺点是只有一个后继节点，访问前驱节点只能从头遍历（如插入、删除），时间复杂度为O(n)。双链表，即添加一个指向前驱的节点，节点类型如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">ElemType data;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNdoe</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;DNode,*DLinklist;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-循环链表\"><a href=\"#3-循环链表\" class=\"headerlink\" title=\"3.循环链表\"></a>3.循环链表</h3><p>3.1循环单链表<br>和单链表区别在于，表中最后一个结点的指针不是指向NULL而是指向头结点，所以判空条件不是头节点是否为空，而是它是否等于头指针。</p>\n<p>3.1循环双链表</p>\n"},{"_content":"### 整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\n\n> 主要涉及三个基本数据类型 byte、int、char\n\n#### 以16进制表示查看二进制文件\n\n```bash\nxxd file\n```\n\n#### 反码、补码：\n[https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html](https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html)\n\n##### 上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\n[https://www.cnblogs.com/esmusssein/p/11182321.html](https://www.cnblogs.com/esmusssein/p/11182321.html)\n\n#### 字符编码：\n[https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/](https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/)\n\n> Java 判断本地主机字节序工具：ByteOrder.nativeOrder();\n> 大端小端在一台机器上没感知，因为高位地位是确定的，只不过在有的机器上内存的高地址对应高位叫“小端字节序” 像x86架构，而有的是内存的高地址对应低位叫“大端字节序”。\n#### Unicode 编码查询工具：\n[https://www.qqxiuzi.cn/bianma/Unicode-UTF.php](https://www.qqxiuzi.cn/bianma/Unicode-UTF.php)\n\n#### Java内码是utf-16吗？\n[https://blog.csdn.net/u014631304/article/details/77509380](https://blog.csdn.net/u014631304/article/details/77509380)\n\n#### 关于Unicode更多理解：\n[https://www.jianshu.com/p/ad4bff4d9fa3](https://www.jianshu.com/p/ad4bff4d9fa3)\n\n#### Java编码扩展知识：\n[https://www.jianshu.com/p/1b00ca07b003](https://www.jianshu.com/p/1b00ca07b003)\n\n#### 理解byte负数：\n[https://blog.csdn.net/csdn_ds/article/details/79106006](https://blog.csdn.net/csdn_ds/article/details/79106006)\n\n#### & 0xff 获取真值原理：\n[https://blog.csdn.net/i6223671/article/details/88924481](https://blog.csdn.net/i6223671/article/details/88924481)\n\n#### 常用工具代码：\n1. byte 转 二进制表示\n```java\n    /**\n     * byte 转 二进制表示\n     * @param b\n     * @return\n     */\n    public static String byteToBit(byte b) {\n        return \"\"\n                + (byte) ((b >> 7) & 0x1) + (byte) ((b >> 6) & 0x1)\n                + (byte) ((b >> 5) & 0x1) + (byte) ((b >> 4) & 0x1)\n                + (byte) ((b >> 3) & 0x1) + (byte) ((b >> 2) & 0x1)\n                + (byte) ((b >> 1) & 0x1) + (byte) ((b >> 0) & 0x1);\n    }\n```\n\n2. 获取byte指定位的值\n\n```java\n    /**\n     * 获取byte指定位的值\n     * @param b\n     * @param i (i>=1)\n     * @return\n     */\n    public static byte getBitArray(byte b,int i) {\n        return (byte) ((b >> (8-i)) & 0x1);\n    }\n```\n\n3. 字节数组转16进制\n\n```java\n    /**\n     * 字节数组转16进制\n     * @param bytes 需要转换的byte数组\n     * @return  转换后的Hex字符串\n     */\n    public static String bytesToHex(byte[] bytes) {\n        StringBuffer sb = new StringBuffer();\n        for(int i = 0; i < bytes.length; i++) {\n            String hex = Integer.toHexString(bytes[i] & 0xFF);\n            if(hex.length() < 2){\n                sb.append(0);\n            }\n            sb.append(hex);\n        }\n        return sb.toString();\n    }\n```\n\n4. char 转 byte数组(JVM大端转化的结果，非真实内存存放顺序)\n\n```java\n    /**\n     * char 转 byte数组\n     * @param c\n     * @return\n     */\n    public static byte[] charToByte(char c) {\n        byte[] b = new byte[2];\n        b[0] = (byte) ((c & 0xFF00) >> 8);\n        b[1] = (byte) (c & 0xFF);\n        return b;\n    }\n```\n5. 16进制 转 字节数组\n\n```java\n \t/**\n     * 16进制 转 字节数组\n     * @param hexString\n     * @return\n     */\n    public static byte[] hexString2Bytes(String hexString) {\n        BiFunction<Byte, Byte, Byte> uniteBytes = (src0, src1) -> {\n            char b0 = (char) Byte.decode(\"0x\" + new String(new byte[] {src0})).byteValue();\n            b0 = (char) (b0 << 4);\n            char b1 = (char) Byte.decode(\"0x\" + new String(new byte[] {src1})).byteValue();\n            return (byte) (b0 ^ b1);\n        };\n        int size = hexString.length();\n        byte[] ret = new byte[size / 2];\n        byte[] tmp = hexString.getBytes();\n        for (int i = 0; i < size / 2; i++) {\n            ret[i] = uniteBytes.apply(tmp[i * 2], tmp[i * 2 + 1]);\n        }\n        return ret;\n    }\n```\n\n6. byte数组 转 int\n\n```java\n    /**\n     * byte数组 转 int\n     * @param bytes\n     * @return\n     */\n    public static int bytes2Int(byte[] bytes) {\n        int result = 0;\n        //将每个byte依次搬运到int相应的位置\n        result = bytes[0] & 0xff;\n        result = result << 8 | bytes[1] & 0xff;\n        result = result << 8 | bytes[2] & 0xff;\n        result = result << 8 | bytes[3] & 0xff;\n        return result;\n    }\n```\n\n7. int 转 byte数组\n\n```java\n    /**\n     * int 转 byte数组\n     * @param num\n     * @return\n     */\n    public static byte[] int2Bytes(int num) {\n        byte[] bytes = new byte[4];\n        //通过移位运算，截取低8位的方式，将int保存到byte数组\n        bytes[0] = (byte) (num >>> 24);\n        bytes[1] = (byte) (num >>> 16);\n        bytes[2] = (byte) (num >>> 8);\n        bytes[3] = (byte) num;\n        return bytes;\n    }\n```\n\n8. 获取String内存中对应的 UTF-16 编码的byte数组 (JVM大端转化的结果，非真实内存存放顺序)\n\n```java\n    /**\n     * 获取String内存中对应的 UTF-16 编码的byte数组 \n     * @param str\n     * @return\n     */\n    public static byte[] string2bytes(String str) {\n        ByteBuffer heapByteBuffer = ByteBuffer.allocate (str.length() * 2);\n        for (char c : str.toCharArray()) {\n            heapByteBuffer.putChar(c);\n        }\n        heapByteBuffer.flip();\n\n        int len = heapByteBuffer.limit() - heapByteBuffer.position();\n        byte[] bytes = new byte[len];\n        heapByteBuffer.get(bytes);\n        return bytes;\n    }\n```\n9. 通过Unsafe查看字符在内存中的实际顺序(非JVM优化过的,我认为这才是内存真实存放的顺序，取决于具体的CPU架构)\n\n```java\n\n    @SuppressWarnings(\"restriction\")\n    static private sun.misc.Unsafe getUnsafe() throws IllegalArgumentException, IllegalAccessException {\n        Class<?> cls = sun.misc.Unsafe.class;\n        Field[] fields = cls.getDeclaredFields();\n        for (Field f : fields) {\n            if (\"theUnsafe\".equals(f.getName())) {\n                f.setAccessible(true);\n                return (sun.misc.Unsafe) f.get(null);\n            }\n        }\n        throw new IllegalAccessException(\"no declared field: theUnsafe\");\n    }\n\n    /**\n     * 查看字符在内存中真实的顺序，非JVM优化的，取决于CPU架构\n     * @param ch\n     * @return\n     * @throws IllegalAccessException\n     */\n    public static byte[] char2bytesNative(char ch) throws IllegalAccessException {\n        byte[] bytes = new byte[2];\n        Unsafe unsafe = getUnsafe();\n        long address = unsafe.allocateMemory(2);\n        unsafe.putChar(address, ch);\n        byte b = unsafe.getByte(address);\n        bytes[0] = b;\n        b = unsafe.getByte(address + 1);\n        bytes[1] = b;\n        return bytes;\n    }\n\n    public static void main(String[] args) throws Throwable {\n       \tSystem.out.println(bytes2HexString(charToByte('国')));\n      \tSystem.out.println(bytes2HexString(char2bytesNative('国')));\n    }\n\n    /**\n     * 还有一种更直接的方法\n     * @param ch\n     * @return\n     * @throws IllegalAccessException\n     */\n    public static byte[] char2bytesNative2(char ch) throws IllegalAccessException {\n        Unsafe unsafe = getUnsafe();\n        char[] charArr = new char[1];\n        charArr[0] = ch;\n        byte b = unsafe.getByte(charArr, (long) (unsafe.arrayBaseOffset(charArr.getClass())));\n        \n        byte[] bytes = new byte[2];\n        bytes[0] = b;\n        b = unsafe.getByte(charArr, (long) (unsafe.arrayBaseOffset(charArr.getClass()) + 1));\n        bytes[1] = b;\n        return bytes;\n    }\n```","source":"_posts/计算机基础/20200420-二进制、计算机编码、位运算.md","raw":"### 整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\n\n> 主要涉及三个基本数据类型 byte、int、char\n\n#### 以16进制表示查看二进制文件\n\n```bash\nxxd file\n```\n\n#### 反码、补码：\n[https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html](https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html)\n\n##### 上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\n[https://www.cnblogs.com/esmusssein/p/11182321.html](https://www.cnblogs.com/esmusssein/p/11182321.html)\n\n#### 字符编码：\n[https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/](https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/)\n\n> Java 判断本地主机字节序工具：ByteOrder.nativeOrder();\n> 大端小端在一台机器上没感知，因为高位地位是确定的，只不过在有的机器上内存的高地址对应高位叫“小端字节序” 像x86架构，而有的是内存的高地址对应低位叫“大端字节序”。\n#### Unicode 编码查询工具：\n[https://www.qqxiuzi.cn/bianma/Unicode-UTF.php](https://www.qqxiuzi.cn/bianma/Unicode-UTF.php)\n\n#### Java内码是utf-16吗？\n[https://blog.csdn.net/u014631304/article/details/77509380](https://blog.csdn.net/u014631304/article/details/77509380)\n\n#### 关于Unicode更多理解：\n[https://www.jianshu.com/p/ad4bff4d9fa3](https://www.jianshu.com/p/ad4bff4d9fa3)\n\n#### Java编码扩展知识：\n[https://www.jianshu.com/p/1b00ca07b003](https://www.jianshu.com/p/1b00ca07b003)\n\n#### 理解byte负数：\n[https://blog.csdn.net/csdn_ds/article/details/79106006](https://blog.csdn.net/csdn_ds/article/details/79106006)\n\n#### & 0xff 获取真值原理：\n[https://blog.csdn.net/i6223671/article/details/88924481](https://blog.csdn.net/i6223671/article/details/88924481)\n\n#### 常用工具代码：\n1. byte 转 二进制表示\n```java\n    /**\n     * byte 转 二进制表示\n     * @param b\n     * @return\n     */\n    public static String byteToBit(byte b) {\n        return \"\"\n                + (byte) ((b >> 7) & 0x1) + (byte) ((b >> 6) & 0x1)\n                + (byte) ((b >> 5) & 0x1) + (byte) ((b >> 4) & 0x1)\n                + (byte) ((b >> 3) & 0x1) + (byte) ((b >> 2) & 0x1)\n                + (byte) ((b >> 1) & 0x1) + (byte) ((b >> 0) & 0x1);\n    }\n```\n\n2. 获取byte指定位的值\n\n```java\n    /**\n     * 获取byte指定位的值\n     * @param b\n     * @param i (i>=1)\n     * @return\n     */\n    public static byte getBitArray(byte b,int i) {\n        return (byte) ((b >> (8-i)) & 0x1);\n    }\n```\n\n3. 字节数组转16进制\n\n```java\n    /**\n     * 字节数组转16进制\n     * @param bytes 需要转换的byte数组\n     * @return  转换后的Hex字符串\n     */\n    public static String bytesToHex(byte[] bytes) {\n        StringBuffer sb = new StringBuffer();\n        for(int i = 0; i < bytes.length; i++) {\n            String hex = Integer.toHexString(bytes[i] & 0xFF);\n            if(hex.length() < 2){\n                sb.append(0);\n            }\n            sb.append(hex);\n        }\n        return sb.toString();\n    }\n```\n\n4. char 转 byte数组(JVM大端转化的结果，非真实内存存放顺序)\n\n```java\n    /**\n     * char 转 byte数组\n     * @param c\n     * @return\n     */\n    public static byte[] charToByte(char c) {\n        byte[] b = new byte[2];\n        b[0] = (byte) ((c & 0xFF00) >> 8);\n        b[1] = (byte) (c & 0xFF);\n        return b;\n    }\n```\n5. 16进制 转 字节数组\n\n```java\n \t/**\n     * 16进制 转 字节数组\n     * @param hexString\n     * @return\n     */\n    public static byte[] hexString2Bytes(String hexString) {\n        BiFunction<Byte, Byte, Byte> uniteBytes = (src0, src1) -> {\n            char b0 = (char) Byte.decode(\"0x\" + new String(new byte[] {src0})).byteValue();\n            b0 = (char) (b0 << 4);\n            char b1 = (char) Byte.decode(\"0x\" + new String(new byte[] {src1})).byteValue();\n            return (byte) (b0 ^ b1);\n        };\n        int size = hexString.length();\n        byte[] ret = new byte[size / 2];\n        byte[] tmp = hexString.getBytes();\n        for (int i = 0; i < size / 2; i++) {\n            ret[i] = uniteBytes.apply(tmp[i * 2], tmp[i * 2 + 1]);\n        }\n        return ret;\n    }\n```\n\n6. byte数组 转 int\n\n```java\n    /**\n     * byte数组 转 int\n     * @param bytes\n     * @return\n     */\n    public static int bytes2Int(byte[] bytes) {\n        int result = 0;\n        //将每个byte依次搬运到int相应的位置\n        result = bytes[0] & 0xff;\n        result = result << 8 | bytes[1] & 0xff;\n        result = result << 8 | bytes[2] & 0xff;\n        result = result << 8 | bytes[3] & 0xff;\n        return result;\n    }\n```\n\n7. int 转 byte数组\n\n```java\n    /**\n     * int 转 byte数组\n     * @param num\n     * @return\n     */\n    public static byte[] int2Bytes(int num) {\n        byte[] bytes = new byte[4];\n        //通过移位运算，截取低8位的方式，将int保存到byte数组\n        bytes[0] = (byte) (num >>> 24);\n        bytes[1] = (byte) (num >>> 16);\n        bytes[2] = (byte) (num >>> 8);\n        bytes[3] = (byte) num;\n        return bytes;\n    }\n```\n\n8. 获取String内存中对应的 UTF-16 编码的byte数组 (JVM大端转化的结果，非真实内存存放顺序)\n\n```java\n    /**\n     * 获取String内存中对应的 UTF-16 编码的byte数组 \n     * @param str\n     * @return\n     */\n    public static byte[] string2bytes(String str) {\n        ByteBuffer heapByteBuffer = ByteBuffer.allocate (str.length() * 2);\n        for (char c : str.toCharArray()) {\n            heapByteBuffer.putChar(c);\n        }\n        heapByteBuffer.flip();\n\n        int len = heapByteBuffer.limit() - heapByteBuffer.position();\n        byte[] bytes = new byte[len];\n        heapByteBuffer.get(bytes);\n        return bytes;\n    }\n```\n9. 通过Unsafe查看字符在内存中的实际顺序(非JVM优化过的,我认为这才是内存真实存放的顺序，取决于具体的CPU架构)\n\n```java\n\n    @SuppressWarnings(\"restriction\")\n    static private sun.misc.Unsafe getUnsafe() throws IllegalArgumentException, IllegalAccessException {\n        Class<?> cls = sun.misc.Unsafe.class;\n        Field[] fields = cls.getDeclaredFields();\n        for (Field f : fields) {\n            if (\"theUnsafe\".equals(f.getName())) {\n                f.setAccessible(true);\n                return (sun.misc.Unsafe) f.get(null);\n            }\n        }\n        throw new IllegalAccessException(\"no declared field: theUnsafe\");\n    }\n\n    /**\n     * 查看字符在内存中真实的顺序，非JVM优化的，取决于CPU架构\n     * @param ch\n     * @return\n     * @throws IllegalAccessException\n     */\n    public static byte[] char2bytesNative(char ch) throws IllegalAccessException {\n        byte[] bytes = new byte[2];\n        Unsafe unsafe = getUnsafe();\n        long address = unsafe.allocateMemory(2);\n        unsafe.putChar(address, ch);\n        byte b = unsafe.getByte(address);\n        bytes[0] = b;\n        b = unsafe.getByte(address + 1);\n        bytes[1] = b;\n        return bytes;\n    }\n\n    public static void main(String[] args) throws Throwable {\n       \tSystem.out.println(bytes2HexString(charToByte('国')));\n      \tSystem.out.println(bytes2HexString(char2bytesNative('国')));\n    }\n\n    /**\n     * 还有一种更直接的方法\n     * @param ch\n     * @return\n     * @throws IllegalAccessException\n     */\n    public static byte[] char2bytesNative2(char ch) throws IllegalAccessException {\n        Unsafe unsafe = getUnsafe();\n        char[] charArr = new char[1];\n        charArr[0] = ch;\n        byte b = unsafe.getByte(charArr, (long) (unsafe.arrayBaseOffset(charArr.getClass())));\n        \n        byte[] bytes = new byte[2];\n        bytes[0] = b;\n        b = unsafe.getByte(charArr, (long) (unsafe.arrayBaseOffset(charArr.getClass()) + 1));\n        bytes[1] = b;\n        return bytes;\n    }\n```","slug":"计算机基础/20200420-二进制、计算机编码、位运算","published":1,"date":"2020-04-19T16:00:00.000Z","updated":"2021-08-17T18:45:34.804Z","title":"二进制、计算机编码、位运算","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1c000xnnvb94mg7o5h","content":"<h3 id=\"整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\"><a href=\"#整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\" class=\"headerlink\" title=\"整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\"></a>整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清</h3><blockquote>\n<p>主要涉及三个基本数据类型 byte、int、char</p>\n</blockquote>\n<h4 id=\"以16进制表示查看二进制文件\"><a href=\"#以16进制表示查看二进制文件\" class=\"headerlink\" title=\"以16进制表示查看二进制文件\"></a>以16进制表示查看二进制文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd file</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反码、补码：\"><a href=\"#反码、补码：\" class=\"headerlink\" title=\"反码、补码：\"></a>反码、补码：</h4><p><a href=\"https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html\">https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html</a></p>\n<h5 id=\"上面虽然解释了-反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码-1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\"><a href=\"#上面虽然解释了-反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码-1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\" class=\"headerlink\" title=\"上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\"></a>上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇</h5><p><a href=\"https://www.cnblogs.com/esmusssein/p/11182321.html\">https://www.cnblogs.com/esmusssein/p/11182321.html</a></p>\n<h4 id=\"字符编码：\"><a href=\"#字符编码：\" class=\"headerlink\" title=\"字符编码：\"></a>字符编码：</h4><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/\">https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/</a></p>\n<blockquote>\n<p>Java 判断本地主机字节序工具：ByteOrder.nativeOrder();<br>大端小端在一台机器上没感知，因为高位地位是确定的，只不过在有的机器上内存的高地址对应高位叫“小端字节序” 像x86架构，而有的是内存的高地址对应低位叫“大端字节序”。</p>\n</blockquote>\n<h4 id=\"Unicode-编码查询工具：\"><a href=\"#Unicode-编码查询工具：\" class=\"headerlink\" title=\"Unicode 编码查询工具：\"></a>Unicode 编码查询工具：</h4><p><a href=\"https://www.qqxiuzi.cn/bianma/Unicode-UTF.php\">https://www.qqxiuzi.cn/bianma/Unicode-UTF.php</a></p>\n<h4 id=\"Java内码是utf-16吗？\"><a href=\"#Java内码是utf-16吗？\" class=\"headerlink\" title=\"Java内码是utf-16吗？\"></a>Java内码是utf-16吗？</h4><p><a href=\"https://blog.csdn.net/u014631304/article/details/77509380\">https://blog.csdn.net/u014631304/article/details/77509380</a></p>\n<h4 id=\"关于Unicode更多理解：\"><a href=\"#关于Unicode更多理解：\" class=\"headerlink\" title=\"关于Unicode更多理解：\"></a>关于Unicode更多理解：</h4><p><a href=\"https://www.jianshu.com/p/ad4bff4d9fa3\">https://www.jianshu.com/p/ad4bff4d9fa3</a></p>\n<h4 id=\"Java编码扩展知识：\"><a href=\"#Java编码扩展知识：\" class=\"headerlink\" title=\"Java编码扩展知识：\"></a>Java编码扩展知识：</h4><p><a href=\"https://www.jianshu.com/p/1b00ca07b003\">https://www.jianshu.com/p/1b00ca07b003</a></p>\n<h4 id=\"理解byte负数：\"><a href=\"#理解byte负数：\" class=\"headerlink\" title=\"理解byte负数：\"></a>理解byte负数：</h4><p><a href=\"https://blog.csdn.net/csdn_ds/article/details/79106006\">https://blog.csdn.net/csdn_ds/article/details/79106006</a></p>\n<h4 id=\"amp-0xff-获取真值原理：\"><a href=\"#amp-0xff-获取真值原理：\" class=\"headerlink\" title=\"&amp; 0xff 获取真值原理：\"></a>&amp; 0xff 获取真值原理：</h4><p><a href=\"https://blog.csdn.net/i6223671/article/details/88924481\">https://blog.csdn.net/i6223671/article/details/88924481</a></p>\n<h4 id=\"常用工具代码：\"><a href=\"#常用工具代码：\" class=\"headerlink\" title=\"常用工具代码：\"></a>常用工具代码：</h4><ol>\n<li><p>byte 转 二进制表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * byte 转 二进制表示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">byteToBit</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">7</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">5</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">3</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">1</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">0</span>) &amp; <span class=\"number\">0x1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>获取byte指定位的值</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取byte指定位的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> i (i&gt;=1)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> <span class=\"title\">getBitArray</span><span class=\"params\">(<span class=\"keyword\">byte</span> b,<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) ((b &gt;&gt; (<span class=\"number\">8</span>-i)) &amp; <span class=\"number\">0x1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>字节数组转16进制</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 字节数组转16进制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bytes 需要转换的byte数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>  转换后的Hex字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesToHex</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class=\"line\">        String hex = Integer.toHexString(bytes[i] &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hex.length() &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            sb.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(hex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>char 转 byte数组(JVM大端转化的结果，非真实内存存放顺序)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * char 转 byte数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> c</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] charToByte(<span class=\"keyword\">char</span> c) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = (<span class=\"keyword\">byte</span>) ((c &amp; <span class=\"number\">0xFF00</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    b[<span class=\"number\">1</span>] = (<span class=\"keyword\">byte</span>) (c &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>16进制 转 字节数组</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 16进制 转 字节数组</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> hexString</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexString2Bytes(String hexString) &#123;</span><br><span class=\"line\">      BiFunction&lt;Byte, Byte, Byte&gt; uniteBytes = (src0, src1) -&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">char</span> b0 = (<span class=\"keyword\">char</span>) Byte.decode(<span class=\"string\">&quot;0x&quot;</span> + <span class=\"keyword\">new</span> String(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[] &#123;src0&#125;)).byteValue();</span><br><span class=\"line\">          b0 = (<span class=\"keyword\">char</span>) (b0 &lt;&lt; <span class=\"number\">4</span>);</span><br><span class=\"line\">          <span class=\"keyword\">char</span> b1 = (<span class=\"keyword\">char</span>) Byte.decode(<span class=\"string\">&quot;0x&quot;</span> + <span class=\"keyword\">new</span> String(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[] &#123;src1&#125;)).byteValue();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) (b0 ^ b1);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> size = hexString.length();</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[size / <span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] tmp = hexString.getBytes();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">          ret[i] = uniteBytes.apply(tmp[i * <span class=\"number\">2</span>], tmp[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>byte数组 转 int</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * byte数组 转 int</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bytes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">bytes2Int</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将每个byte依次搬运到int相应的位置</span></span><br><span class=\"line\">    result = bytes[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    result = result &lt;&lt; <span class=\"number\">8</span> | bytes[<span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    result = result &lt;&lt; <span class=\"number\">8</span> | bytes[<span class=\"number\">2</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    result = result &lt;&lt; <span class=\"number\">8</span> | bytes[<span class=\"number\">3</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>int 转 byte数组</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * int 转 byte数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] int2Bytes(<span class=\"keyword\">int</span> num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//通过移位运算，截取低8位的方式，将int保存到byte数组</span></span><br><span class=\"line\">    bytes[<span class=\"number\">0</span>] = (<span class=\"keyword\">byte</span>) (num &gt;&gt;&gt; <span class=\"number\">24</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">1</span>] = (<span class=\"keyword\">byte</span>) (num &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>) (num &gt;&gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">3</span>] = (<span class=\"keyword\">byte</span>) num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>获取String内存中对应的 UTF-16 编码的byte数组 (JVM大端转化的结果，非真实内存存放顺序)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取String内存中对应的 UTF-16 编码的byte数组 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] string2bytes(String str) &#123;</span><br><span class=\"line\">    ByteBuffer heapByteBuffer = ByteBuffer.allocate (str.length() * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : str.toCharArray()) &#123;</span><br><span class=\"line\">        heapByteBuffer.putChar(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapByteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = heapByteBuffer.limit() - heapByteBuffer.position();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</span><br><span class=\"line\">    heapByteBuffer.get(bytes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>通过Unsafe查看字符在内存中的实际顺序(非JVM优化过的,我认为这才是内存真实存放的顺序，取决于具体的CPU架构)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;restriction&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> sun.misc.<span class=\"function\">Unsafe <span class=\"title\">getUnsafe</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; cls = sun.misc.Unsafe.class;</span><br><span class=\"line\">    Field[] fields = cls.getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Field f : fields) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;theUnsafe&quot;</span>.equals(f.getName())) &#123;</span><br><span class=\"line\">            f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (sun.misc.Unsafe) f.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalAccessException(<span class=\"string\">&quot;no declared field: theUnsafe&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看字符在内存中真实的顺序，非JVM优化的，取决于CPU架构</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalAccessException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] char2bytesNative(<span class=\"keyword\">char</span> ch) <span class=\"keyword\">throws</span> IllegalAccessException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    Unsafe unsafe = getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> address = unsafe.allocateMemory(<span class=\"number\">2</span>);</span><br><span class=\"line\">    unsafe.putChar(address, ch);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> b = unsafe.getByte(address);</span><br><span class=\"line\">    bytes[<span class=\"number\">0</span>] = b;</span><br><span class=\"line\">    b = unsafe.getByte(address + <span class=\"number\">1</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">1</span>] = b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">   \tSystem.out.println(bytes2HexString(charToByte(<span class=\"string\">&#x27;国&#x27;</span>)));</span><br><span class=\"line\">  \tSystem.out.println(bytes2HexString(char2bytesNative(<span class=\"string\">&#x27;国&#x27;</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 还有一种更直接的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalAccessException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] char2bytesNative2(<span class=\"keyword\">char</span> ch) <span class=\"keyword\">throws</span> IllegalAccessException &#123;</span><br><span class=\"line\">    Unsafe unsafe = getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] charArr = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">    charArr[<span class=\"number\">0</span>] = ch;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> b = unsafe.getByte(charArr, (<span class=\"keyword\">long</span>) (unsafe.arrayBaseOffset(charArr.getClass())));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    bytes[<span class=\"number\">0</span>] = b;</span><br><span class=\"line\">    b = unsafe.getByte(charArr, (<span class=\"keyword\">long</span>) (unsafe.arrayBaseOffset(charArr.getClass()) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    bytes[<span class=\"number\">1</span>] = b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"abbrlink":"2460P60","excerpt":"整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\n主要涉及三个基本数据类型 byte、int、char\n\n以16进制表示查看二进制文件\n1\n\n\nxxd file\n\n\n反码、补码：\nhttps://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html\n\n上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\nhttps://www.cnblogs.com/esmusssein/p/11182321.h","more":"<h3 id=\"整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\"><a href=\"#整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\" class=\"headerlink\" title=\"整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清\"></a>整理一下二进制、计算机编码、位运算相关知识，拒绝含糊不清</h3><blockquote>\n<p>主要涉及三个基本数据类型 byte、int、char</p>\n</blockquote>\n<h4 id=\"以16进制表示查看二进制文件\"><a href=\"#以16进制表示查看二进制文件\" class=\"headerlink\" title=\"以16进制表示查看二进制文件\"></a>以16进制表示查看二进制文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd file</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反码、补码：\"><a href=\"#反码、补码：\" class=\"headerlink\" title=\"反码、补码：\"></a>反码、补码：</h4><p><a href=\"https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html\">https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html</a></p>\n<h5 id=\"上面虽然解释了-反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码-1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\"><a href=\"#上面虽然解释了-反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码-1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\" class=\"headerlink\" title=\"上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇\"></a>上面虽然解释了 反码，补码，但是还是有一些问题没有解释清楚：为什么负数的补码是反码+1，为什么正数的补码还是本身，-128的补码为什么是10000000等等，请看下面👇</h5><p><a href=\"https://www.cnblogs.com/esmusssein/p/11182321.html\">https://www.cnblogs.com/esmusssein/p/11182321.html</a></p>\n<h4 id=\"字符编码：\"><a href=\"#字符编码：\" class=\"headerlink\" title=\"字符编码：\"></a>字符编码：</h4><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/\">https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/</a></p>\n<blockquote>\n<p>Java 判断本地主机字节序工具：ByteOrder.nativeOrder();<br>大端小端在一台机器上没感知，因为高位地位是确定的，只不过在有的机器上内存的高地址对应高位叫“小端字节序” 像x86架构，而有的是内存的高地址对应低位叫“大端字节序”。</p>\n</blockquote>\n<h4 id=\"Unicode-编码查询工具：\"><a href=\"#Unicode-编码查询工具：\" class=\"headerlink\" title=\"Unicode 编码查询工具：\"></a>Unicode 编码查询工具：</h4><p><a href=\"https://www.qqxiuzi.cn/bianma/Unicode-UTF.php\">https://www.qqxiuzi.cn/bianma/Unicode-UTF.php</a></p>\n<h4 id=\"Java内码是utf-16吗？\"><a href=\"#Java内码是utf-16吗？\" class=\"headerlink\" title=\"Java内码是utf-16吗？\"></a>Java内码是utf-16吗？</h4><p><a href=\"https://blog.csdn.net/u014631304/article/details/77509380\">https://blog.csdn.net/u014631304/article/details/77509380</a></p>\n<h4 id=\"关于Unicode更多理解：\"><a href=\"#关于Unicode更多理解：\" class=\"headerlink\" title=\"关于Unicode更多理解：\"></a>关于Unicode更多理解：</h4><p><a href=\"https://www.jianshu.com/p/ad4bff4d9fa3\">https://www.jianshu.com/p/ad4bff4d9fa3</a></p>\n<h4 id=\"Java编码扩展知识：\"><a href=\"#Java编码扩展知识：\" class=\"headerlink\" title=\"Java编码扩展知识：\"></a>Java编码扩展知识：</h4><p><a href=\"https://www.jianshu.com/p/1b00ca07b003\">https://www.jianshu.com/p/1b00ca07b003</a></p>\n<h4 id=\"理解byte负数：\"><a href=\"#理解byte负数：\" class=\"headerlink\" title=\"理解byte负数：\"></a>理解byte负数：</h4><p><a href=\"https://blog.csdn.net/csdn_ds/article/details/79106006\">https://blog.csdn.net/csdn_ds/article/details/79106006</a></p>\n<h4 id=\"amp-0xff-获取真值原理：\"><a href=\"#amp-0xff-获取真值原理：\" class=\"headerlink\" title=\"&amp; 0xff 获取真值原理：\"></a>&amp; 0xff 获取真值原理：</h4><p><a href=\"https://blog.csdn.net/i6223671/article/details/88924481\">https://blog.csdn.net/i6223671/article/details/88924481</a></p>\n<h4 id=\"常用工具代码：\"><a href=\"#常用工具代码：\" class=\"headerlink\" title=\"常用工具代码：\"></a>常用工具代码：</h4><ol>\n<li><p>byte 转 二进制表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * byte 转 二进制表示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">byteToBit</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">7</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">5</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">3</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">            + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">1</span>) &amp; <span class=\"number\">0x1</span>) + (<span class=\"keyword\">byte</span>) ((b &gt;&gt; <span class=\"number\">0</span>) &amp; <span class=\"number\">0x1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>获取byte指定位的值</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取byte指定位的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> i (i&gt;=1)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span> <span class=\"title\">getBitArray</span><span class=\"params\">(<span class=\"keyword\">byte</span> b,<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) ((b &gt;&gt; (<span class=\"number\">8</span>-i)) &amp; <span class=\"number\">0x1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>字节数组转16进制</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 字节数组转16进制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bytes 需要转换的byte数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>  转换后的Hex字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesToHex</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class=\"line\">        String hex = Integer.toHexString(bytes[i] &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hex.length() &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            sb.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(hex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>char 转 byte数组(JVM大端转化的结果，非真实内存存放顺序)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * char 转 byte数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> c</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] charToByte(<span class=\"keyword\">char</span> c) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = (<span class=\"keyword\">byte</span>) ((c &amp; <span class=\"number\">0xFF00</span>) &gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    b[<span class=\"number\">1</span>] = (<span class=\"keyword\">byte</span>) (c &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>16进制 转 字节数组</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 16进制 转 字节数组</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> hexString</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] hexString2Bytes(String hexString) &#123;</span><br><span class=\"line\">      BiFunction&lt;Byte, Byte, Byte&gt; uniteBytes = (src0, src1) -&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">char</span> b0 = (<span class=\"keyword\">char</span>) Byte.decode(<span class=\"string\">&quot;0x&quot;</span> + <span class=\"keyword\">new</span> String(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[] &#123;src0&#125;)).byteValue();</span><br><span class=\"line\">          b0 = (<span class=\"keyword\">char</span>) (b0 &lt;&lt; <span class=\"number\">4</span>);</span><br><span class=\"line\">          <span class=\"keyword\">char</span> b1 = (<span class=\"keyword\">char</span>) Byte.decode(<span class=\"string\">&quot;0x&quot;</span> + <span class=\"keyword\">new</span> String(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[] &#123;src1&#125;)).byteValue();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) (b0 ^ b1);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> size = hexString.length();</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[size / <span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] tmp = hexString.getBytes();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">          ret[i] = uniteBytes.apply(tmp[i * <span class=\"number\">2</span>], tmp[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>byte数组 转 int</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * byte数组 转 int</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bytes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">bytes2Int</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将每个byte依次搬运到int相应的位置</span></span><br><span class=\"line\">    result = bytes[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    result = result &lt;&lt; <span class=\"number\">8</span> | bytes[<span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    result = result &lt;&lt; <span class=\"number\">8</span> | bytes[<span class=\"number\">2</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    result = result &lt;&lt; <span class=\"number\">8</span> | bytes[<span class=\"number\">3</span>] &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>int 转 byte数组</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * int 转 byte数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] int2Bytes(<span class=\"keyword\">int</span> num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"comment\">//通过移位运算，截取低8位的方式，将int保存到byte数组</span></span><br><span class=\"line\">    bytes[<span class=\"number\">0</span>] = (<span class=\"keyword\">byte</span>) (num &gt;&gt;&gt; <span class=\"number\">24</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">1</span>] = (<span class=\"keyword\">byte</span>) (num &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">2</span>] = (<span class=\"keyword\">byte</span>) (num &gt;&gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">3</span>] = (<span class=\"keyword\">byte</span>) num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>获取String内存中对应的 UTF-16 编码的byte数组 (JVM大端转化的结果，非真实内存存放顺序)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取String内存中对应的 UTF-16 编码的byte数组 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] string2bytes(String str) &#123;</span><br><span class=\"line\">    ByteBuffer heapByteBuffer = ByteBuffer.allocate (str.length() * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : str.toCharArray()) &#123;</span><br><span class=\"line\">        heapByteBuffer.putChar(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    heapByteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = heapByteBuffer.limit() - heapByteBuffer.position();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</span><br><span class=\"line\">    heapByteBuffer.get(bytes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>通过Unsafe查看字符在内存中的实际顺序(非JVM优化过的,我认为这才是内存真实存放的顺序，取决于具体的CPU架构)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;restriction&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> sun.misc.<span class=\"function\">Unsafe <span class=\"title\">getUnsafe</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; cls = sun.misc.Unsafe.class;</span><br><span class=\"line\">    Field[] fields = cls.getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Field f : fields) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;theUnsafe&quot;</span>.equals(f.getName())) &#123;</span><br><span class=\"line\">            f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (sun.misc.Unsafe) f.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalAccessException(<span class=\"string\">&quot;no declared field: theUnsafe&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看字符在内存中真实的顺序，非JVM优化的，取决于CPU架构</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalAccessException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] char2bytesNative(<span class=\"keyword\">char</span> ch) <span class=\"keyword\">throws</span> IllegalAccessException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    Unsafe unsafe = getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> address = unsafe.allocateMemory(<span class=\"number\">2</span>);</span><br><span class=\"line\">    unsafe.putChar(address, ch);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> b = unsafe.getByte(address);</span><br><span class=\"line\">    bytes[<span class=\"number\">0</span>] = b;</span><br><span class=\"line\">    b = unsafe.getByte(address + <span class=\"number\">1</span>);</span><br><span class=\"line\">    bytes[<span class=\"number\">1</span>] = b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">   \tSystem.out.println(bytes2HexString(charToByte(<span class=\"string\">&#x27;国&#x27;</span>)));</span><br><span class=\"line\">  \tSystem.out.println(bytes2HexString(char2bytesNative(<span class=\"string\">&#x27;国&#x27;</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 还有一种更直接的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ch</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> IllegalAccessException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] char2bytesNative2(<span class=\"keyword\">char</span> ch) <span class=\"keyword\">throws</span> IllegalAccessException &#123;</span><br><span class=\"line\">    Unsafe unsafe = getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] charArr = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">    charArr[<span class=\"number\">0</span>] = ch;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> b = unsafe.getByte(charArr, (<span class=\"keyword\">long</span>) (unsafe.arrayBaseOffset(charArr.getClass())));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    bytes[<span class=\"number\">0</span>] = b;</span><br><span class=\"line\">    b = unsafe.getByte(charArr, (<span class=\"keyword\">long</span>) (unsafe.arrayBaseOffset(charArr.getClass()) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    bytes[<span class=\"number\">1</span>] = b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"_content":"### 一. 什么是CPU的缓存\nCPU与高速缓存通过快速通道直接相连，而高速缓存和主存通过数据总线相连\n\nCPU cache出现的原因：CPU的频率太快了。快到主存跟不上，这样在处理器时钟周期内。CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和主存之间速度不匹配的问题\n（结钩：cpu → cache → memory）\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-d58c39b7782153b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**CPU cache远小于主存还有什么意义：**\n1. 时间局部性：如果某个数据被访问，那么在不久的将来很可能再次被访问\n2. 空间局部 性：如果某个数据被访问。那么与它相邻的数据很快也会被访问\n\n### 二. 缓存一致性协议（MESI）\n用于保证多个CPU cache 之间缓存共享数据的一致\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-96efae7b06218890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 三.CPU乱序执行优化（指令重排）\n\n ![image.png](https://upload-images.jianshu.io/upload_images/12637001-c025dc92bcca2a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/Java并发编程/20180830-Java并发编程-CPU缓存.md","raw":"### 一. 什么是CPU的缓存\nCPU与高速缓存通过快速通道直接相连，而高速缓存和主存通过数据总线相连\n\nCPU cache出现的原因：CPU的频率太快了。快到主存跟不上，这样在处理器时钟周期内。CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和主存之间速度不匹配的问题\n（结钩：cpu → cache → memory）\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-d58c39b7782153b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**CPU cache远小于主存还有什么意义：**\n1. 时间局部性：如果某个数据被访问，那么在不久的将来很可能再次被访问\n2. 空间局部 性：如果某个数据被访问。那么与它相邻的数据很快也会被访问\n\n### 二. 缓存一致性协议（MESI）\n用于保证多个CPU cache 之间缓存共享数据的一致\n![image.png](https://upload-images.jianshu.io/upload_images/12637001-96efae7b06218890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 三.CPU乱序执行优化（指令重排）\n\n ![image.png](https://upload-images.jianshu.io/upload_images/12637001-c025dc92bcca2a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"Java并发编程/20180830-Java并发编程-CPU缓存","published":1,"date":"2018-08-29T16:00:00.000Z","updated":"2021-05-04T11:43:38.461Z","title":"Java并发编程-CPU缓存","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1s000ynnvb7lfn12tw","content":"<h3 id=\"一-什么是CPU的缓存\"><a href=\"#一-什么是CPU的缓存\" class=\"headerlink\" title=\"一. 什么是CPU的缓存\"></a>一. 什么是CPU的缓存</h3><p>CPU与高速缓存通过快速通道直接相连，而高速缓存和主存通过数据总线相连</p>\n<p>CPU cache出现的原因：CPU的频率太快了。快到主存跟不上，这样在处理器时钟周期内。CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和主存之间速度不匹配的问题<br>（结钩：cpu → cache → memory）<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d58c39b7782153b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>CPU cache远小于主存还有什么意义：</strong></p>\n<ol>\n<li>时间局部性：如果某个数据被访问，那么在不久的将来很可能再次被访问</li>\n<li>空间局部 性：如果某个数据被访问。那么与它相邻的数据很快也会被访问</li>\n</ol>\n<h3 id=\"二-缓存一致性协议（MESI）\"><a href=\"#二-缓存一致性协议（MESI）\" class=\"headerlink\" title=\"二. 缓存一致性协议（MESI）\"></a>二. 缓存一致性协议（MESI）</h3><p>用于保证多个CPU cache 之间缓存共享数据的一致<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-96efae7b06218890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"三-CPU乱序执行优化（指令重排）\"><a href=\"#三-CPU乱序执行优化（指令重排）\" class=\"headerlink\" title=\"三.CPU乱序执行优化（指令重排）\"></a>三.CPU乱序执行优化（指令重排）</h3><p> <img src=\"https://upload-images.jianshu.io/upload_images/12637001-c025dc92bcca2a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"abbrlink":"16TS0B9","excerpt":"一. 什么是CPU的缓存\nCPU与高速缓存通过快速通道直接相连，而高速缓存和主存通过数据总线相连\n\nCPU cache出现的原因：CPU的频率太快了。快到主存跟不上，这样在处理器时钟周期内。CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和主存之间速度不匹配的问题\n（结钩：cpu → cache → memory）\n\n\nCPU cache远小于主存还有什么意义：\n\n 1. 时间局部性：如果某个数据被访问，那么在不久的将来很可能再次被访问\n 2. 空间局部 性：如果某个数据被访问。那么与它相邻的数据很快也会被访问\n\n二. 缓存一致性协议（MESI）\n用于保证多个CPU c","more":"<h3 id=\"一-什么是CPU的缓存\"><a href=\"#一-什么是CPU的缓存\" class=\"headerlink\" title=\"一. 什么是CPU的缓存\"></a>一. 什么是CPU的缓存</h3><p>CPU与高速缓存通过快速通道直接相连，而高速缓存和主存通过数据总线相连</p>\n<p>CPU cache出现的原因：CPU的频率太快了。快到主存跟不上，这样在处理器时钟周期内。CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和主存之间速度不匹配的问题<br>（结钩：cpu → cache → memory）<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-d58c39b7782153b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>CPU cache远小于主存还有什么意义：</strong></p>\n<ol>\n<li>时间局部性：如果某个数据被访问，那么在不久的将来很可能再次被访问</li>\n<li>空间局部 性：如果某个数据被访问。那么与它相邻的数据很快也会被访问</li>\n</ol>\n<h3 id=\"二-缓存一致性协议（MESI）\"><a href=\"#二-缓存一致性协议（MESI）\" class=\"headerlink\" title=\"二. 缓存一致性协议（MESI）\"></a>二. 缓存一致性协议（MESI）</h3><p>用于保证多个CPU cache 之间缓存共享数据的一致<br><img src=\"https://upload-images.jianshu.io/upload_images/12637001-96efae7b06218890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"三-CPU乱序执行优化（指令重排）\"><a href=\"#三-CPU乱序执行优化（指令重排）\" class=\"headerlink\" title=\"三.CPU乱序执行优化（指令重排）\"></a>三.CPU乱序执行优化（指令重排）</h3><p> <img src=\"https://upload-images.jianshu.io/upload_images/12637001-c025dc92bcca2a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"_content":"![在这里插入图片描述](https://img-blog.csdnimg.cn/20190625131344804.jpeg#pic_center)\n<div align=center>\n<img src=\"https://img-blog.csdnimg.cn/20210112235240968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_12,color_FFFFFF,t_70\"/>\n</div>\n\n## 服务端\n```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Set;\n\n/**\n * @author: coderzc\n */\npublic class NioSocketServer {\n    private static Selector selector = null;\n    private static ServerSocketChannel serverSocketChannel = null;\n\n    private static ByteBuffer writeBuffer = ByteBuffer.allocateDirect(1024);\n    private static ByteBuffer readBuffer = ByteBuffer.allocateDirect(1024);\n    private static StringBuffer message = new StringBuffer();\n\n    private static SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\");\n\n    static {\n        // 初始化\n        try {\n            // socket()\n            serverSocketChannel = ServerSocketChannel.open();\n            // 把serverSocketChannel 变成非阻塞模式（accept非阻塞）\n            serverSocketChannel.configureBlocking(false);\n            // bind()、listen()\n            serverSocketChannel.bind(new InetSocketAddress(8888));\n            System.out.println(\"listening on port 8888\");\n\n            // 创建多路io复用器【select/poll/epoll】\n            // 相当于 epoll_create() 创建epoll的根结点 selector\n            selector = Selector.open();\n\n            // 相当于 epoll_ctl(,EPOLL_CTL_ADD,)  把serverSocket注册到selector这个多路复用器上（上epoll树），检测类型为accept事件\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void main(String[] args) throws IOException {\n\n        // 相当于 epoll_wait(,,,-1)\n        while (selector.select(0L) > 0) { //参数：0L永远阻塞 ；返回值: 不会等于0\n            // 遍历io就绪队列\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            System.out.println(\"\\033[31;m\"+\"selector is activity \\033[0m，keySize：\" + selectionKeys.size());\n            for (SelectionKey selectionKey : selectionKeys) {\n                // isAcceptable() 返回true 代表该channel是accepted的serverSocketChannel\n                if (selectionKey.isAcceptable()) {\n                    System.out.println(\"\\033[33;4m\"+simpleDateFormat.format(new Date())+\"\\033[0m  \\033[31;4misAcceptable\"+\"\\033[0m\");\n                    ServerSocketChannel serverChannel = (ServerSocketChannel) selectionKey.channel();\n                    SocketChannel socketChannel = serverChannel.accept();\n\n                    // 防止客户端传来RST，socket被移除就绪队列,判断一下（之前已经把serverSocketChannel设置为非阻塞，所有就绪队列没有会立刻返回null）\n                    if (socketChannel == null) {\n                        continue;\n                    }\n                    // 把socketChannel变成非阻塞模式（读、写非阻塞）\n                    socketChannel.configureBlocking(false);\n                    // 把socketChannel注册到多路复用器上（上epoll树）\n                    SelectionKey newSocketKey = socketChannel.register(selector, SelectionKey.OP_READ);\n\n                    // 打印客户端ip：port\n                    String ip = socketChannel.socket().getInetAddress().getHostAddress();\n                    int port = socketChannel.socket().getPort();\n                    String format = String.format(\"hi new client ip:%s,port:%s\\n\", ip, port);\n                    System.out.println(format);\n\n                    // 向客户端输出hi，ip:port\n                    // 把读到的数据绑定到key中\n                    newSocketKey.attach(\"hi～，\"+format);\n                    // 注册写事件\n                    newSocketKey.interestOps(newSocketKey.interestOps() | SelectionKey.OP_WRITE);\n                }\n                // isReadable() 返回true 代表channel是readable的socketChannel\n                else if (selectionKey.isReadable()) {\n                    System.out.println(\"\\033[33;4m\"+simpleDateFormat.format(new Date())+\"\\033[0m  \\033[31;4misReadable\\033[0m\");\n                    handleReceive(selectionKey);\n\n                } else if (selectionKey.isWritable()) {\n                    System.out.println(\"\\033[33;4m\"+simpleDateFormat.format(new Date())+\"\\033[0m  \\033[31;4misWritable\"+\"\\033[0m\");\n\n                    handleSend(selectionKey);\n                }\n\n            }\n\n            // 清除处理过的事件,防止下次循环时重复处理\n            // 感觉想java的bug，你每次执行select() 时候java从调用内核函数epoll_wait()获得到最近的就绪队列后直接addAll到selectionKeys，不会帮你清空selectionKeys\n            selectionKeys.clear();\n        }\n    }\n\n\n    private static void handleReceive(SelectionKey selectionKey) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n\n        // 读取channel中数据\n        readBuffer.clear();\n\n        int read = 0;\n        try {\n            while ((read = socketChannel.read(readBuffer)) > 0) {// 循环读取缓冲区数据，直到把缓冲区读空，防止频繁调用select()，要配合非阻塞channel才会发挥最大性能\n//                        System.out.println(\"readSize：\" + read);\n                readBuffer.flip();\n\n                String chunk = Charset.forName(\"UTF-8\").decode(readBuffer).toString();\n//                        System.out.println(\"chunk：\"+chunk);\n                message.append(chunk);\n\n                // 检测消息行尾\n                if (message.indexOf(\"\\n\") >= 0) {\n                    System.out.print(\"receiveData --->\" + \"\\033[36;4m\"+message+\"\\033[0m\");\n\n                    // 把要写的的数据绑定到key中\n                    selectionKey.attach(\"server message echo:\" + \"已经收到\\n\");\n                    // 注册写事件\n                    selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_WRITE);\n\n                    // 清除客户端消息行缓存\n                    message.setLength(0);\n                }\n                readBuffer.clear();\n\n            }\n\n\n            // read == -1 代表客户端已经断开\n            if (read == -1) {\n                System.out.println(\"disconnect a client..\");\n                // 反注册channel\n                selectionKey.cancel();\n                // 关闭socket\n                socketChannel.close();\n            }\n\n            //非阻塞模式下，read==0代表当前系统缓冲区已经空了\n            if (read == 0) {\n                System.out.println(\"000,接受缓冲区已经读完了\\n\");\n            }\n\n\n        }catch (Exception e){\n            System.err.println(\"读取数据发生异常\");\n\n            // 反注册channel\n            selectionKey.cancel();\n            // 关闭socket\n            socketChannel.close();\n        }\n    }\n\n    private static void handleSend(SelectionKey selectionKey) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n\n        String message = (String) selectionKey.attachment();\n        if (message == null) {\n            return;\n        }\n        selectionKey.attach(null);\n\n        writeBuffer.clear();\n        writeBuffer.put(message.getBytes(Charset.forName(\"UTF-8\")));\n        writeBuffer.flip();\n        while (writeBuffer.hasRemaining()) {\n            socketChannel.write(writeBuffer);\n        }\n\n        System.out.println(\"写出数据 ---> \"+message);\n        // 取消读事件,防止isWritable一直激活，cpu空转\n        selectionKey.interestOps(selectionKey.interestOps() & ~SelectionKey.OP_WRITE);\n    }\n```\n\n## 客户端 (支持断线自动重连)\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Set;\n\n/**\n * @author: coderzc\n */\npublic class NioSocketClient {\n\n    private static final ByteBuffer sendBuffer = ByteBuffer.allocateDirect(8196);\n    private static final ByteBuffer receiveBuffer = ByteBuffer.allocateDirect(1024);\n\n    private static Selector selector = null;\n    private static SocketChannel socketChannel = null;\n    private static SelectionKey registerKey = null;\n    private static Thread reactor = null;\n\n    private static boolean isConnected() {\n        return socketChannel != null && socketChannel.isConnected();\n    }\n\n\n    public static void main(String[] args) throws IOException {\n\n        // 打开复用器\n        selector = Selector.open();\n\n        // 开始连接\n        initConnect();\n\n        // 启动reactor线程处理 这里和reactor和netty不太一样，就是我自己起的名，用来处理事件的select循环而已\n        reactor = new Thread(NioSocketClient::reactor);\n        reactor.start();\n\n        // 监听键盘输入\n        Thread receiver = new Thread(NioSocketClient::listenUserInput);\n        receiver.start();\n    }\n\n    /**\n     * 初始化连接，注册OP_CONNECT事件\n     */\n    private static void initConnect() {\n        try {\n            // 打开通道\n            socketChannel = SocketChannel.open();\n\n            //设置通道为非阻塞\n            socketChannel.configureBlocking(false);\n\n            //连接主机\n            boolean connect = socketChannel.connect(new InetSocketAddress(\"127.0.0.1\", 8888));\n\n            //注册事件\n            /* TODO 唤醒select\n             *  因为主线程select() 阻塞，将会导致下面的方法中，当前线程调用socketChannel.register() 由于获取不到锁也阻塞\n             *   所以要在调register之前把select()唤醒\n             *\n             * selector.wakeup();\n             * registerKey = socketChannel.register(selector, 0);\n             *\n             * TODO selector.wakeup() 不好控制，所以改成在前面调用interrupt(),中断reactor线程，在注册连接事件后，重启一个新的reactor线程\n             */\n\n            if (connect) {\n                registerKey = socketChannel.register(selector, SelectionKey.OP_READ);\n            } else {\n                registerKey = socketChannel.register(selector, SelectionKey.OP_CONNECT);\n            }\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void reconnection() {\n        //清除旧的连接\n        try {\n            registerKey.cancel();\n            socketChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // TODO 中断reactor线程\n        //  (其实是中断线程阻塞提前返回,当thread.sleep、thread.join、thread.wait、object.wait 遇到interrupt时，会抛出异常而使线程提前终止)\n        //  ，但这些方法会在抛出异常的同时通过Thread.interrupted()将中断标识清除\n        reactor.interrupt();\n\n\n        // 注册新的OP_CONNECT事件\n        initConnect();\n\n        // 重启reactor线程处理\n        reactor = new Thread(NioSocketClient::reactor);\n        reactor.start();\n\n\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void reactor() {\n        try {\n            // handler socket data\n            while (!Thread.interrupted()) {\n                int count = -2;\n                while ((count = selector.select(0L)) > 0) {\n//                System.out.println(count+\"---\");\n                    Set<SelectionKey> keys = selector.selectedKeys();\n//                if (keys == null || keys.size() == 0) {\n//                    continue;\n//                }\n                    System.out.println(\"selector is activity，keySize：\" + keys.size());\n\n                    for (SelectionKey key : keys) {\n\n                        // 判断连接状态\n                        if (key.isValid() && key.isConnectable()) {\n                            System.out.println(\"isConnectable\");\n\n                            //TODO isConnectable后，应该移除 OP_CONNECT 事件，\n                            // 否则在finishConnect成功后，select() 将一直返回0 ，CPU空转\n                            // 在socketChannel.register(selector, SelectionKey.OP_READ)这里就回会把OP_CONNECT事件去掉，所以这里暂时不需要\n//                            key.interestOps(key.interestOps() & ~SelectionKey.OP_CONNECT);\n\n\n                            SocketChannel socketChannel = (SocketChannel) key.channel();\n                            boolean finishConnect = false;\n                            try {\n                                finishConnect = socketChannel.finishConnect();\n                            } catch (Exception e) {\n                                finishConnect = false;\n                            }\n                            // 完成连接\n                            if (finishConnect) {\n                                System.out.println(\"已经连接到服务器\");\n                                // 注册读事件\n                                socketChannel.register(selector, SelectionKey.OP_READ);\n\n                                // 将断网前的数据发出\n                                synchronized (sendBuffer){\n                                    if(sendBuffer.hasRemaining() && (sendBuffer.remaining()!=sendBuffer.capacity())){// 缓冲区有数据\n                                        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);//添加写事件\n                                    }\n                                }\n\n                            } else {\n                                System.out.println(\"连接失败尝试重连。。。\");\n\n                                // 清除旧的连接\n                                key.cancel();\n                                socketChannel.close();\n\n                                // 等待连接安全关闭\n                                Thread.sleep(2000);\n\n\n                                /**\n                                 * 重新连接\n                                 * 因为在同一个线程中，所以仅重连，不用销毁reactor线程\n                                 */\n                                initConnect();\n                            }\n\n                        }\n                        // 接受来自服务器的响应\n                        else if (key.isReadable()) {\n                            System.out.println(\"isReadable\");\n                            receive(key);\n                        }\n                        // 实际上只要注册了关心写操作，这个操作就一直被激活\n                        else if (key.isWritable()) {\n                            System.out.println(\"isWritable\");\n                            send(key);\n                        }\n\n\n                    }\n\n                    keys.clear();\n                }\n            }\n        } catch (InterruptedException e) {\n            System.out.println(\"reactor线程被提前中断，正常退出\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    private static void receive(SelectionKey key) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        int read = socketChannel.read(receiveBuffer);\n\n        if (read > 0) {\n            receiveBuffer.flip();\n            String receiveData = Charset.forName(\"UTF-8\").decode(receiveBuffer).toString();\n            System.out.println(\"receive server message--->\" + receiveData);\n            receiveBuffer.clear();\n        }\n\n        // read == -1 代表服务端已经断开\n        if (read == -1) {\n            System.out.println(\"server already close.\\n\");\n            // 反注册channel\n            key.cancel();\n            // 关闭socket\n            socketChannel.close();\n        }\n\n\n    }\n\n\n    private static void send(SelectionKey key) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        boolean sysFull = false;\n        synchronized (sendBuffer){\n\n            //写模式切换到读模式 ---> position归零、limit为之前的position的值\n            sendBuffer.flip();\n            while (sendBuffer.hasRemaining()) {\n                int writed = socketChannel.write(sendBuffer);\n                System.out.println(\"writed byte is：\" + writed);\n\n                if(writed<=0){\n                    sysFull = true;\n                    // 系统发送缓存已经满了\n                    System.out.println(\"系统发送缓存已经满了\");\n                    break;\n                }\n            }\n            // 将数据移到开头 ----> position=limit-position、limit为capacity\n            sendBuffer.compact();\n        }\n\n        if(!sysFull){\n            key.interestOps(key.interestOps() & ~SelectionKey.OP_WRITE);//取消写事件\n        }\n    }\n\n\n    private static void listenUserInput() {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            String msg;\n            while ((msg = bufferedReader.readLine()) != null) {\n                System.out.println(\"Thread.getAllStackTraces size:\" + Thread.getAllStackTraces().keySet().size());\n\n\n                if (!isConnected()) {\n                    System.out.println(\"发送失败，连接已经断开，尝试重连。。。\");\n\n                    // 把无法发送的消息进行留言，等下次连接成功时一并发出\n                    synchronized (sendBuffer) {\n                        sendBuffer.put((msg + \"\\n\").getBytes());\n                    }\n\n\n                    if (socketChannel != null && !socketChannel.isConnectionPending()) {// 当前没有正在尝试连接，则主动触发重连\n                        // 启动重连\n                        reconnection();\n                    } else {\n                        System.out.println(\"已经尝试重连，请勿重复触发。。。\");\n                    }\n\n                    continue;\n                }\n\n                // 向发送缓冲区写入消息\n                synchronized (sendBuffer) {\n                    sendBuffer.put((msg + \"\\n\").getBytes());\n                }\n\n                registerKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);//添加写事件\n                /*\n                TODO\n                 1、selector所在线程可能正阻塞在select()上，\n                 interestOps 的改变不会立即被selector感知，需要手动唤醒selector所在线程\n                 2、另外 key.readyOps() 并不能输出实时的状态，只有select()函数返回时key.readyOps()里的值才会被更新\n                 即：jdk不会你帮你把key.readyOps()归零，直到select() 返回 [readyOps()、selectedKeys()] 都是这样\n                 */\n                selector.wakeup();\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```","source":"_posts/NIO与网络编程/20190624-实现 NIO Socket.md","raw":"![在这里插入图片描述](https://img-blog.csdnimg.cn/20190625131344804.jpeg#pic_center)\n<div align=center>\n<img src=\"https://img-blog.csdnimg.cn/20210112235240968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_12,color_FFFFFF,t_70\"/>\n</div>\n\n## 服务端\n```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Set;\n\n/**\n * @author: coderzc\n */\npublic class NioSocketServer {\n    private static Selector selector = null;\n    private static ServerSocketChannel serverSocketChannel = null;\n\n    private static ByteBuffer writeBuffer = ByteBuffer.allocateDirect(1024);\n    private static ByteBuffer readBuffer = ByteBuffer.allocateDirect(1024);\n    private static StringBuffer message = new StringBuffer();\n\n    private static SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\");\n\n    static {\n        // 初始化\n        try {\n            // socket()\n            serverSocketChannel = ServerSocketChannel.open();\n            // 把serverSocketChannel 变成非阻塞模式（accept非阻塞）\n            serverSocketChannel.configureBlocking(false);\n            // bind()、listen()\n            serverSocketChannel.bind(new InetSocketAddress(8888));\n            System.out.println(\"listening on port 8888\");\n\n            // 创建多路io复用器【select/poll/epoll】\n            // 相当于 epoll_create() 创建epoll的根结点 selector\n            selector = Selector.open();\n\n            // 相当于 epoll_ctl(,EPOLL_CTL_ADD,)  把serverSocket注册到selector这个多路复用器上（上epoll树），检测类型为accept事件\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void main(String[] args) throws IOException {\n\n        // 相当于 epoll_wait(,,,-1)\n        while (selector.select(0L) > 0) { //参数：0L永远阻塞 ；返回值: 不会等于0\n            // 遍历io就绪队列\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            System.out.println(\"\\033[31;m\"+\"selector is activity \\033[0m，keySize：\" + selectionKeys.size());\n            for (SelectionKey selectionKey : selectionKeys) {\n                // isAcceptable() 返回true 代表该channel是accepted的serverSocketChannel\n                if (selectionKey.isAcceptable()) {\n                    System.out.println(\"\\033[33;4m\"+simpleDateFormat.format(new Date())+\"\\033[0m  \\033[31;4misAcceptable\"+\"\\033[0m\");\n                    ServerSocketChannel serverChannel = (ServerSocketChannel) selectionKey.channel();\n                    SocketChannel socketChannel = serverChannel.accept();\n\n                    // 防止客户端传来RST，socket被移除就绪队列,判断一下（之前已经把serverSocketChannel设置为非阻塞，所有就绪队列没有会立刻返回null）\n                    if (socketChannel == null) {\n                        continue;\n                    }\n                    // 把socketChannel变成非阻塞模式（读、写非阻塞）\n                    socketChannel.configureBlocking(false);\n                    // 把socketChannel注册到多路复用器上（上epoll树）\n                    SelectionKey newSocketKey = socketChannel.register(selector, SelectionKey.OP_READ);\n\n                    // 打印客户端ip：port\n                    String ip = socketChannel.socket().getInetAddress().getHostAddress();\n                    int port = socketChannel.socket().getPort();\n                    String format = String.format(\"hi new client ip:%s,port:%s\\n\", ip, port);\n                    System.out.println(format);\n\n                    // 向客户端输出hi，ip:port\n                    // 把读到的数据绑定到key中\n                    newSocketKey.attach(\"hi～，\"+format);\n                    // 注册写事件\n                    newSocketKey.interestOps(newSocketKey.interestOps() | SelectionKey.OP_WRITE);\n                }\n                // isReadable() 返回true 代表channel是readable的socketChannel\n                else if (selectionKey.isReadable()) {\n                    System.out.println(\"\\033[33;4m\"+simpleDateFormat.format(new Date())+\"\\033[0m  \\033[31;4misReadable\\033[0m\");\n                    handleReceive(selectionKey);\n\n                } else if (selectionKey.isWritable()) {\n                    System.out.println(\"\\033[33;4m\"+simpleDateFormat.format(new Date())+\"\\033[0m  \\033[31;4misWritable\"+\"\\033[0m\");\n\n                    handleSend(selectionKey);\n                }\n\n            }\n\n            // 清除处理过的事件,防止下次循环时重复处理\n            // 感觉想java的bug，你每次执行select() 时候java从调用内核函数epoll_wait()获得到最近的就绪队列后直接addAll到selectionKeys，不会帮你清空selectionKeys\n            selectionKeys.clear();\n        }\n    }\n\n\n    private static void handleReceive(SelectionKey selectionKey) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n\n        // 读取channel中数据\n        readBuffer.clear();\n\n        int read = 0;\n        try {\n            while ((read = socketChannel.read(readBuffer)) > 0) {// 循环读取缓冲区数据，直到把缓冲区读空，防止频繁调用select()，要配合非阻塞channel才会发挥最大性能\n//                        System.out.println(\"readSize：\" + read);\n                readBuffer.flip();\n\n                String chunk = Charset.forName(\"UTF-8\").decode(readBuffer).toString();\n//                        System.out.println(\"chunk：\"+chunk);\n                message.append(chunk);\n\n                // 检测消息行尾\n                if (message.indexOf(\"\\n\") >= 0) {\n                    System.out.print(\"receiveData --->\" + \"\\033[36;4m\"+message+\"\\033[0m\");\n\n                    // 把要写的的数据绑定到key中\n                    selectionKey.attach(\"server message echo:\" + \"已经收到\\n\");\n                    // 注册写事件\n                    selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_WRITE);\n\n                    // 清除客户端消息行缓存\n                    message.setLength(0);\n                }\n                readBuffer.clear();\n\n            }\n\n\n            // read == -1 代表客户端已经断开\n            if (read == -1) {\n                System.out.println(\"disconnect a client..\");\n                // 反注册channel\n                selectionKey.cancel();\n                // 关闭socket\n                socketChannel.close();\n            }\n\n            //非阻塞模式下，read==0代表当前系统缓冲区已经空了\n            if (read == 0) {\n                System.out.println(\"000,接受缓冲区已经读完了\\n\");\n            }\n\n\n        }catch (Exception e){\n            System.err.println(\"读取数据发生异常\");\n\n            // 反注册channel\n            selectionKey.cancel();\n            // 关闭socket\n            socketChannel.close();\n        }\n    }\n\n    private static void handleSend(SelectionKey selectionKey) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n\n        String message = (String) selectionKey.attachment();\n        if (message == null) {\n            return;\n        }\n        selectionKey.attach(null);\n\n        writeBuffer.clear();\n        writeBuffer.put(message.getBytes(Charset.forName(\"UTF-8\")));\n        writeBuffer.flip();\n        while (writeBuffer.hasRemaining()) {\n            socketChannel.write(writeBuffer);\n        }\n\n        System.out.println(\"写出数据 ---> \"+message);\n        // 取消读事件,防止isWritable一直激活，cpu空转\n        selectionKey.interestOps(selectionKey.interestOps() & ~SelectionKey.OP_WRITE);\n    }\n```\n\n## 客户端 (支持断线自动重连)\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Set;\n\n/**\n * @author: coderzc\n */\npublic class NioSocketClient {\n\n    private static final ByteBuffer sendBuffer = ByteBuffer.allocateDirect(8196);\n    private static final ByteBuffer receiveBuffer = ByteBuffer.allocateDirect(1024);\n\n    private static Selector selector = null;\n    private static SocketChannel socketChannel = null;\n    private static SelectionKey registerKey = null;\n    private static Thread reactor = null;\n\n    private static boolean isConnected() {\n        return socketChannel != null && socketChannel.isConnected();\n    }\n\n\n    public static void main(String[] args) throws IOException {\n\n        // 打开复用器\n        selector = Selector.open();\n\n        // 开始连接\n        initConnect();\n\n        // 启动reactor线程处理 这里和reactor和netty不太一样，就是我自己起的名，用来处理事件的select循环而已\n        reactor = new Thread(NioSocketClient::reactor);\n        reactor.start();\n\n        // 监听键盘输入\n        Thread receiver = new Thread(NioSocketClient::listenUserInput);\n        receiver.start();\n    }\n\n    /**\n     * 初始化连接，注册OP_CONNECT事件\n     */\n    private static void initConnect() {\n        try {\n            // 打开通道\n            socketChannel = SocketChannel.open();\n\n            //设置通道为非阻塞\n            socketChannel.configureBlocking(false);\n\n            //连接主机\n            boolean connect = socketChannel.connect(new InetSocketAddress(\"127.0.0.1\", 8888));\n\n            //注册事件\n            /* TODO 唤醒select\n             *  因为主线程select() 阻塞，将会导致下面的方法中，当前线程调用socketChannel.register() 由于获取不到锁也阻塞\n             *   所以要在调register之前把select()唤醒\n             *\n             * selector.wakeup();\n             * registerKey = socketChannel.register(selector, 0);\n             *\n             * TODO selector.wakeup() 不好控制，所以改成在前面调用interrupt(),中断reactor线程，在注册连接事件后，重启一个新的reactor线程\n             */\n\n            if (connect) {\n                registerKey = socketChannel.register(selector, SelectionKey.OP_READ);\n            } else {\n                registerKey = socketChannel.register(selector, SelectionKey.OP_CONNECT);\n            }\n\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void reconnection() {\n        //清除旧的连接\n        try {\n            registerKey.cancel();\n            socketChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // TODO 中断reactor线程\n        //  (其实是中断线程阻塞提前返回,当thread.sleep、thread.join、thread.wait、object.wait 遇到interrupt时，会抛出异常而使线程提前终止)\n        //  ，但这些方法会在抛出异常的同时通过Thread.interrupted()将中断标识清除\n        reactor.interrupt();\n\n\n        // 注册新的OP_CONNECT事件\n        initConnect();\n\n        // 重启reactor线程处理\n        reactor = new Thread(NioSocketClient::reactor);\n        reactor.start();\n\n\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void reactor() {\n        try {\n            // handler socket data\n            while (!Thread.interrupted()) {\n                int count = -2;\n                while ((count = selector.select(0L)) > 0) {\n//                System.out.println(count+\"---\");\n                    Set<SelectionKey> keys = selector.selectedKeys();\n//                if (keys == null || keys.size() == 0) {\n//                    continue;\n//                }\n                    System.out.println(\"selector is activity，keySize：\" + keys.size());\n\n                    for (SelectionKey key : keys) {\n\n                        // 判断连接状态\n                        if (key.isValid() && key.isConnectable()) {\n                            System.out.println(\"isConnectable\");\n\n                            //TODO isConnectable后，应该移除 OP_CONNECT 事件，\n                            // 否则在finishConnect成功后，select() 将一直返回0 ，CPU空转\n                            // 在socketChannel.register(selector, SelectionKey.OP_READ)这里就回会把OP_CONNECT事件去掉，所以这里暂时不需要\n//                            key.interestOps(key.interestOps() & ~SelectionKey.OP_CONNECT);\n\n\n                            SocketChannel socketChannel = (SocketChannel) key.channel();\n                            boolean finishConnect = false;\n                            try {\n                                finishConnect = socketChannel.finishConnect();\n                            } catch (Exception e) {\n                                finishConnect = false;\n                            }\n                            // 完成连接\n                            if (finishConnect) {\n                                System.out.println(\"已经连接到服务器\");\n                                // 注册读事件\n                                socketChannel.register(selector, SelectionKey.OP_READ);\n\n                                // 将断网前的数据发出\n                                synchronized (sendBuffer){\n                                    if(sendBuffer.hasRemaining() && (sendBuffer.remaining()!=sendBuffer.capacity())){// 缓冲区有数据\n                                        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);//添加写事件\n                                    }\n                                }\n\n                            } else {\n                                System.out.println(\"连接失败尝试重连。。。\");\n\n                                // 清除旧的连接\n                                key.cancel();\n                                socketChannel.close();\n\n                                // 等待连接安全关闭\n                                Thread.sleep(2000);\n\n\n                                /**\n                                 * 重新连接\n                                 * 因为在同一个线程中，所以仅重连，不用销毁reactor线程\n                                 */\n                                initConnect();\n                            }\n\n                        }\n                        // 接受来自服务器的响应\n                        else if (key.isReadable()) {\n                            System.out.println(\"isReadable\");\n                            receive(key);\n                        }\n                        // 实际上只要注册了关心写操作，这个操作就一直被激活\n                        else if (key.isWritable()) {\n                            System.out.println(\"isWritable\");\n                            send(key);\n                        }\n\n\n                    }\n\n                    keys.clear();\n                }\n            }\n        } catch (InterruptedException e) {\n            System.out.println(\"reactor线程被提前中断，正常退出\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    private static void receive(SelectionKey key) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        int read = socketChannel.read(receiveBuffer);\n\n        if (read > 0) {\n            receiveBuffer.flip();\n            String receiveData = Charset.forName(\"UTF-8\").decode(receiveBuffer).toString();\n            System.out.println(\"receive server message--->\" + receiveData);\n            receiveBuffer.clear();\n        }\n\n        // read == -1 代表服务端已经断开\n        if (read == -1) {\n            System.out.println(\"server already close.\\n\");\n            // 反注册channel\n            key.cancel();\n            // 关闭socket\n            socketChannel.close();\n        }\n\n\n    }\n\n\n    private static void send(SelectionKey key) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        boolean sysFull = false;\n        synchronized (sendBuffer){\n\n            //写模式切换到读模式 ---> position归零、limit为之前的position的值\n            sendBuffer.flip();\n            while (sendBuffer.hasRemaining()) {\n                int writed = socketChannel.write(sendBuffer);\n                System.out.println(\"writed byte is：\" + writed);\n\n                if(writed<=0){\n                    sysFull = true;\n                    // 系统发送缓存已经满了\n                    System.out.println(\"系统发送缓存已经满了\");\n                    break;\n                }\n            }\n            // 将数据移到开头 ----> position=limit-position、limit为capacity\n            sendBuffer.compact();\n        }\n\n        if(!sysFull){\n            key.interestOps(key.interestOps() & ~SelectionKey.OP_WRITE);//取消写事件\n        }\n    }\n\n\n    private static void listenUserInput() {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            String msg;\n            while ((msg = bufferedReader.readLine()) != null) {\n                System.out.println(\"Thread.getAllStackTraces size:\" + Thread.getAllStackTraces().keySet().size());\n\n\n                if (!isConnected()) {\n                    System.out.println(\"发送失败，连接已经断开，尝试重连。。。\");\n\n                    // 把无法发送的消息进行留言，等下次连接成功时一并发出\n                    synchronized (sendBuffer) {\n                        sendBuffer.put((msg + \"\\n\").getBytes());\n                    }\n\n\n                    if (socketChannel != null && !socketChannel.isConnectionPending()) {// 当前没有正在尝试连接，则主动触发重连\n                        // 启动重连\n                        reconnection();\n                    } else {\n                        System.out.println(\"已经尝试重连，请勿重复触发。。。\");\n                    }\n\n                    continue;\n                }\n\n                // 向发送缓冲区写入消息\n                synchronized (sendBuffer) {\n                    sendBuffer.put((msg + \"\\n\").getBytes());\n                }\n\n                registerKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);//添加写事件\n                /*\n                TODO\n                 1、selector所在线程可能正阻塞在select()上，\n                 interestOps 的改变不会立即被selector感知，需要手动唤醒selector所在线程\n                 2、另外 key.readyOps() 并不能输出实时的状态，只有select()函数返回时key.readyOps()里的值才会被更新\n                 即：jdk不会你帮你把key.readyOps()归零，直到select() 返回 [readyOps()、selectedKeys()] 都是这样\n                 */\n                selector.wakeup();\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```","slug":"NIO与网络编程/20190624-实现 NIO Socket","published":1,"date":"2019-06-23T16:00:00.000Z","updated":"2021-05-04T11:43:38.462Z","title":"实现 NIO Socket","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze1v0010nnvb0i1ufi69","content":"<p><img src=\"https://img-blog.csdnimg.cn/20190625131344804.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<div align=center>\n<img src=\"https://img-blog.csdnimg.cn/20210112235240968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_12,color_FFFFFF,t_70\"/>\n</div>\n\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: coderzc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioSocketServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Selector selector = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ServerSocketChannel serverSocketChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ByteBuffer writeBuffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ByteBuffer readBuffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> StringBuffer message = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// socket()</span></span><br><span class=\"line\">            serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">// 把serverSocketChannel 变成非阻塞模式（accept非阻塞）</span></span><br><span class=\"line\">            serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">// bind()、listen()</span></span><br><span class=\"line\">            serverSocketChannel.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">8888</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;listening on port 8888&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建多路io复用器【select/poll/epoll】</span></span><br><span class=\"line\">            <span class=\"comment\">// 相当于 epoll_create() 创建epoll的根结点 selector</span></span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 相当于 epoll_ctl(,EPOLL_CTL_ADD,)  把serverSocket注册到selector这个多路复用器上（上epoll树），检测类型为accept事件</span></span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 相当于 epoll_wait(,,,-1)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (selector.select(<span class=\"number\">0L</span>) &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//参数：0L永远阻塞 ；返回值: 不会等于0</span></span><br><span class=\"line\">            <span class=\"comment\">// 遍历io就绪队列</span></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;\\033[31;m&quot;</span>+<span class=\"string\">&quot;selector is activity \\033[0m，keySize：&quot;</span> + selectionKeys.size());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SelectionKey selectionKey : selectionKeys) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// isAcceptable() 返回true 代表该channel是accepted的serverSocketChannel</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;\\033[33;4m&quot;</span>+simpleDateFormat.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">&quot;\\033[0m  \\033[31;4misAcceptable&quot;</span>+<span class=\"string\">&quot;\\033[0m&quot;</span>);</span><br><span class=\"line\">                    ServerSocketChannel serverChannel = (ServerSocketChannel) selectionKey.channel();</span><br><span class=\"line\">                    SocketChannel socketChannel = serverChannel.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 防止客户端传来RST，socket被移除就绪队列,判断一下（之前已经把serverSocketChannel设置为非阻塞，所有就绪队列没有会立刻返回null）</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (socketChannel == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 把socketChannel变成非阻塞模式（读、写非阻塞）</span></span><br><span class=\"line\">                    socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 把socketChannel注册到多路复用器上（上epoll树）</span></span><br><span class=\"line\">                    SelectionKey newSocketKey = socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 打印客户端ip：port</span></span><br><span class=\"line\">                    String ip = socketChannel.socket().getInetAddress().getHostAddress();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> port = socketChannel.socket().getPort();</span><br><span class=\"line\">                    String format = String.format(<span class=\"string\">&quot;hi new client ip:%s,port:%s\\n&quot;</span>, ip, port);</span><br><span class=\"line\">                    System.out.println(format);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 向客户端输出hi，ip:port</span></span><br><span class=\"line\">                    <span class=\"comment\">// 把读到的数据绑定到key中</span></span><br><span class=\"line\">                    newSocketKey.attach(<span class=\"string\">&quot;hi～，&quot;</span>+format);</span><br><span class=\"line\">                    <span class=\"comment\">// 注册写事件</span></span><br><span class=\"line\">                    newSocketKey.interestOps(newSocketKey.interestOps() | SelectionKey.OP_WRITE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// isReadable() 返回true 代表channel是readable的socketChannel</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selectionKey.isReadable()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;\\033[33;4m&quot;</span>+simpleDateFormat.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">&quot;\\033[0m  \\033[31;4misReadable\\033[0m&quot;</span>);</span><br><span class=\"line\">                    handleReceive(selectionKey);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selectionKey.isWritable()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;\\033[33;4m&quot;</span>+simpleDateFormat.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">&quot;\\033[0m  \\033[31;4misWritable&quot;</span>+<span class=\"string\">&quot;\\033[0m&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    handleSend(selectionKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 清除处理过的事件,防止下次循环时重复处理</span></span><br><span class=\"line\">            <span class=\"comment\">// 感觉想java的bug，你每次执行select() 时候java从调用内核函数epoll_wait()获得到最近的就绪队列后直接addAll到selectionKeys，不会帮你清空selectionKeys</span></span><br><span class=\"line\">            selectionKeys.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleReceive</span><span class=\"params\">(SelectionKey selectionKey)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取channel中数据</span></span><br><span class=\"line\">        readBuffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> read = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((read = socketChannel.read(readBuffer)) &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 循环读取缓冲区数据，直到把缓冲区读空，防止频繁调用select()，要配合非阻塞channel才会发挥最大性能</span></span><br><span class=\"line\"><span class=\"comment\">//                        System.out.println(&quot;readSize：&quot; + read);</span></span><br><span class=\"line\">                readBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">                String chunk = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>).decode(readBuffer).toString();</span><br><span class=\"line\"><span class=\"comment\">//                        System.out.println(&quot;chunk：&quot;+chunk);</span></span><br><span class=\"line\">                message.append(chunk);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 检测消息行尾</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (message.indexOf(<span class=\"string\">&quot;\\n&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    System.out.print(<span class=\"string\">&quot;receiveData ---&gt;&quot;</span> + <span class=\"string\">&quot;\\033[36;4m&quot;</span>+message+<span class=\"string\">&quot;\\033[0m&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 把要写的的数据绑定到key中</span></span><br><span class=\"line\">                    selectionKey.attach(<span class=\"string\">&quot;server message echo:&quot;</span> + <span class=\"string\">&quot;已经收到\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 注册写事件</span></span><br><span class=\"line\">                    selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_WRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 清除客户端消息行缓存</span></span><br><span class=\"line\">                    message.setLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                readBuffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// read == -1 代表客户端已经断开</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;disconnect a client..&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 反注册channel</span></span><br><span class=\"line\">                selectionKey.cancel();</span><br><span class=\"line\">                <span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">                socketChannel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//非阻塞模式下，read==0代表当前系统缓冲区已经空了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;000,接受缓冲区已经读完了\\n&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;读取数据发生异常&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 反注册channel</span></span><br><span class=\"line\">            selectionKey.cancel();</span><br><span class=\"line\">            <span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleSend</span><span class=\"params\">(SelectionKey selectionKey)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        String message = (String) selectionKey.attachment();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        selectionKey.attach(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        writeBuffer.clear();</span><br><span class=\"line\">        writeBuffer.put(message.getBytes(Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>)));</span><br><span class=\"line\">        writeBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (writeBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">            socketChannel.write(writeBuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;写出数据 ---&gt; &quot;</span>+message);</span><br><span class=\"line\">        <span class=\"comment\">// 取消读事件,防止isWritable一直激活，cpu空转</span></span><br><span class=\"line\">        selectionKey.interestOps(selectionKey.interestOps() &amp; ~SelectionKey.OP_WRITE);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"客户端-支持断线自动重连\"><a href=\"#客户端-支持断线自动重连\" class=\"headerlink\" title=\"客户端 (支持断线自动重连)\"></a>客户端 (支持断线自动重连)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: coderzc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioSocketClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ByteBuffer sendBuffer = ByteBuffer.allocateDirect(<span class=\"number\">8196</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ByteBuffer receiveBuffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Selector selector = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SocketChannel socketChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SelectionKey registerKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Thread reactor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isConnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> socketChannel != <span class=\"keyword\">null</span> &amp;&amp; socketChannel.isConnected();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打开复用器</span></span><br><span class=\"line\">        selector = Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开始连接</span></span><br><span class=\"line\">        initConnect();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动reactor线程处理 这里和reactor和netty不太一样，就是我自己起的名，用来处理事件的select循环而已</span></span><br><span class=\"line\">        reactor = <span class=\"keyword\">new</span> Thread(NioSocketClient::reactor);</span><br><span class=\"line\">        reactor.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 监听键盘输入</span></span><br><span class=\"line\">        Thread receiver = <span class=\"keyword\">new</span> Thread(NioSocketClient::listenUserInput);</span><br><span class=\"line\">        receiver.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化连接，注册OP_CONNECT事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initConnect</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打开通道</span></span><br><span class=\"line\">            socketChannel = SocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置通道为非阻塞</span></span><br><span class=\"line\">            socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//连接主机</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> connect = socketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//注册事件</span></span><br><span class=\"line\">            <span class=\"comment\">/* TODO 唤醒select</span></span><br><span class=\"line\"><span class=\"comment\">             *  因为主线程select() 阻塞，将会导致下面的方法中，当前线程调用socketChannel.register() 由于获取不到锁也阻塞</span></span><br><span class=\"line\"><span class=\"comment\">             *   所以要在调register之前把select()唤醒</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * selector.wakeup();</span></span><br><span class=\"line\"><span class=\"comment\">             * registerKey = socketChannel.register(selector, 0);</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * TODO selector.wakeup() 不好控制，所以改成在前面调用interrupt(),中断reactor线程，在注册连接事件后，重启一个新的reactor线程</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connect) &#123;</span><br><span class=\"line\">                registerKey = socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                registerKey = socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reconnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//清除旧的连接</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            registerKey.cancel();</span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// TODO 中断reactor线程</span></span><br><span class=\"line\">        <span class=\"comment\">//  (其实是中断线程阻塞提前返回,当thread.sleep、thread.join、thread.wait、object.wait 遇到interrupt时，会抛出异常而使线程提前终止)</span></span><br><span class=\"line\">        <span class=\"comment\">//  ，但这些方法会在抛出异常的同时通过Thread.interrupted()将中断标识清除</span></span><br><span class=\"line\">        reactor.interrupt();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册新的OP_CONNECT事件</span></span><br><span class=\"line\">        initConnect();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 重启reactor线程处理</span></span><br><span class=\"line\">        reactor = <span class=\"keyword\">new</span> Thread(NioSocketClient::reactor);</span><br><span class=\"line\">        reactor.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reactor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// handler socket data</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!Thread.interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = -<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((count = selector.select(<span class=\"number\">0L</span>)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(count+&quot;---&quot;);</span></span><br><span class=\"line\">                    Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class=\"line\"><span class=\"comment\">//                if (keys == null || keys.size() == 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    continue;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;selector is activity，keySize：&quot;</span> + keys.size());</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (SelectionKey key : keys) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 判断连接状态</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (key.isValid() &amp;&amp; key.isConnectable()) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;isConnectable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">//TODO isConnectable后，应该移除 OP_CONNECT 事件，</span></span><br><span class=\"line\">                            <span class=\"comment\">// 否则在finishConnect成功后，select() 将一直返回0 ，CPU空转</span></span><br><span class=\"line\">                            <span class=\"comment\">// 在socketChannel.register(selector, SelectionKey.OP_READ)这里就回会把OP_CONNECT事件去掉，所以这里暂时不需要</span></span><br><span class=\"line\"><span class=\"comment\">//                            key.interestOps(key.interestOps() &amp; ~SelectionKey.OP_CONNECT);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                            SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class=\"line\">                            <span class=\"keyword\">boolean</span> finishConnect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                finishConnect = socketChannel.finishConnect();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                                finishConnect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">// 完成连接</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (finishConnect) &#123;</span><br><span class=\"line\">                                System.out.println(<span class=\"string\">&quot;已经连接到服务器&quot;</span>);</span><br><span class=\"line\">                                <span class=\"comment\">// 注册读事件</span></span><br><span class=\"line\">                                socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// 将断网前的数据发出</span></span><br><span class=\"line\">                                <span class=\"keyword\">synchronized</span> (sendBuffer)&#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(sendBuffer.hasRemaining() &amp;&amp; (sendBuffer.remaining()!=sendBuffer.capacity()))&#123;<span class=\"comment\">// 缓冲区有数据</span></span><br><span class=\"line\">                                        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);<span class=\"comment\">//添加写事件</span></span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                System.out.println(<span class=\"string\">&quot;连接失败尝试重连。。。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// 清除旧的连接</span></span><br><span class=\"line\">                                key.cancel();</span><br><span class=\"line\">                                socketChannel.close();</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// 等待连接安全关闭</span></span><br><span class=\"line\">                                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                                 * 重新连接</span></span><br><span class=\"line\"><span class=\"comment\">                                 * 因为在同一个线程中，所以仅重连，不用销毁reactor线程</span></span><br><span class=\"line\"><span class=\"comment\">                                 */</span></span><br><span class=\"line\">                                initConnect();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 接受来自服务器的响应</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;isReadable&quot;</span>);</span><br><span class=\"line\">                            receive(key);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 实际上只要注册了关心写操作，这个操作就一直被激活</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.isWritable()) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;isWritable&quot;</span>);</span><br><span class=\"line\">                            send(key);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    keys.clear();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;reactor线程被提前中断，正常退出&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(SelectionKey key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> read = socketChannel.read(receiveBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            receiveBuffer.flip();</span><br><span class=\"line\">            String receiveData = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>).decode(receiveBuffer).toString();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;receive server message---&gt;&quot;</span> + receiveData);</span><br><span class=\"line\">            receiveBuffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// read == -1 代表服务端已经断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;server already close.\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 反注册channel</span></span><br><span class=\"line\">            key.cancel();</span><br><span class=\"line\">            <span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">(SelectionKey key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sysFull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (sendBuffer)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//写模式切换到读模式 ---&gt; position归零、limit为之前的position的值</span></span><br><span class=\"line\">            sendBuffer.flip();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sendBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> writed = socketChannel.write(sendBuffer);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;writed byte is：&quot;</span> + writed);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(writed&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    sysFull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 系统发送缓存已经满了</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;系统发送缓存已经满了&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将数据移到开头 ----&gt; position=limit-position、limit为capacity</span></span><br><span class=\"line\">            sendBuffer.compact();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!sysFull)&#123;</span><br><span class=\"line\">            key.interestOps(key.interestOps() &amp; ~SelectionKey.OP_WRITE);<span class=\"comment\">//取消写事件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">listenUserInput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String msg;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((msg = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread.getAllStackTraces size:&quot;</span> + Thread.getAllStackTraces().keySet().size());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isConnected()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发送失败，连接已经断开，尝试重连。。。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 把无法发送的消息进行留言，等下次连接成功时一并发出</span></span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (sendBuffer) &#123;</span><br><span class=\"line\">                        sendBuffer.put((msg + <span class=\"string\">&quot;\\n&quot;</span>).getBytes());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (socketChannel != <span class=\"keyword\">null</span> &amp;&amp; !socketChannel.isConnectionPending()) &#123;<span class=\"comment\">// 当前没有正在尝试连接，则主动触发重连</span></span><br><span class=\"line\">                        <span class=\"comment\">// 启动重连</span></span><br><span class=\"line\">                        reconnection();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;已经尝试重连，请勿重复触发。。。&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 向发送缓冲区写入消息</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (sendBuffer) &#123;</span><br><span class=\"line\">                    sendBuffer.put((msg + <span class=\"string\">&quot;\\n&quot;</span>).getBytes());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                registerKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);<span class=\"comment\">//添加写事件</span></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                TODO</span></span><br><span class=\"line\"><span class=\"comment\">                 1、selector所在线程可能正阻塞在select()上，</span></span><br><span class=\"line\"><span class=\"comment\">                 interestOps 的改变不会立即被selector感知，需要手动唤醒selector所在线程</span></span><br><span class=\"line\"><span class=\"comment\">                 2、另外 key.readyOps() 并不能输出实时的状态，只有select()函数返回时key.readyOps()里的值才会被更新</span></span><br><span class=\"line\"><span class=\"comment\">                 即：jdk不会你帮你把key.readyOps()归零，直到select() 返回 [readyOps()、selectedKeys()] 都是这样</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                selector.wakeup();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"abbrlink":"32AM12Q","excerpt":"服务端\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n","more":"<p><img src=\"https://img-blog.csdnimg.cn/20190625131344804.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\n<div align=center>\n<img src=\"https://img-blog.csdnimg.cn/20210112235240968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfY2NzZG4=,size_12,color_FFFFFF,t_70\"/>\n</div>\n\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: coderzc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioSocketServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Selector selector = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ServerSocketChannel serverSocketChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ByteBuffer writeBuffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ByteBuffer readBuffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> StringBuffer message = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// socket()</span></span><br><span class=\"line\">            serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">// 把serverSocketChannel 变成非阻塞模式（accept非阻塞）</span></span><br><span class=\"line\">            serverSocketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">// bind()、listen()</span></span><br><span class=\"line\">            serverSocketChannel.bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">8888</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;listening on port 8888&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建多路io复用器【select/poll/epoll】</span></span><br><span class=\"line\">            <span class=\"comment\">// 相当于 epoll_create() 创建epoll的根结点 selector</span></span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 相当于 epoll_ctl(,EPOLL_CTL_ADD,)  把serverSocket注册到selector这个多路复用器上（上epoll树），检测类型为accept事件</span></span><br><span class=\"line\">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 相当于 epoll_wait(,,,-1)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (selector.select(<span class=\"number\">0L</span>) &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//参数：0L永远阻塞 ；返回值: 不会等于0</span></span><br><span class=\"line\">            <span class=\"comment\">// 遍历io就绪队列</span></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;\\033[31;m&quot;</span>+<span class=\"string\">&quot;selector is activity \\033[0m，keySize：&quot;</span> + selectionKeys.size());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SelectionKey selectionKey : selectionKeys) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// isAcceptable() 返回true 代表该channel是accepted的serverSocketChannel</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;\\033[33;4m&quot;</span>+simpleDateFormat.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">&quot;\\033[0m  \\033[31;4misAcceptable&quot;</span>+<span class=\"string\">&quot;\\033[0m&quot;</span>);</span><br><span class=\"line\">                    ServerSocketChannel serverChannel = (ServerSocketChannel) selectionKey.channel();</span><br><span class=\"line\">                    SocketChannel socketChannel = serverChannel.accept();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 防止客户端传来RST，socket被移除就绪队列,判断一下（之前已经把serverSocketChannel设置为非阻塞，所有就绪队列没有会立刻返回null）</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (socketChannel == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 把socketChannel变成非阻塞模式（读、写非阻塞）</span></span><br><span class=\"line\">                    socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 把socketChannel注册到多路复用器上（上epoll树）</span></span><br><span class=\"line\">                    SelectionKey newSocketKey = socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 打印客户端ip：port</span></span><br><span class=\"line\">                    String ip = socketChannel.socket().getInetAddress().getHostAddress();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> port = socketChannel.socket().getPort();</span><br><span class=\"line\">                    String format = String.format(<span class=\"string\">&quot;hi new client ip:%s,port:%s\\n&quot;</span>, ip, port);</span><br><span class=\"line\">                    System.out.println(format);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 向客户端输出hi，ip:port</span></span><br><span class=\"line\">                    <span class=\"comment\">// 把读到的数据绑定到key中</span></span><br><span class=\"line\">                    newSocketKey.attach(<span class=\"string\">&quot;hi～，&quot;</span>+format);</span><br><span class=\"line\">                    <span class=\"comment\">// 注册写事件</span></span><br><span class=\"line\">                    newSocketKey.interestOps(newSocketKey.interestOps() | SelectionKey.OP_WRITE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// isReadable() 返回true 代表channel是readable的socketChannel</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selectionKey.isReadable()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;\\033[33;4m&quot;</span>+simpleDateFormat.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">&quot;\\033[0m  \\033[31;4misReadable\\033[0m&quot;</span>);</span><br><span class=\"line\">                    handleReceive(selectionKey);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selectionKey.isWritable()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;\\033[33;4m&quot;</span>+simpleDateFormat.format(<span class=\"keyword\">new</span> Date())+<span class=\"string\">&quot;\\033[0m  \\033[31;4misWritable&quot;</span>+<span class=\"string\">&quot;\\033[0m&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    handleSend(selectionKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 清除处理过的事件,防止下次循环时重复处理</span></span><br><span class=\"line\">            <span class=\"comment\">// 感觉想java的bug，你每次执行select() 时候java从调用内核函数epoll_wait()获得到最近的就绪队列后直接addAll到selectionKeys，不会帮你清空selectionKeys</span></span><br><span class=\"line\">            selectionKeys.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleReceive</span><span class=\"params\">(SelectionKey selectionKey)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取channel中数据</span></span><br><span class=\"line\">        readBuffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> read = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((read = socketChannel.read(readBuffer)) &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 循环读取缓冲区数据，直到把缓冲区读空，防止频繁调用select()，要配合非阻塞channel才会发挥最大性能</span></span><br><span class=\"line\"><span class=\"comment\">//                        System.out.println(&quot;readSize：&quot; + read);</span></span><br><span class=\"line\">                readBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">                String chunk = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>).decode(readBuffer).toString();</span><br><span class=\"line\"><span class=\"comment\">//                        System.out.println(&quot;chunk：&quot;+chunk);</span></span><br><span class=\"line\">                message.append(chunk);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 检测消息行尾</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (message.indexOf(<span class=\"string\">&quot;\\n&quot;</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    System.out.print(<span class=\"string\">&quot;receiveData ---&gt;&quot;</span> + <span class=\"string\">&quot;\\033[36;4m&quot;</span>+message+<span class=\"string\">&quot;\\033[0m&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 把要写的的数据绑定到key中</span></span><br><span class=\"line\">                    selectionKey.attach(<span class=\"string\">&quot;server message echo:&quot;</span> + <span class=\"string\">&quot;已经收到\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 注册写事件</span></span><br><span class=\"line\">                    selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_WRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 清除客户端消息行缓存</span></span><br><span class=\"line\">                    message.setLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                readBuffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// read == -1 代表客户端已经断开</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;disconnect a client..&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 反注册channel</span></span><br><span class=\"line\">                selectionKey.cancel();</span><br><span class=\"line\">                <span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">                socketChannel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//非阻塞模式下，read==0代表当前系统缓冲区已经空了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (read == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;000,接受缓冲区已经读完了\\n&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;读取数据发生异常&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 反注册channel</span></span><br><span class=\"line\">            selectionKey.cancel();</span><br><span class=\"line\">            <span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleSend</span><span class=\"params\">(SelectionKey selectionKey)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        String message = (String) selectionKey.attachment();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        selectionKey.attach(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        writeBuffer.clear();</span><br><span class=\"line\">        writeBuffer.put(message.getBytes(Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>)));</span><br><span class=\"line\">        writeBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (writeBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">            socketChannel.write(writeBuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;写出数据 ---&gt; &quot;</span>+message);</span><br><span class=\"line\">        <span class=\"comment\">// 取消读事件,防止isWritable一直激活，cpu空转</span></span><br><span class=\"line\">        selectionKey.interestOps(selectionKey.interestOps() &amp; ~SelectionKey.OP_WRITE);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"客户端-支持断线自动重连\"><a href=\"#客户端-支持断线自动重连\" class=\"headerlink\" title=\"客户端 (支持断线自动重连)\"></a>客户端 (支持断线自动重连)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: coderzc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioSocketClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ByteBuffer sendBuffer = ByteBuffer.allocateDirect(<span class=\"number\">8196</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ByteBuffer receiveBuffer = ByteBuffer.allocateDirect(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Selector selector = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SocketChannel socketChannel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SelectionKey registerKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Thread reactor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isConnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> socketChannel != <span class=\"keyword\">null</span> &amp;&amp; socketChannel.isConnected();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打开复用器</span></span><br><span class=\"line\">        selector = Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 开始连接</span></span><br><span class=\"line\">        initConnect();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动reactor线程处理 这里和reactor和netty不太一样，就是我自己起的名，用来处理事件的select循环而已</span></span><br><span class=\"line\">        reactor = <span class=\"keyword\">new</span> Thread(NioSocketClient::reactor);</span><br><span class=\"line\">        reactor.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 监听键盘输入</span></span><br><span class=\"line\">        Thread receiver = <span class=\"keyword\">new</span> Thread(NioSocketClient::listenUserInput);</span><br><span class=\"line\">        receiver.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化连接，注册OP_CONNECT事件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initConnect</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打开通道</span></span><br><span class=\"line\">            socketChannel = SocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置通道为非阻塞</span></span><br><span class=\"line\">            socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//连接主机</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> connect = socketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//注册事件</span></span><br><span class=\"line\">            <span class=\"comment\">/* TODO 唤醒select</span></span><br><span class=\"line\"><span class=\"comment\">             *  因为主线程select() 阻塞，将会导致下面的方法中，当前线程调用socketChannel.register() 由于获取不到锁也阻塞</span></span><br><span class=\"line\"><span class=\"comment\">             *   所以要在调register之前把select()唤醒</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * selector.wakeup();</span></span><br><span class=\"line\"><span class=\"comment\">             * registerKey = socketChannel.register(selector, 0);</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * TODO selector.wakeup() 不好控制，所以改成在前面调用interrupt(),中断reactor线程，在注册连接事件后，重启一个新的reactor线程</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connect) &#123;</span><br><span class=\"line\">                registerKey = socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                registerKey = socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reconnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//清除旧的连接</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            registerKey.cancel();</span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// TODO 中断reactor线程</span></span><br><span class=\"line\">        <span class=\"comment\">//  (其实是中断线程阻塞提前返回,当thread.sleep、thread.join、thread.wait、object.wait 遇到interrupt时，会抛出异常而使线程提前终止)</span></span><br><span class=\"line\">        <span class=\"comment\">//  ，但这些方法会在抛出异常的同时通过Thread.interrupted()将中断标识清除</span></span><br><span class=\"line\">        reactor.interrupt();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册新的OP_CONNECT事件</span></span><br><span class=\"line\">        initConnect();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 重启reactor线程处理</span></span><br><span class=\"line\">        reactor = <span class=\"keyword\">new</span> Thread(NioSocketClient::reactor);</span><br><span class=\"line\">        reactor.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reactor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// handler socket data</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!Thread.interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = -<span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((count = selector.select(<span class=\"number\">0L</span>)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(count+&quot;---&quot;);</span></span><br><span class=\"line\">                    Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class=\"line\"><span class=\"comment\">//                if (keys == null || keys.size() == 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                    continue;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;selector is activity，keySize：&quot;</span> + keys.size());</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (SelectionKey key : keys) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 判断连接状态</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (key.isValid() &amp;&amp; key.isConnectable()) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;isConnectable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">//TODO isConnectable后，应该移除 OP_CONNECT 事件，</span></span><br><span class=\"line\">                            <span class=\"comment\">// 否则在finishConnect成功后，select() 将一直返回0 ，CPU空转</span></span><br><span class=\"line\">                            <span class=\"comment\">// 在socketChannel.register(selector, SelectionKey.OP_READ)这里就回会把OP_CONNECT事件去掉，所以这里暂时不需要</span></span><br><span class=\"line\"><span class=\"comment\">//                            key.interestOps(key.interestOps() &amp; ~SelectionKey.OP_CONNECT);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                            SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class=\"line\">                            <span class=\"keyword\">boolean</span> finishConnect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                finishConnect = socketChannel.finishConnect();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                                finishConnect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">// 完成连接</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (finishConnect) &#123;</span><br><span class=\"line\">                                System.out.println(<span class=\"string\">&quot;已经连接到服务器&quot;</span>);</span><br><span class=\"line\">                                <span class=\"comment\">// 注册读事件</span></span><br><span class=\"line\">                                socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// 将断网前的数据发出</span></span><br><span class=\"line\">                                <span class=\"keyword\">synchronized</span> (sendBuffer)&#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span>(sendBuffer.hasRemaining() &amp;&amp; (sendBuffer.remaining()!=sendBuffer.capacity()))&#123;<span class=\"comment\">// 缓冲区有数据</span></span><br><span class=\"line\">                                        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);<span class=\"comment\">//添加写事件</span></span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                System.out.println(<span class=\"string\">&quot;连接失败尝试重连。。。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// 清除旧的连接</span></span><br><span class=\"line\">                                key.cancel();</span><br><span class=\"line\">                                socketChannel.close();</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">// 等待连接安全关闭</span></span><br><span class=\"line\">                                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                                 * 重新连接</span></span><br><span class=\"line\"><span class=\"comment\">                                 * 因为在同一个线程中，所以仅重连，不用销毁reactor线程</span></span><br><span class=\"line\"><span class=\"comment\">                                 */</span></span><br><span class=\"line\">                                initConnect();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 接受来自服务器的响应</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;isReadable&quot;</span>);</span><br><span class=\"line\">                            receive(key);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 实际上只要注册了关心写操作，这个操作就一直被激活</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.isWritable()) &#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;isWritable&quot;</span>);</span><br><span class=\"line\">                            send(key);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    keys.clear();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;reactor线程被提前中断，正常退出&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(SelectionKey key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> read = socketChannel.read(receiveBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            receiveBuffer.flip();</span><br><span class=\"line\">            String receiveData = Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>).decode(receiveBuffer).toString();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;receive server message---&gt;&quot;</span> + receiveData);</span><br><span class=\"line\">            receiveBuffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// read == -1 代表服务端已经断开</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;server already close.\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 反注册channel</span></span><br><span class=\"line\">            key.cancel();</span><br><span class=\"line\">            <span class=\"comment\">// 关闭socket</span></span><br><span class=\"line\">            socketChannel.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">send</span><span class=\"params\">(SelectionKey key)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sysFull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (sendBuffer)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//写模式切换到读模式 ---&gt; position归零、limit为之前的position的值</span></span><br><span class=\"line\">            sendBuffer.flip();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sendBuffer.hasRemaining()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> writed = socketChannel.write(sendBuffer);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;writed byte is：&quot;</span> + writed);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(writed&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    sysFull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 系统发送缓存已经满了</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;系统发送缓存已经满了&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将数据移到开头 ----&gt; position=limit-position、limit为capacity</span></span><br><span class=\"line\">            sendBuffer.compact();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!sysFull)&#123;</span><br><span class=\"line\">            key.interestOps(key.interestOps() &amp; ~SelectionKey.OP_WRITE);<span class=\"comment\">//取消写事件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">listenUserInput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String msg;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((msg = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Thread.getAllStackTraces size:&quot;</span> + Thread.getAllStackTraces().keySet().size());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isConnected()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发送失败，连接已经断开，尝试重连。。。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 把无法发送的消息进行留言，等下次连接成功时一并发出</span></span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (sendBuffer) &#123;</span><br><span class=\"line\">                        sendBuffer.put((msg + <span class=\"string\">&quot;\\n&quot;</span>).getBytes());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (socketChannel != <span class=\"keyword\">null</span> &amp;&amp; !socketChannel.isConnectionPending()) &#123;<span class=\"comment\">// 当前没有正在尝试连接，则主动触发重连</span></span><br><span class=\"line\">                        <span class=\"comment\">// 启动重连</span></span><br><span class=\"line\">                        reconnection();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;已经尝试重连，请勿重复触发。。。&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 向发送缓冲区写入消息</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (sendBuffer) &#123;</span><br><span class=\"line\">                    sendBuffer.put((msg + <span class=\"string\">&quot;\\n&quot;</span>).getBytes());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                registerKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);<span class=\"comment\">//添加写事件</span></span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                TODO</span></span><br><span class=\"line\"><span class=\"comment\">                 1、selector所在线程可能正阻塞在select()上，</span></span><br><span class=\"line\"><span class=\"comment\">                 interestOps 的改变不会立即被selector感知，需要手动唤醒selector所在线程</span></span><br><span class=\"line\"><span class=\"comment\">                 2、另外 key.readyOps() 并不能输出实时的状态，只有select()函数返回时key.readyOps()里的值才会被更新</span></span><br><span class=\"line\"><span class=\"comment\">                 即：jdk不会你帮你把key.readyOps()归零，直到select() 返回 [readyOps()、selectedKeys()] 都是这样</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                selector.wakeup();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"_content":"# Google论文、开源与云计算\n\n> 本文搬运自：https://zhuanlan.zhihu.com/p/85808754\n\n## 1.Google论文与开源\n\n自1998年成立，至今Google已走过20个年头。在这20年里，Google不断地发表一些对于自己来说已经过时甚至不再使用的技术的论文，但是发表之后总会有类似系统被业界实现出来，也足以说明google的技术至少领先业界数年。在Amazon不断引领全球云计算浪潮开发出一系列面向普罗大众的云产品的同时；Google也在不断引领构建着满足互联网时代海量数据的存储计算和查询分析需求的软硬件基础设施。\n\n本文对Google在这20年中发表的论文进行了一个简单的总结和整理，主要选择了分布式系统和并行计算领域相关的论文，其中内容涉及数据中心/计算/存储/网络/数据库/调度/大数据处理等多个方向。通过这样的一个总结，一方面可以一窥Google强大的软硬件基础设施，另一方面也可以为不同领域的开发人员提供一个学习的参考。可以通过这些文章去了解上层应用的架构设计和实现，进而可以更好的理解和服务于上层应用。同时这些系统中所采用的架构/算法/设计/权衡，本身也可以为我们的系统设计和实现提供重要的参考。\n\n通过Google论文可以了解到系统整体的架构，通过对应开源系统可以在代码层面进行学习。具体如下图(浅蓝色部分为Google论文/黄色为开源系统)：\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817163733.jpg)\n\n## 2.Google论文简介\n\n下面来简要介绍下”那些年我们追过的Google论文”，由于篇幅有限主要讲下每篇论文的主要思路，另外可能还会介绍下论文作者及论文本身的一些八卦。深入阅读的话，可以直接根据下面的链接查看原文，另外很多文章网上已经有中文译文，也可以作为阅读参考。\n\n### 2.1 起源\n\n1. [The anatomy of a large-scale hypertextual Web search engine](https://link.zhihu.com/?target=http%3A//zoo.cs.yale.edu/classes/cs426/2012/bib/brin98theanatomy.pdf)(1998).Google创始人Sergey Brin和Larry Page于1998年发表的奠定Google搜索引擎理论基础的原始论文。在上图中我们把它放到了最底层，在这篇论文里他们描述了最初构建的Google搜索引擎基础架构，可以说所有其他文章都是以此文为起点。此文对于搜索引擎的基本架构，尤其是Google使用的PageRank算法进行了描述，可以作为了解搜索引擎的入门文章。\n\n2. [WEB SEARCH FOR A PLANET: THE GOOGLE CLUSTER ARCHITECTURE](http://research.google.com/archive/googlecluster-ieee.pdf)(IEEE Micro03).描述Google集群架构最早的一篇文章，同时也应该是最被忽略的一篇文章，此文不像GFS MapReduce Bigtable那几篇文章为人所熟知，但是其重要性丝毫不亚于那几篇。这篇文章体现了Google在硬件方面的一个革命性的选择：在数据中心中使用廉价的PC硬件取代高端服务器。这一选择的出发点主要基于性价比，实际的需求是源于互联网数据规模之大已经不能用传统方法解决，但是这个选择导致了上层的软件也要针对性地进行重新的设计和调整。由于硬件可靠性的降低及数量的上升，意味着要在软件层面实现可靠性，需要采用多个副本，需要更加自动化的集群管理和监控。也是从这个时候开始，Google开始着眼于自己设计服务器以及数据中心相关的其他硬件，逐步从托管数据中心向自建数据中心转变。而Google之后实现的各种分布式系统，都可以看做是基于这一硬件选择做出的软件层面的设计权衡。\n\n   再看下本文的作者：Luiz André Barroso/Jeff Dean/Urs Hölzle，除了Jeff Dean，其他两位也都是Google基础设施领域非常重要的人物。Urs Holzle是Google的第8号员工，最早的技术副总裁，一直在Google负责基础设施部门，Jeff Dean和Luiz Barroso等很多人都是他招进Google的，包括当前Google云平台的掌门人Diane Greene(VMWare联合创始人)据说也是在他的游说下才最终决定掌管GCP。Luiz Barroso跟Jeff Dean在加入Google以前都是在DEC工作，在DEC的时候他参与了多核处理器方面的工作，是Google最早的硬件工程师，在构建Google面向互联网时代的数据中心硬件基础设施中做了很多工作。到了2009年，Luiz André Barroso和Urs Hölzle写了一本书，书名就叫<<[The Datacenter as a Computer](http://research.google.com/pubs/pub41606.html)>>，对这些工作(数据中心里的服务器/网络/供电/制冷/能效/成本/故障处理和修复等)做了更详细的介绍。\n\n3. [The Google File System](https://research.google.com/archive/gfs-sosp2003.pdf)(SOSP03).Google在分布式系统领域发表的最早的一篇论文。关于GFS相信很多人都有所了解，此处不再赘言。今天Google内部已经进化到第二代GFS：Colossus，而关于Colossus目前为止还没有相关的论文，网上只有一些零散介绍：[Colossus](https://www.systutorials.com/3202/colossus-successor-to-google-file-system-gfs/)。简要介绍下本文第一作者Sanjay Ghemawat，在加入Google之前他也是在DEC工作，主要从事Java编译器和Profiling相关工作。同时在DEC时代他与Jeff Dean就有很多合作，而他加入Google也是Jeff Dean先加入后推荐他加入的，此后的很多工作都是他和Jeff Dean一块完成的，像后来的MapReduce/BigTable/Spanner/TensorFlow，在做完Spanner之后，Jeff Dean和Sanjay开始转向构建AI领域的大规模分布式系统。2012年，Jeff Dean和Sanjay共同获得了ACM-Infosys Foundation Award。此外Google的一些开源项目像**LevelDB**/GPerftools/TCMalloc等，都可以看到Sanjay的身影。\n\n4. [MapReduce: Simplified Data Processing on Large Clusters](https://research.google.com/archive/mapreduce-osdi04.pdf)(OSDI04).该文作者是Jeff Dean和Sanjay Ghemawat，受Lisp语言中的Map Reduce原语启发，在大规模分布式系统中提供类似的操作原语。在框架层面屏蔽底层分布式系统实现，让用户只需要关注如何编写自己的Mapper和Reducer实现，从而大大简化分布式编程。时至今日MapReduce已经成为大规模数据处理中广泛应用的一种编程模型，虽然之后有很多新的编程模型不断被实现出来，但是在很多场景MapReduce依然发挥着不可替代的作用。\n\n   而自2004年提出之后，中间也出现过很多关于MapReduce的争论，最著名的应该是2008年1月8号David J. DeWitt和Michael Stonebraker发表的一篇文章<< [MapReduce: A major step backwards](http://databasecolumn.vertica.com/database-innovation/mapreduce-a-major-step-backwards/)>>，该文发表后引起了广泛的争论。首先介绍下这两位都是数据库领域的著名科学家，David J. DeWitt，ACM Fellow，2008年以前一直在大学里搞研究，在并行数据库领域建树颇多，之后去了微软在威斯康辛的Jim Gray系统实验室。Michael Stonebraker(2014图灵奖得主)，名头要更大一些，在1992 年提出对象关系数据库。在加州伯克利分校计算机教授达25年，在此期间他创作了Ingres, Illustra, Cohera, StreamBase Systems和Vertica等系统。其中Ingres是很多现代RDBMS的基础，比如Sybase、Microsoft SQL Server、NonStop SQL、Informix 和许多其他的系统。Stonebraker曾担任过Informix的CEO，自己还经常出来创个业，每次还都成功了。关于这个争论，Jeff Dean和Sanjay Ghemawat在2010年1月份的<<Communication of the ACM>>上发表了这篇<<[MapReduce-A Flexible Data Processing Tool](http://duanple.blog.163.com/blog/static/7097176720119711038980/)>>进行回应，同一期上还刊了Michael Stonebraker等人的<<[MapReduce and Parallel DBMSs-Friends or Foes ](http://duanple.blog.163.com/blog/static/7097176720119720494/)>>。\n\n5. [Bigtable: A Distributed Storage System for Structured Data](http://research.google.com/archive/bigtable-osdi06.pdf)(OSDI06).Bigtable基于GFS构建，提供了结构化数据的可扩展分布式存储。自Bigtable论文发表之后，很快开源的HBase被实现出来，此后更是与Amazon的Dynamo一块引领了NoSQL系统的潮流，之后各种NoSQL系统如雨后春笋般出现在各大互联网公司及开源领域。此外在tablet-server中采用的LSM-Tree存储结构，使得这种在1996年就被提出的模型被重新认识，并广泛应用于各种新的存储系统实现中，成为与传统关系数据库中的B树并驾齐驱的两大模型。\n\n   如果说MapReduce代表着新的分布式计算模型的开端的话，Bigtable则代表着新的分布式存储系统的开端。自此之后在分布式计算存储领域，Google不断地推陈出新，发表了很多新的计算和存储系统，如上图中所示。在继续介绍这些新的计算存储系统之前，我们回到图的底层，关注下基础设施方面的一些系统。\n\n### 2.2 基础设施\n\n6. [The Chubby lock service for loosely-coupled distributed systems](http://research.google.com/archive/chubby-osdi06.pdf)(OSDI06).以文件系统接口形式提供的分布式锁服务，帮助开发者简化分布式系统中的同步和协调工作，比如进行Leader选举。除此之外，这篇文章一个很大的贡献应该是将Paxos应用于工业实践，并极大地促进了Paxos的流行，从这个时候开始Paxos逐渐被更多地工业界人士所熟知并应用在自己的分布式系统中。此后Google发表的其他论文中也不止一次地提到Paxos，像MegaStore/Spanner/Mesa都有提及。此文作者Mike Burrows加入Google之前也是在DEC工作，在DEC的时候他还是AltaVista搜索引擎的主要设计者。\n\n7. [Borg](https://research.google.com/pubs/pub43438.html)(Eurosys15) [Omega](https://ai.google/research/pubs/pub41684)(Eurosys13) [Kubernetes](https://kubernetes.io/).Borg是Google内部的集群资源管理系统，大概诞生在2003-2004年，在Borg之前Google通过两个系统Babysitter和Global Work Queue来分别管理它的在线服务和离线作业，而Borg实现了两者的统一管理。直到15年Google才公布了Borg论文，在此之前对外界来说Borg一直都是很神秘的存在。而Omega主要是几个博士生在Google做的研究型项目，最终并没有实际大规模上线，其中的一些理念被应用到Borg系统中。*注：Borg这个名字源自于<<星际迷航>>里的博格人，博格人生活在银河系的德尔塔象限，是半有机物半机械的生化人。博格个体的身体上装配有大量人造器官及机械，大脑为人造的处理器。博格人是严格奉行集体意识的种族，从生理上完全剥夺了个体的自由意识。博格人的社会系统由“博格集合体”组成，每个集合体中的个体成员被称为“Drone”。集合体内的博格个体通过某种复杂的子空间通信网络相互连接。在博格集合体中，博格个体没有自我意识，而是通过一个被称为博格女皇（Borg Queen）的程序对整个集合体进行控制。*\n\n   在2014年中的时候，Google启动了Kubernetes(Borg的开源版本)。2015年，Kubernetes 1.0 release，同时Google与Linux基金会共同发起了CNCF。2016年，Kubernates逐渐成为容器编排管理领域的主流。提到Kubernates，需要介绍下著名的分布式系统专家Eric Brewer，伯克利教授&Google infrastructure VP，互联网服务系统早期研究者。早在1995年他就和Paul Gauthier创立了Inktomi搜索引擎(2003年被Yahoo!收购，李彦宏曾在这家公司工作)，此时距离Google创立还有3年。之后在2000年的PODC上他首次提出了CAP理论，2012年又对CAP进行了[回顾](http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed)。2011年他加入了Google，目前在负责推动Kubernetes的发展。\n\n8. [CPI2: CPU performance isolation for shared compute clusters](http://www.e-wilkes.com/john/papers/2013-EuroSys-CPI2.pdf)(Eurosys13).通过监控CPI(Cycles-Per-Instruction)指标，结合历史运行数据进行分析预测找到影响系统性能的可疑程序，限制其CPU使用或进行隔离/下线，避免影响其他关键应用。本文也从一个侧面反映出，为了实现离线在线混布Google在多方面所做的努力和探索，尤其是在资源隔离方面。具体实现中，每台机器上有一个守护进程负责采集本机上运行的各个Job的CPI数据(通过采用计数模式/采样等方法降低开销，实际CPU开销小于0.1%)，然后发送到一个中央的服务器进行聚合，由于集群可能是异构的，每个Job还会根据不同的CPU类型进行单独聚合，最后把计算出来的CPI数据的平均值和标准差作为CPI spec。结合CPI历史记录建立CPI预测模型，一旦出现采样值偏离预测值的异常情况，就会记录下来，如果异常次数超过一定阈值就启动相关性分析寻找干扰源，找到之后进行相应地处理(限制批处理作业的CPU使用/调度到单独机器上等)。讲到这里，不仅让我们联想到今天大火的AIOPS概念，而很久之前Google已经在生产系统上使用类似技术。不过在论文发表时，Google只是打开了CPI2的监控功能，实际的自动化处理还未在生产系统中打开。\n\n9. [GOOGLE-WIDE PROFILING:A CONTINUOUS PROFILING ](https://ai.google/research/pubs/pub36575)[INFRASTRUCTURE FOR DATA CENTERS](https://ai.google/research/pubs/pub36575)(IEEE Micro10).Google的分布式Profiling基础设施，通过收集数据中心的机器上的各种硬件事件/内核事件/调用栈/锁竞争/堆内存分配/应用性能指标等信息，通过这些信息可以为程序性能优化/Job调度提供参考。为了降低开销，采样是在两个维度上进行，首先是在整个集群的机器集合上采样同一时刻只对很少一部分机器进行profiling，然后在每台机器上再进行基于事件的采样。底层通过OProfile采集系统硬件监控指标(比如CPU周期/L1 L2 Cache Miss/分支预测失败情况等)，通过GPerfTools采集应用程序进程级的运行指标(比如堆内存分配/锁竞争/CPU开销等)。收集后的原始采样信息会保存在GFS上，但是这些信息还未与源代码关联上，而部署的binary通常都是去掉了debug和符号表信息，采用的解决方法是为每个binary还会保存一个包含debug信息的未被strip的原始binary，然后通过运行MapReduce Job完成原始采样信息与源代码的关联。为了方便用户查询，历史Profiling数据还会被加载到一个分布式数据库中。通过这些Profiling数据，除了可以帮助应用理解程序的资源消耗和性能演化历史，还可以实现数据驱动的数据中心设计/构建/运维。\n\n10. [Dapper, a Large-Scale Distributed Systems Tracing Infrastructure](http://research.google.com/pubs/archive/36356.pdf)(Google TR10).Google的分布式Tracing基础设施。Dapper最初是为了追踪在线服务系统的请求处理过程。比如在搜索系统中，用户的一个请求在系统中会经过多个子系统的处理，而且这些处理是发生在不同机器甚至是不同集群上的，当请求处理发生异常时，需要快速发现问题，并准确定位到是哪个环节出了问题，这是非常重要的，Dapper就是为了解决这样的问题。对系统行为进行跟踪必须是持续进行的，因为异常的发生是无法预料的，而且可能是难以重现的。同时跟踪需要是无所不在，遍布各处的，否则可能会遗漏某些重要的点。基于此Dapper有如下三个最重要的设计目标：低的额外开销，对应用的透明性，可扩展。同时产生的跟踪数据需要可以被快速分析，这样可以帮助用户实时获取在线服务状态。\n\n11. [B4: Experience with a Globally-Deployed Software Defined WAN](http://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf)(Sigcomm13).Google在全球有几十个数据中心，这些数据中心之间通常通过2-3条专线与其他数据中心进行连接。本文描述了Google如何通过SDN/OpenFlow对数据中心间的网络进行改造，通过对跨数据中心的流量进行智能调度，最大化数据中心网络链路的利用率。Google通过强大的网络基础设施，使得它的跨越全球的数据中心就像一个局域网，从而为后续很多系统实现跨数据中心的同步复制提供了网络层面的保障。\n\n### 2.3 计算分析系统\n\n自MapReduce之后，Google又不断地开发出新的分布式计算系统，一方面是为了提供更易用的编程接口(比如新的DSL/SQL语言支持)，另一方面是为了适应不同场景(图计算/流计算/即席查询/内存计算/交互式报表等)的需求。\n\n12. [Interpreting the Data: Parallel Analysis with Sawzall](http://cloud.pubs.dbs.uni-leipzig.de/sites/cloud.pubs.dbs.uni-leipzig.de/files/Pike2005InterpretingthedataParallelanalysiswithSawzall.pdf)(Scientific Programming05).Google为了简化MapReduce程序的编写，而提出的一种新的DSL。后来Google又推出了Tenzing/Dremel等数据分析系统，到了2010年就把Sawzall给开源了，项目主页：http://code.google.com/p/szl/。虽然与Tenzing/Dremel相比， Sawzall所能做的事情还是比较有限，但是它是最早的，同时作为一种DSL毕竟还是要比直接写MapReduce job要更易用些。\n\n    本文第一作者Rob Pike，当今世界上最著名的程序员之一，<<Unix编程环境>> <<程序设计实践>>作者。70年代就加入贝尔实验室，跟随Ken Thompson&DMR(二人因为发明Unix和C语言共同获得1983年图灵奖)参与开发了Unix，后来又跟Ken一块设计了UTF-8。2002年起加入Google，之后搞了Sawzall，目前跟Ken Thompson一块在Google设计开发Go语言。\n\n13. [FlumeJava: Easy, Efficient Data-Parallel Pipelines](http://pages.cs.wisc.edu/~akella/CS838/F12/838-CloudPapers/FlumeJava.pdf)(PLDI10).由于实际的数据处理中，通常都不是单个的MapReduce Job，而是多个MapReduce Job组成的Pipeline。为了简化Pipleline的管理和编程，提出了FlumeJava框架。由框架负责MapReduce Job的提交/中间数据管理，同时还会对执行过程进行优化，用户可以方便地对Pipeline进行开发/测试/运行。另外FlumeJava没有采用新的DSL，而是以Java类库的方式提供给用户，用户只需要使用Java语言编写即可。\n\n14. [Pregel: A System for Large-Scale Graph Processing](https://kowshik.github.io/JPregel/pregel_paper.pdf)(SIGMOD10).Google的图处理框架。Pregel这个名称是为了纪念欧拉，在他提出的格尼斯堡七桥问题中，那些桥所在的河就叫Pregel，而正是格尼斯堡七桥问题导致了图论的诞生。最初是为了解决PageRank计算问题，由于MapReduce并不适于这种场景，所以需要发展新的计算模型去完成这项计算任务，在这个过程中逐步提炼出一个通用的图计算框架，并用来解决更多的问题。核心思想源自BSP模型，这个就更早了，是在上世纪80年代由Leslie Valiant(2010年图灵奖得主)提出，之后在1990的Communications of the ACM 上，正式发表了题为A bridging model for parallel computation的文章。\n\n15. [Dremel: Interactive Analysis of Web-Scale Datasets](https://ai.google/research/pubs/pub36632)(VLDB10).由于MapReduce的延迟太大，无法满足交互式查询的需求，Google开发了Dremel系统。Dremel主要做了三件事：\n\n    * 将嵌套记录转换为列式存储，并提供快速的反向组装\n\n    * 类sql的查询语言\n\n    * 类搜索系统的查询执行树\n\n    通过列式存储降低io，将速度提高一个数量级，这类似于诸如Vertica这样的列存式数据库，与传统行式存储不同，它们只需要读取查询语句中真正必需的那些字段数据；通过类搜索系统的查询执行系统取代mr(MapReduce)，再提高一个数量级。它类似于Hive，应该说查询层像Hive，都具有类似于SQL的查询语言，都可以用来做数据挖掘和分析；但hive是基于mr，所以实时性要差，Dremel则由于它的查询执行引擎类似于搜索服务系统，因此非常适合于交互式的数据分析方式，具有较低的延迟，但是通常数据规模要小于mr；而与传统数据库的区别是，它具有更高的可扩展性和容错性，结构相对简单，可以支持更多的底层存储方式。其中的数据转化与存储方式，巧妙地将Protobuf格式的嵌套记录转换成了列式存储，同时还能够快速的进行重组，是其比较独特的一点。\n\n16. [Tenzing A SQL Implementation On The MapReduce Framework](https://ai.google/research/pubs/pub37200)(VLDB11).Tenzing是一个建立在MapReduce之上的用于Google数据的ad hoc分析的SQL查询引擎。Tenzing提供了一个具有如下关键特征的完整SQL实现(还具有几个扩展)：异构性，高性能，可扩展性，可靠性，元数据感知，低延时，支持列式存储和结构化数据，容易扩展。Tenzing的发表算是很晚的了，与之相比Facebook在VLDB09上就发表了Hive的论文。与开源系统Hive的优势在于它跟底层所依赖的MapReduce系统都是一个公司内的产品，因此它可以对MapReduce做很多改动，以满足Tenzing某些特殊性的需求，最大化Tenzing的性能。 \n\n17. [PowerDrill：](http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf)[Processing a Trillion Cells per Mouse Click](http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf)(VLDB12).Google推出的基于内存的列存数据库，该系统在2008年就已经在Google内部上线。与Dremel相比虽然都是面向分析场景，但是PowerDrill主要面向的是少量核心数据集上的多维分析，由于数据集相对少同时分析需求多所以可以放到内存，在把数据加载到内存分析之前会进行复杂的预处理以尽量减少内存占用。而Dremel则更加适合面向大量数据集的分析，不需要把数据加载到内存。主要采用了如下技术进行加速和内存优化：\n    1. 导入时对数据进行分区，然后查询时根据分区进行过滤尽量避免进行全量扫描 \n    2. 底层数据采用列式存储，可以跳过不需要的列 \n    3. 采用全局/chunk两级字典对列值进行编码，一方面可以加速计算(chunk级的字典可以用来进行针对用户查询的chunk过滤，编码后的value变成了更短的int类型与原始值相比可以更快速的进行相关运算)，另一方面还可以达到数据压缩的目的，与通用压缩算法相比采用这种编码方式的优点是：读取时不需要进行解压这样的预处理，同时支持随机读取 \n    4. 编码后的数据进行压缩还可以达到1.4-2倍的压缩比，为了避免压缩带来的性能降低，采用了压缩与编码的混合策略，对数据进行分层，最热的数据是解压后的编码数据，然后稍冷的数据也还会进行压缩 \n    5. 对数据行根据partition key进行重排序，提高压缩比 \n    6. 查询分布式执行，对于同一个查询会分成多个子查询并发给多个机器执行，同时同一个子查询会发给两台机器同时执行，只要有一个返回即可，但是另一个最终也要执行完以进行数据预热\n\n18. [MillWheel: Fault-Tolerant Stream Processing at Internet Scale](https://ai.google/research/pubs/pub41378)(VLDB13).Google的流计算系统，被广泛应用于构建低延迟数据处理应用的框架。用户只需要描述好关于计算的有向图，编写每个节点的应用程序代码。系统负责管理持久化状态和连续的记录流，同时将一切置于框架提供的容错性保证之下。虽然发布的比较晚，但是其中的一些机制(比如Low Watermark)被借鉴到开源的 **Flink** 系统中。\n\n19. [Mesa: Geo-Replicated, Near Real-Time, Scalable Data Warehousing](https://ai.google/research/pubs/pub42851)(VLDB14).Google的跨数据中心数据仓库系统，主要是为了满足广告业务的场景需求，随着广告平台的不断发展，客户对各自的广告活动的可视化提出了更高的要求。对于更具体和更细粒度的信息需求，直接导致了数据规模的急速增长。虽然Google已经把核心广告数据迁移到了Spanner+F1上，但是对于这种广告效果实时统计需求来言，由于涉及非常多的指标这些指标可能是保存在成百上千张表中，同时这些指标与用户点击日志相关通常对应着非常大的峰值访问量，超过了Spanner+F1这样的OLTP系统的处理能力。为此Google构建了Mesa从而能处理持续增长的数据量，同时它还提供了一致性和近实时查询数据的能力。具体实现方法是：将增量更新进行batch，提交者负责为增量数据分配版本号，利用Paxos对跨数据中心的版本数据库进行更新，基于MVCC机制提供一致性访问。底层通过Bigtable存储元数据，通过[Colossus](http://static.googleusercontent.com/media/research.google.com/en/us/university/relations/facultysummit2010/storage_architecture_and_challenges.pdf)来存储数据文件，此外还利用[MapReduce](http://en.wikipedia.org/wiki/MapReduce)来对连续增量数据进行合并，而为Mesa提供增量更新的上游应用通常是一个流计算系统。可以看到Mesa系统本身结合了批量处理与实时计算，还要满足OLTP+OLAP的场景需求，同时采用了分层架构实现存储计算的分离。既像一个分布式数据库，又像一个大数据准实时处理系统。\n\n20. [Shasta: Interactive Reporting At Scale](https://research.google.com/pubs/archive/45394.pdf)(SIGMOD16).Google的交互式报表系统，也主要是为了满足广告业务的场景需求，与Mesa的区别在于Shasta是构建于Mesa之上的更上层封装。主要为了解决如下挑战：1)用户查询请求的低延迟要求 2)底层事务型数据库的schema与实际展现给用户的视图不友好，报表系统的开发人员需要进行复杂的转换，一个查询视图底层可能涉及多种数据源(比如F1/Mesa/Bigtable等) 3)数据实时性需求，用户修改了广告预算后希望可以在新的报表结果中可以马上体现出来。为了解决这些问题，在F1和Mesa系统之上构建了Shasta。主要从两个层面进行解决：语言层面，在SQL之上设计了一种新的语言RVL(Relational View Language)，通过该语言提供的机制(自动聚合/子句引用/视图模板/文本替换等)可以比SQL更加方便地描述用户的查询视图，RVL编译器会把RVL语句翻译成SQL，在这个过程中还会进行查询优化；系统层面，直接利用了F1的分布式查询引擎，但是进行了一些扩展比如增加单独的UDF server让UDF的执行更加安全，为了确保实时性需要直接访问F1，但是为了降低延迟在F1之上增加了一个只读的分布式Cache层。\n\n21. [Goods: Organizing Google’s Datasets](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45390.pdf)(SIGMOD16).Google的元数据仓库Goods(Google DataSet Search)。Google内部积累了大量的数据集，而这些数据散落在各种不同的存储系统中(GFS/Bigtable/Spanner等)。面临的问题就是如何组织管理这些数据，使得公司内部工程师可以方便地找到他们需要的数据，实现数据价值的最大化。Google的做法很多方面都更像一个小型的搜索引擎，不过在这个系统里被索引的数据由网页变成了Google内部生产系统产生的各种数据，用户变成了内部的数据开发人员。整个做法看起来要费劲很多，很大程度上是因为内部系统众多但是没有一个统一的入口平台，只能采用更加自动化(不依赖人和其他系统)的做法：要爬取各个系统的日志，通过日志解析数据的元信息(这个过程中还是比较费劲的，比如为了确定数据的Schema，要把Google中央代码库里的所有protobuf定义拿过来试看哪个能匹配上)，然后把这些信息(大小/owner/访问权限/时间戳/文件格式/上下游/依赖关系/Schema/内容摘要等)保存一个中央的数据字典中(存储在Bigtable中目前已经索引了260亿条数据集信息)，提供给内部用户查询。这中间解决了如下一些问题和挑战：Schema探测/数据自动摘要/血缘分析/聚类/搜索结果ranking/过期数据管理/数据备份等。本文可以让我们一窥Google是如何管理内部数据资产的，有哪些地方可以借鉴。\n\n## 2.4 存储&数据库\n\n22. [Percalator:](https://ai.google/research/pubs/pub36726)[Large-scale Incremental Processing Using Distributed Transactions and Notifications](https://ai.google/research/pubs/pub36726)(OSDI10).基于Bigtable的增量索引更新系统，Google新一代索引系统”咖啡因“实时性提升的关键。此前Google的索引构建是基于MapReduce，全量索引更新一次可能需要几天才能完成，为了提高索引更新的实时性Google构建了增量更新系统。Bigtable只支持单行的原子更新，但是一个网页的更新通常涉及到其他多个网页(网页间存在链接关系比如更新的这个网页上就有其他网页的锚文本)的更新。为了解决这个问题，Percolator在Bigtable之上通过两阶段提交实现了跨行事务。同时网页更新后还要触发一系列的处理流程，Percolator又实现了类似于数据库里面的触发器机制，当Percolator中的某个cell数据发生变化，就触发应用开发者指定的Observer程序。此外开源分布式数据库TiDB就参考了Percalator的事务模型。\n\n23. [Megastore: Providing Scalable, Highly Available Storage for Interactive Services](http://cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf)(CIDR11).Google在2008年的SIGMOD上就介绍了Megastore，但是直到2011年才发表完整论文。Megastore本身基于Bigtable，在保留可扩展/高性能/低延迟/高可用等优点的前提下，引入了传统关系数据库中的很多概念比如关系数据模型/事务/索引，同时基于Paxos实现了全球化同步复制，可以说是最早的分布式数据库实现了。它本身也提供了分布式事务支持，但是论文中并没有描述相关实现细节，猜测应该跟Percalator类似。虽然此后被Spanner所替代，但是它的继任者Spanner很多特性都是受它影响。\n\n24. [Spanner: Google’s Globally-Distributed Database](http://research.google.com/archive/spanner-osdi2012.pdf)(OSDI12).2009年Jeff Dean的一次分享([Designs, Lessons and Advice from Building Large Distributed)](http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf)中首次提到Spanner，也是过了3年到了2012年才发表完整论文。做为Megastore的继任者，它主要解决了Megastore存在的几个问题：性能、查询语言支持弱、分区不灵活。另外一个重要的创新是基于原子钟和GPS硬件实现了TrueTime API，并基于这个API实现了更强的一致性保证。除此之外其他部分则与Megastore非常类似，但是在文中对其分布式事务的实现细节进行了描述。\n\n25. [F1: A Distributed SQL Database That Scales](https://ai.google/research/pubs/pub41344)(VLDB13).基于Spanner实现的分布式SQL数据库，主要实现了一个分布式并行查询引擎，支持一致性索引和非阻塞的在线Schema变更。与Spanner配合替换掉了Google核心广告系统中的MySQL数据库。F1这个名字来自生物遗传学，代指杂交一代，表示它结合了传统关系数据库和NoSQL系统两者的特性。\n\n### 2.5 AI\n\n26. [TensorFlow: A System for Large-Scale Machine Learning](https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf)(OSDI16).\n\n27. [In-Datacenter Performance Analysis of a Tensor Processing Unit](http://www.cs.toronto.edu/~pekhimenko/courses/csc2231-f17/Papers/tpu.pdf)(SIGARCH17).Google TPU。与往常一样，在Google公布此文的时候，新一代更强大的TPU已经开发完成。由于本文更偏重硬件，具体内容没有看。但是其中的第四作者David Patterson还是值得特别来介绍一下，因为在体系结构领域的贡献(RISC、RAID、体系结构的量化研究方法)，他和John Hennessy共同获得了2017年的图灵奖：[相关新闻](http://www.edu.cn/ke_yan_yu_fa_zhan/zui_jin_geng_xin/201803/t20180322_1591118_2.shtml)。2016年加入Google就是去做TPU的；2018年，与他共同获得图灵奖的John Hennessy(斯坦福第十任校长、MIPS公司创始人)被任命为Google母公司Alphabet的新任主席。\n\n## 3.总结\n\n在前面两节我们对过去20年Google在分布式系统领域的经典论文进行了系统地梳理和介绍，通过这个过程我们可以看到：\n\n每当Google发表一篇相关论文，通常都会产生一个与之对应的开源系统。比如GFS/HDFS，MapReduce/Hadoop MapReduce，BigTable/HBase，Chubby/ZooKeeper，FlumeJava/Plume，Dapper/Zipkin等等。如果把数据中心看做一台计算机的话，在数据中心之上的各种分布式系统就像当年的Unix和C语言，Hadoop及各种开源系统就像当年的Linux，而开启这个时代的人们尤其是Jeff Dean/Sanjay Ghemawat就像当年的Ken Thompson/Dennis M. Ritche，Hadoop创始人Doug Cutting就像当年的Linus Torvalds。Ken Thompson/Dennis M. Ritche因为Unix和C方面的贡献获得1983年图灵奖，或许在将来的某一天Jeff Dean/Sanjay Ghemawat也能摘得桂冠。\n\n观察上图，我们还可以看到随着时间的推进，Google自底向上地逐步构建出一个庞大的软硬件基础设施Stack，同时每个系统内部也在不断地自我进化。而不同的系统之间，可能是互补关系，可能是继承关系，可能是替换关系。通过对这个演化过程的观察，我们也总结出一些内在的趋势和规律。论文本身固然重要，但是这些趋势和规律也很有意义。\n\n### 3.1 两个维度，三个层次\n\n如题”他山之石”，人们常说不能总是低头拉车，还要注意抬头看路。那么应该如何走出去看看，看什么呢？我们可以将其划分为两个维度(时间和空间)，三个层次(架构、细节和实现)，如下图：\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817180305.png)\n\n两个维度：时间维度上可以分为过去，现在和未来。Google的那些论文就属于未来，看看它们，那可能是未来要做的，当然慢慢地它们也会成为过去；经典的理论的东西，放到过去这个维度，它们是非常重要的，这决定了对系统理解的深度和高度；现在，就是正在做的或者符合目前实际环境可以直接借鉴的。人们有时候往往喜欢抓着未来，总是忽略了过去和现在，又或者是仅看着当前，忽略了未来和过去。空间维度上可以分为上层和底层，上层是指依赖于我们自己系统的那些应用，底层则指我们的系统本身底层所依赖的那些。有时候为了继续前进，需要跳出当前的框框，从多个维度上去学习，通过不断学习反过来进一步促进当前系统的演化。\n\n三个层次：如果要了解其他系统，可以从三个层次去学习，先大概了解架构，然后深入到一些具体的细节问题，最后如果有时间还可以继续深入到代码级别。结合本文的第一张图来说就是：可以通过Google论文了解整体架构，然后通过开源系统相关wiki或文档可以了解到更细节的一些东西，最后结合开源系统还可以看到实际的代码实现。\n\n### 3.2 合久必分，分久必合\n\n#### 3.2.1 分\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817180548.png)\n\n实例：\n\n1.越来越多的计算被Offload到非CPU的计算单元：Google TPU\n\n2.[“One Size Fits All”: An Idea Whose Time Has Come and Gone](http://cs.brown.edu/~ugur/fits_all.pdf)：各种新的计算模型如Pregel MillWheel Dremel PowerDrill Mesa\n\n3.计算存储分离：Mesa CFS+Spanner+F1\n\n#### 3.2.1 合\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817180736.png)\n\n实例：\n\n1.分布式数据库：从MegaStore开始到后来的Spanner F1，不断弥补着NoSQL的不足。同时Spanner自身仍在不断演化，开始具备更加丰富的SQL和OLAP支持。\n\n2.流处理和批处理的统一：Cloud DataFlow完成了编程接口层面的统一，而Mesa则解决了数据层面的结合。\n\n3.在线离线混部：Borg。\n\n4.软硬件结合：整个基础设施，就是在解决一个软件(分布式系统)如何适配新硬件(面向互联网设计的数据中心)的问题。通过上层分布式系统屏蔽底层数据中心细节，实现”Datacenter As a Computer“。\n\n### 3.3 理论与实践相结合\n\n#### 3.3.1 ”新瓶装旧酒“\n\n纵观过去的20年，我们可以看到如果单纯从理论上看，Google的这些论文并没有提出新理论。它们所依赖的那些基础理论(主要来自分布式系统和关系数据库领域)，基本上都是上个世纪70/80年代就已经提出的。而Google的系统只是把这些经典理论结合自己的业务场景(互联网搜索和广告)，进行了实践并发扬广大使之成为业界潮流。看起来虽然是”新瓶装旧酒”，但是却不能小觑这一点，因为旧酒在新瓶里可能会产生新的化学反应，进而创造出新的完全不同的“酒”。如果忽略了它，当新”酒“成为新浪潮之时，就再也无法站立在浪潮之巅。\n\n#### 3.3.2 两个阶段\n\n如果从理论与实践的这个角度来看，我们可以把过去的20年分成两个阶段：前十年主要解决的是可扩展性问题，理论主要源自分布式系统领域；后十年在解决了可扩展问题后，开始考虑易用性问题，提供更加方便的编程接口和一致性模型，这个阶段更多地是借鉴传统关系数据库领域的一些做法。再回到当下，从AI的再度流行中我们依然可以看到其所依赖的理论基础，依然是在上个世纪就已经提出的，而今天在互联网时代大规模的数据和计算能力这个背景下，重新焕发了生命。在解决完可扩展易用性问题后，使得可以对大规模数据进行方便地存储计算和查询之后，下一个十年人们开始关注如何进一步挖掘数据，如何借助这些数据去完成以前未完成的构想，这个过程中仍在不断学习应用前人的经典理论。\n\n#### 3.3.3 实践联系理论\n\n从另一个方面来说，如果要真正理解这些论文，除了论文本身内容之外，也还需要去了解传统的分布式系统和关系数据库理论。比如Spanner那篇论文，如果只看论文本身，没有关系数据库和分布式系统理论基础的话估计很难看懂。有时候可能还需要多看看论文的参考文献，之后再看才会理解一些。很多研究领域的大牛们，经常会调侃做工程的家伙们，他们说”这些家伙看着就像生活在5,60年代的老家伙“，为什么呢，因为这些家伙们总是用一些很丑陋的方法去解决一个科学家们早在几十年前就给出了完美解决方案的问题，但是这些家伙看起来对此一无所知。当然了，做工程的也会挖苦下那些研究家们老是指指点点，从来不肯俯下身子来解决实际问题。但是实际上，如果你是做工程的，那就应该多看看研究家们的成果，其实很多问题的确是人家n多年前就已经提出并很好解决了的。如果是做研究的，那就多接触下工程实践，理解下现实需求，弥补下理论与实践的差距。\n\n#### 3.3.4 分布式理论实践\n\n具体到分布式系统领域，我们可以发现正是通过与实践相结合，理论才逐渐赢得科学界和工业界的重视。在此之前，分布式理论研究一直处于非常尴尬的状态，与实践的隔阂尤其严重，很多研究工作局限在研究领域，严重脱离现实世界。关于这一点从图灵奖的颁发上可以看出来，自1966年图灵奖首次颁发以来，直到2013年Lamport获奖之前，可以说还没有一个人因为在分布式系统领域的贡献而获得图灵奖。虽然有些获奖者的研究领域也涉及到分布式系统，但是他们获奖更多是因为在其他领域的贡献。而反观程序设计语言/算法/关系数据库等领域均有多人获奖，同时这些领域的研究成果早已被广泛应用在工业界，通过实践证明了其价值。可以说正是因为互联网的兴起，在Google等公司的分布式系统实践下，分布式理论逐渐被广泛应用到各个实际系统中，这也是 Lamport能够获得图灵奖的重要原因。\n\n## 4.云计算的起源与发展\n\n本节我们将跳出Google论文的范畴，以更广泛的视角看一下今天的云计算。下面更多的是描述一些历史，进行一些”考古”，希望这个过程可以带来更多的启发和思考。\n\n### 4.1 从Google论文说起\n\n#### 4.1.1 “冰山一角”\n\n首先还是回到第一张图，我们把图缩小一下，并重点关注图的顶部。\n\n<img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817181035.jpg\" alt=\"img\" style=\"zoom: 50%;\" />\n\n可以看到，在Google强大的软硬件基础设施之上，在其云平台上暴露给外部用户使用的则寥寥无几。这个场景就像我们看到了一座冰山，露在水面上的只有那一角。即便是已经开放给外部用户的Cloud Bigtable是2015年才发布的，此时距离Bigtable论文发表已经过了快10年。Cloud Spanner是2017年，也已经是论文发表5年之后。虽然在2008年就推出了GAE，但是也一直不温不火。\n\n将Google的这些系统与AWS的各种云产品对比一下，可以发现两者的出发点类似都是为了实现”Datacenter As a Computer“，但是目标用户不同。Google这些系统面向的是内部的搜索广告业务，而AWS则致力于让外部客户也能实现”Datacenter As a Computer“。就好比一个是面向大企业客户的国有大银行，一个是面向小微客户的普惠金融。从技术->产品->商品->服务的角度来看，Google在技术上做到了独步天下，但是要提供给外部客户后面的短板仍然需要补足。\n\n早在2011年，Google员工Amazon前员工Steve Yegge在G+上发表了一篇文章对Google和Amazon进行了有趣的对比：[Stevey’s Google Platforms Rant](https://blog.csdn.net/maray/article/details/19553301) ，[中文版](https://news.cnblogs.com/n/120344/)。其中非常重要的一点就是Amazon对于服务及服务化的重视。\n\n2015年Sundar Pichai成为Google新任CEO。进行了一系列调整，找来了VMware的联合创始人Diane Greene领导谷歌的企业及云业务，相关新闻：[谷歌公有云GCP轰隆崛起？](http://www.sohu.com/a/67216913_118794)，可以看到Google正在做出很多改变，开始将云计算作为公司重要战略。同时开源了很多技术如Kubernetes和TensorFlow，试图通过容器、CloudNative和AI等新兴领域实现弯道超车。\n\n#### 4.1.2 为啥要发论文\n\n还有一个有趣的对比，可以看到在过去20年Google发表了非常多的论文来介绍它的内部系统，但是反观Amazon，对于它的云产品内部实现可以说介绍的非常少，相关论文只有寥寥几篇。\n\n对于Google来说，发表论文主要是为了增加个人和公司的业界影响力，便于赢得声誉吸引人才。当然Google内部同样有非常严格的保密机制，禁止员工向外界透露内部系统信息，除非获得了授权。通过前面的一些论文也可以看到，从系统做出来上线算，真正论文发表通常是5年之后的事情了，而发表的时候内部已经有下一代系统了。按照中国古话说”富贵不还乡，如锦衣夜行“，内部再牛逼别人看不到就没有存在感。\n\n反观Amazon，则没有这个苦恼，因为它云平台上的所有系统都是对外开放的，外面的人可以切实地感受到它的存在，大部分情况下都不需要通过论文来提升存在感。\n\n### 4.2 “5朵云”的起源\n\nIBM的CEO Thomas J. Watson在1943年说过这样一段话：”I think there is a world market for maybe five computers,” 后来在Cloud Computing概念提出后，逐步演变成5朵云的说法。\n\n### 4.3 AWS\n\n关于售卖计算能力给外部客户的想法最早源自2003年Benjamin Black和Chris Pinkham写的一篇报告中，这个想法引起了Jeff Bezos的兴趣。之后2004年就开干了，当时大家一致觉得Pinkham最适合去干这件事，但是他那个时候正想着回到他的家乡南非，于是Amazon就让他在南非开了新的办公室，在那里他们创建了EC2团队并开发出了EC2。Benjamin Black 在一篇文章([EC2 Origins](http://blog.b3k.us/2009/01/25/ec2-origins.html))中介绍了这段有趣的历史。\n\n2006年AWS正式上线了EC2和S3，自此拉开了云计算的序幕。其后续整个发展的详细历程可以参考：[Timeline of Amazon Web Services](https://en.wikipedia.org/wiki/Timeline_of_Amazon_Web_Services)。\n\n此外还有一个比较有意思的问题：[为什么 AWS 云计算服务是亚马逊先做出来，而不是 Google ？](https://www.zhihu.com/question/20058413/answer/325838352)其中有偶然也有必然，简要总结一下就是”天时、地利、人和“。\n\n# 参考文献\n\nhttps://www.gcppodcast.com/post/episode-46-borg-and-k8s-with-john-wilkes/\n\nhttps://blog.risingstack.com/the-history-of-kubernetes/\n\n[Borg, Omega, and Kubernetes](https://storage.googleapis.com/pub-tools-public-publication-data/pdf/44843.pdf)\n\nhttp://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/\n\nhttps://en.wikipedia.org/wiki/Eric_Brewer_(scientist)\n\n[如何看待谷歌工程师透露谷歌有20亿行代码，相当于写40遍Windows？](https://www.zhihu.com/question/35736161)\n\n[Return of the Borg: How Twitter Rebuilt Google’s Secret Weapon](https://www.oschina.net/translate/google-borg-twitter-mesos)\n\nhttp://www.infoq.com/cn/news/2014/08/google-data-warehouse-mesa\n\nhttps://en.wikipedia.org/wiki/Amazon_Web_Services\n\nhttps://en.wikipedia.org/wiki/Thomas_J._Watson","source":"_posts/分布式/20210817-Google论文、开源与云计算.md","raw":"# Google论文、开源与云计算\n\n> 本文搬运自：https://zhuanlan.zhihu.com/p/85808754\n\n## 1.Google论文与开源\n\n自1998年成立，至今Google已走过20个年头。在这20年里，Google不断地发表一些对于自己来说已经过时甚至不再使用的技术的论文，但是发表之后总会有类似系统被业界实现出来，也足以说明google的技术至少领先业界数年。在Amazon不断引领全球云计算浪潮开发出一系列面向普罗大众的云产品的同时；Google也在不断引领构建着满足互联网时代海量数据的存储计算和查询分析需求的软硬件基础设施。\n\n本文对Google在这20年中发表的论文进行了一个简单的总结和整理，主要选择了分布式系统和并行计算领域相关的论文，其中内容涉及数据中心/计算/存储/网络/数据库/调度/大数据处理等多个方向。通过这样的一个总结，一方面可以一窥Google强大的软硬件基础设施，另一方面也可以为不同领域的开发人员提供一个学习的参考。可以通过这些文章去了解上层应用的架构设计和实现，进而可以更好的理解和服务于上层应用。同时这些系统中所采用的架构/算法/设计/权衡，本身也可以为我们的系统设计和实现提供重要的参考。\n\n通过Google论文可以了解到系统整体的架构，通过对应开源系统可以在代码层面进行学习。具体如下图(浅蓝色部分为Google论文/黄色为开源系统)：\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817163733.jpg)\n\n## 2.Google论文简介\n\n下面来简要介绍下”那些年我们追过的Google论文”，由于篇幅有限主要讲下每篇论文的主要思路，另外可能还会介绍下论文作者及论文本身的一些八卦。深入阅读的话，可以直接根据下面的链接查看原文，另外很多文章网上已经有中文译文，也可以作为阅读参考。\n\n### 2.1 起源\n\n1. [The anatomy of a large-scale hypertextual Web search engine](https://link.zhihu.com/?target=http%3A//zoo.cs.yale.edu/classes/cs426/2012/bib/brin98theanatomy.pdf)(1998).Google创始人Sergey Brin和Larry Page于1998年发表的奠定Google搜索引擎理论基础的原始论文。在上图中我们把它放到了最底层，在这篇论文里他们描述了最初构建的Google搜索引擎基础架构，可以说所有其他文章都是以此文为起点。此文对于搜索引擎的基本架构，尤其是Google使用的PageRank算法进行了描述，可以作为了解搜索引擎的入门文章。\n\n2. [WEB SEARCH FOR A PLANET: THE GOOGLE CLUSTER ARCHITECTURE](http://research.google.com/archive/googlecluster-ieee.pdf)(IEEE Micro03).描述Google集群架构最早的一篇文章，同时也应该是最被忽略的一篇文章，此文不像GFS MapReduce Bigtable那几篇文章为人所熟知，但是其重要性丝毫不亚于那几篇。这篇文章体现了Google在硬件方面的一个革命性的选择：在数据中心中使用廉价的PC硬件取代高端服务器。这一选择的出发点主要基于性价比，实际的需求是源于互联网数据规模之大已经不能用传统方法解决，但是这个选择导致了上层的软件也要针对性地进行重新的设计和调整。由于硬件可靠性的降低及数量的上升，意味着要在软件层面实现可靠性，需要采用多个副本，需要更加自动化的集群管理和监控。也是从这个时候开始，Google开始着眼于自己设计服务器以及数据中心相关的其他硬件，逐步从托管数据中心向自建数据中心转变。而Google之后实现的各种分布式系统，都可以看做是基于这一硬件选择做出的软件层面的设计权衡。\n\n   再看下本文的作者：Luiz André Barroso/Jeff Dean/Urs Hölzle，除了Jeff Dean，其他两位也都是Google基础设施领域非常重要的人物。Urs Holzle是Google的第8号员工，最早的技术副总裁，一直在Google负责基础设施部门，Jeff Dean和Luiz Barroso等很多人都是他招进Google的，包括当前Google云平台的掌门人Diane Greene(VMWare联合创始人)据说也是在他的游说下才最终决定掌管GCP。Luiz Barroso跟Jeff Dean在加入Google以前都是在DEC工作，在DEC的时候他参与了多核处理器方面的工作，是Google最早的硬件工程师，在构建Google面向互联网时代的数据中心硬件基础设施中做了很多工作。到了2009年，Luiz André Barroso和Urs Hölzle写了一本书，书名就叫<<[The Datacenter as a Computer](http://research.google.com/pubs/pub41606.html)>>，对这些工作(数据中心里的服务器/网络/供电/制冷/能效/成本/故障处理和修复等)做了更详细的介绍。\n\n3. [The Google File System](https://research.google.com/archive/gfs-sosp2003.pdf)(SOSP03).Google在分布式系统领域发表的最早的一篇论文。关于GFS相信很多人都有所了解，此处不再赘言。今天Google内部已经进化到第二代GFS：Colossus，而关于Colossus目前为止还没有相关的论文，网上只有一些零散介绍：[Colossus](https://www.systutorials.com/3202/colossus-successor-to-google-file-system-gfs/)。简要介绍下本文第一作者Sanjay Ghemawat，在加入Google之前他也是在DEC工作，主要从事Java编译器和Profiling相关工作。同时在DEC时代他与Jeff Dean就有很多合作，而他加入Google也是Jeff Dean先加入后推荐他加入的，此后的很多工作都是他和Jeff Dean一块完成的，像后来的MapReduce/BigTable/Spanner/TensorFlow，在做完Spanner之后，Jeff Dean和Sanjay开始转向构建AI领域的大规模分布式系统。2012年，Jeff Dean和Sanjay共同获得了ACM-Infosys Foundation Award。此外Google的一些开源项目像**LevelDB**/GPerftools/TCMalloc等，都可以看到Sanjay的身影。\n\n4. [MapReduce: Simplified Data Processing on Large Clusters](https://research.google.com/archive/mapreduce-osdi04.pdf)(OSDI04).该文作者是Jeff Dean和Sanjay Ghemawat，受Lisp语言中的Map Reduce原语启发，在大规模分布式系统中提供类似的操作原语。在框架层面屏蔽底层分布式系统实现，让用户只需要关注如何编写自己的Mapper和Reducer实现，从而大大简化分布式编程。时至今日MapReduce已经成为大规模数据处理中广泛应用的一种编程模型，虽然之后有很多新的编程模型不断被实现出来，但是在很多场景MapReduce依然发挥着不可替代的作用。\n\n   而自2004年提出之后，中间也出现过很多关于MapReduce的争论，最著名的应该是2008年1月8号David J. DeWitt和Michael Stonebraker发表的一篇文章<< [MapReduce: A major step backwards](http://databasecolumn.vertica.com/database-innovation/mapreduce-a-major-step-backwards/)>>，该文发表后引起了广泛的争论。首先介绍下这两位都是数据库领域的著名科学家，David J. DeWitt，ACM Fellow，2008年以前一直在大学里搞研究，在并行数据库领域建树颇多，之后去了微软在威斯康辛的Jim Gray系统实验室。Michael Stonebraker(2014图灵奖得主)，名头要更大一些，在1992 年提出对象关系数据库。在加州伯克利分校计算机教授达25年，在此期间他创作了Ingres, Illustra, Cohera, StreamBase Systems和Vertica等系统。其中Ingres是很多现代RDBMS的基础，比如Sybase、Microsoft SQL Server、NonStop SQL、Informix 和许多其他的系统。Stonebraker曾担任过Informix的CEO，自己还经常出来创个业，每次还都成功了。关于这个争论，Jeff Dean和Sanjay Ghemawat在2010年1月份的<<Communication of the ACM>>上发表了这篇<<[MapReduce-A Flexible Data Processing Tool](http://duanple.blog.163.com/blog/static/7097176720119711038980/)>>进行回应，同一期上还刊了Michael Stonebraker等人的<<[MapReduce and Parallel DBMSs-Friends or Foes ](http://duanple.blog.163.com/blog/static/7097176720119720494/)>>。\n\n5. [Bigtable: A Distributed Storage System for Structured Data](http://research.google.com/archive/bigtable-osdi06.pdf)(OSDI06).Bigtable基于GFS构建，提供了结构化数据的可扩展分布式存储。自Bigtable论文发表之后，很快开源的HBase被实现出来，此后更是与Amazon的Dynamo一块引领了NoSQL系统的潮流，之后各种NoSQL系统如雨后春笋般出现在各大互联网公司及开源领域。此外在tablet-server中采用的LSM-Tree存储结构，使得这种在1996年就被提出的模型被重新认识，并广泛应用于各种新的存储系统实现中，成为与传统关系数据库中的B树并驾齐驱的两大模型。\n\n   如果说MapReduce代表着新的分布式计算模型的开端的话，Bigtable则代表着新的分布式存储系统的开端。自此之后在分布式计算存储领域，Google不断地推陈出新，发表了很多新的计算和存储系统，如上图中所示。在继续介绍这些新的计算存储系统之前，我们回到图的底层，关注下基础设施方面的一些系统。\n\n### 2.2 基础设施\n\n6. [The Chubby lock service for loosely-coupled distributed systems](http://research.google.com/archive/chubby-osdi06.pdf)(OSDI06).以文件系统接口形式提供的分布式锁服务，帮助开发者简化分布式系统中的同步和协调工作，比如进行Leader选举。除此之外，这篇文章一个很大的贡献应该是将Paxos应用于工业实践，并极大地促进了Paxos的流行，从这个时候开始Paxos逐渐被更多地工业界人士所熟知并应用在自己的分布式系统中。此后Google发表的其他论文中也不止一次地提到Paxos，像MegaStore/Spanner/Mesa都有提及。此文作者Mike Burrows加入Google之前也是在DEC工作，在DEC的时候他还是AltaVista搜索引擎的主要设计者。\n\n7. [Borg](https://research.google.com/pubs/pub43438.html)(Eurosys15) [Omega](https://ai.google/research/pubs/pub41684)(Eurosys13) [Kubernetes](https://kubernetes.io/).Borg是Google内部的集群资源管理系统，大概诞生在2003-2004年，在Borg之前Google通过两个系统Babysitter和Global Work Queue来分别管理它的在线服务和离线作业，而Borg实现了两者的统一管理。直到15年Google才公布了Borg论文，在此之前对外界来说Borg一直都是很神秘的存在。而Omega主要是几个博士生在Google做的研究型项目，最终并没有实际大规模上线，其中的一些理念被应用到Borg系统中。*注：Borg这个名字源自于<<星际迷航>>里的博格人，博格人生活在银河系的德尔塔象限，是半有机物半机械的生化人。博格个体的身体上装配有大量人造器官及机械，大脑为人造的处理器。博格人是严格奉行集体意识的种族，从生理上完全剥夺了个体的自由意识。博格人的社会系统由“博格集合体”组成，每个集合体中的个体成员被称为“Drone”。集合体内的博格个体通过某种复杂的子空间通信网络相互连接。在博格集合体中，博格个体没有自我意识，而是通过一个被称为博格女皇（Borg Queen）的程序对整个集合体进行控制。*\n\n   在2014年中的时候，Google启动了Kubernetes(Borg的开源版本)。2015年，Kubernetes 1.0 release，同时Google与Linux基金会共同发起了CNCF。2016年，Kubernates逐渐成为容器编排管理领域的主流。提到Kubernates，需要介绍下著名的分布式系统专家Eric Brewer，伯克利教授&Google infrastructure VP，互联网服务系统早期研究者。早在1995年他就和Paul Gauthier创立了Inktomi搜索引擎(2003年被Yahoo!收购，李彦宏曾在这家公司工作)，此时距离Google创立还有3年。之后在2000年的PODC上他首次提出了CAP理论，2012年又对CAP进行了[回顾](http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed)。2011年他加入了Google，目前在负责推动Kubernetes的发展。\n\n8. [CPI2: CPU performance isolation for shared compute clusters](http://www.e-wilkes.com/john/papers/2013-EuroSys-CPI2.pdf)(Eurosys13).通过监控CPI(Cycles-Per-Instruction)指标，结合历史运行数据进行分析预测找到影响系统性能的可疑程序，限制其CPU使用或进行隔离/下线，避免影响其他关键应用。本文也从一个侧面反映出，为了实现离线在线混布Google在多方面所做的努力和探索，尤其是在资源隔离方面。具体实现中，每台机器上有一个守护进程负责采集本机上运行的各个Job的CPI数据(通过采用计数模式/采样等方法降低开销，实际CPU开销小于0.1%)，然后发送到一个中央的服务器进行聚合，由于集群可能是异构的，每个Job还会根据不同的CPU类型进行单独聚合，最后把计算出来的CPI数据的平均值和标准差作为CPI spec。结合CPI历史记录建立CPI预测模型，一旦出现采样值偏离预测值的异常情况，就会记录下来，如果异常次数超过一定阈值就启动相关性分析寻找干扰源，找到之后进行相应地处理(限制批处理作业的CPU使用/调度到单独机器上等)。讲到这里，不仅让我们联想到今天大火的AIOPS概念，而很久之前Google已经在生产系统上使用类似技术。不过在论文发表时，Google只是打开了CPI2的监控功能，实际的自动化处理还未在生产系统中打开。\n\n9. [GOOGLE-WIDE PROFILING:A CONTINUOUS PROFILING ](https://ai.google/research/pubs/pub36575)[INFRASTRUCTURE FOR DATA CENTERS](https://ai.google/research/pubs/pub36575)(IEEE Micro10).Google的分布式Profiling基础设施，通过收集数据中心的机器上的各种硬件事件/内核事件/调用栈/锁竞争/堆内存分配/应用性能指标等信息，通过这些信息可以为程序性能优化/Job调度提供参考。为了降低开销，采样是在两个维度上进行，首先是在整个集群的机器集合上采样同一时刻只对很少一部分机器进行profiling，然后在每台机器上再进行基于事件的采样。底层通过OProfile采集系统硬件监控指标(比如CPU周期/L1 L2 Cache Miss/分支预测失败情况等)，通过GPerfTools采集应用程序进程级的运行指标(比如堆内存分配/锁竞争/CPU开销等)。收集后的原始采样信息会保存在GFS上，但是这些信息还未与源代码关联上，而部署的binary通常都是去掉了debug和符号表信息，采用的解决方法是为每个binary还会保存一个包含debug信息的未被strip的原始binary，然后通过运行MapReduce Job完成原始采样信息与源代码的关联。为了方便用户查询，历史Profiling数据还会被加载到一个分布式数据库中。通过这些Profiling数据，除了可以帮助应用理解程序的资源消耗和性能演化历史，还可以实现数据驱动的数据中心设计/构建/运维。\n\n10. [Dapper, a Large-Scale Distributed Systems Tracing Infrastructure](http://research.google.com/pubs/archive/36356.pdf)(Google TR10).Google的分布式Tracing基础设施。Dapper最初是为了追踪在线服务系统的请求处理过程。比如在搜索系统中，用户的一个请求在系统中会经过多个子系统的处理，而且这些处理是发生在不同机器甚至是不同集群上的，当请求处理发生异常时，需要快速发现问题，并准确定位到是哪个环节出了问题，这是非常重要的，Dapper就是为了解决这样的问题。对系统行为进行跟踪必须是持续进行的，因为异常的发生是无法预料的，而且可能是难以重现的。同时跟踪需要是无所不在，遍布各处的，否则可能会遗漏某些重要的点。基于此Dapper有如下三个最重要的设计目标：低的额外开销，对应用的透明性，可扩展。同时产生的跟踪数据需要可以被快速分析，这样可以帮助用户实时获取在线服务状态。\n\n11. [B4: Experience with a Globally-Deployed Software Defined WAN](http://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf)(Sigcomm13).Google在全球有几十个数据中心，这些数据中心之间通常通过2-3条专线与其他数据中心进行连接。本文描述了Google如何通过SDN/OpenFlow对数据中心间的网络进行改造，通过对跨数据中心的流量进行智能调度，最大化数据中心网络链路的利用率。Google通过强大的网络基础设施，使得它的跨越全球的数据中心就像一个局域网，从而为后续很多系统实现跨数据中心的同步复制提供了网络层面的保障。\n\n### 2.3 计算分析系统\n\n自MapReduce之后，Google又不断地开发出新的分布式计算系统，一方面是为了提供更易用的编程接口(比如新的DSL/SQL语言支持)，另一方面是为了适应不同场景(图计算/流计算/即席查询/内存计算/交互式报表等)的需求。\n\n12. [Interpreting the Data: Parallel Analysis with Sawzall](http://cloud.pubs.dbs.uni-leipzig.de/sites/cloud.pubs.dbs.uni-leipzig.de/files/Pike2005InterpretingthedataParallelanalysiswithSawzall.pdf)(Scientific Programming05).Google为了简化MapReduce程序的编写，而提出的一种新的DSL。后来Google又推出了Tenzing/Dremel等数据分析系统，到了2010年就把Sawzall给开源了，项目主页：http://code.google.com/p/szl/。虽然与Tenzing/Dremel相比， Sawzall所能做的事情还是比较有限，但是它是最早的，同时作为一种DSL毕竟还是要比直接写MapReduce job要更易用些。\n\n    本文第一作者Rob Pike，当今世界上最著名的程序员之一，<<Unix编程环境>> <<程序设计实践>>作者。70年代就加入贝尔实验室，跟随Ken Thompson&DMR(二人因为发明Unix和C语言共同获得1983年图灵奖)参与开发了Unix，后来又跟Ken一块设计了UTF-8。2002年起加入Google，之后搞了Sawzall，目前跟Ken Thompson一块在Google设计开发Go语言。\n\n13. [FlumeJava: Easy, Efficient Data-Parallel Pipelines](http://pages.cs.wisc.edu/~akella/CS838/F12/838-CloudPapers/FlumeJava.pdf)(PLDI10).由于实际的数据处理中，通常都不是单个的MapReduce Job，而是多个MapReduce Job组成的Pipeline。为了简化Pipleline的管理和编程，提出了FlumeJava框架。由框架负责MapReduce Job的提交/中间数据管理，同时还会对执行过程进行优化，用户可以方便地对Pipeline进行开发/测试/运行。另外FlumeJava没有采用新的DSL，而是以Java类库的方式提供给用户，用户只需要使用Java语言编写即可。\n\n14. [Pregel: A System for Large-Scale Graph Processing](https://kowshik.github.io/JPregel/pregel_paper.pdf)(SIGMOD10).Google的图处理框架。Pregel这个名称是为了纪念欧拉，在他提出的格尼斯堡七桥问题中，那些桥所在的河就叫Pregel，而正是格尼斯堡七桥问题导致了图论的诞生。最初是为了解决PageRank计算问题，由于MapReduce并不适于这种场景，所以需要发展新的计算模型去完成这项计算任务，在这个过程中逐步提炼出一个通用的图计算框架，并用来解决更多的问题。核心思想源自BSP模型，这个就更早了，是在上世纪80年代由Leslie Valiant(2010年图灵奖得主)提出，之后在1990的Communications of the ACM 上，正式发表了题为A bridging model for parallel computation的文章。\n\n15. [Dremel: Interactive Analysis of Web-Scale Datasets](https://ai.google/research/pubs/pub36632)(VLDB10).由于MapReduce的延迟太大，无法满足交互式查询的需求，Google开发了Dremel系统。Dremel主要做了三件事：\n\n    * 将嵌套记录转换为列式存储，并提供快速的反向组装\n\n    * 类sql的查询语言\n\n    * 类搜索系统的查询执行树\n\n    通过列式存储降低io，将速度提高一个数量级，这类似于诸如Vertica这样的列存式数据库，与传统行式存储不同，它们只需要读取查询语句中真正必需的那些字段数据；通过类搜索系统的查询执行系统取代mr(MapReduce)，再提高一个数量级。它类似于Hive，应该说查询层像Hive，都具有类似于SQL的查询语言，都可以用来做数据挖掘和分析；但hive是基于mr，所以实时性要差，Dremel则由于它的查询执行引擎类似于搜索服务系统，因此非常适合于交互式的数据分析方式，具有较低的延迟，但是通常数据规模要小于mr；而与传统数据库的区别是，它具有更高的可扩展性和容错性，结构相对简单，可以支持更多的底层存储方式。其中的数据转化与存储方式，巧妙地将Protobuf格式的嵌套记录转换成了列式存储，同时还能够快速的进行重组，是其比较独特的一点。\n\n16. [Tenzing A SQL Implementation On The MapReduce Framework](https://ai.google/research/pubs/pub37200)(VLDB11).Tenzing是一个建立在MapReduce之上的用于Google数据的ad hoc分析的SQL查询引擎。Tenzing提供了一个具有如下关键特征的完整SQL实现(还具有几个扩展)：异构性，高性能，可扩展性，可靠性，元数据感知，低延时，支持列式存储和结构化数据，容易扩展。Tenzing的发表算是很晚的了，与之相比Facebook在VLDB09上就发表了Hive的论文。与开源系统Hive的优势在于它跟底层所依赖的MapReduce系统都是一个公司内的产品，因此它可以对MapReduce做很多改动，以满足Tenzing某些特殊性的需求，最大化Tenzing的性能。 \n\n17. [PowerDrill：](http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf)[Processing a Trillion Cells per Mouse Click](http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf)(VLDB12).Google推出的基于内存的列存数据库，该系统在2008年就已经在Google内部上线。与Dremel相比虽然都是面向分析场景，但是PowerDrill主要面向的是少量核心数据集上的多维分析，由于数据集相对少同时分析需求多所以可以放到内存，在把数据加载到内存分析之前会进行复杂的预处理以尽量减少内存占用。而Dremel则更加适合面向大量数据集的分析，不需要把数据加载到内存。主要采用了如下技术进行加速和内存优化：\n    1. 导入时对数据进行分区，然后查询时根据分区进行过滤尽量避免进行全量扫描 \n    2. 底层数据采用列式存储，可以跳过不需要的列 \n    3. 采用全局/chunk两级字典对列值进行编码，一方面可以加速计算(chunk级的字典可以用来进行针对用户查询的chunk过滤，编码后的value变成了更短的int类型与原始值相比可以更快速的进行相关运算)，另一方面还可以达到数据压缩的目的，与通用压缩算法相比采用这种编码方式的优点是：读取时不需要进行解压这样的预处理，同时支持随机读取 \n    4. 编码后的数据进行压缩还可以达到1.4-2倍的压缩比，为了避免压缩带来的性能降低，采用了压缩与编码的混合策略，对数据进行分层，最热的数据是解压后的编码数据，然后稍冷的数据也还会进行压缩 \n    5. 对数据行根据partition key进行重排序，提高压缩比 \n    6. 查询分布式执行，对于同一个查询会分成多个子查询并发给多个机器执行，同时同一个子查询会发给两台机器同时执行，只要有一个返回即可，但是另一个最终也要执行完以进行数据预热\n\n18. [MillWheel: Fault-Tolerant Stream Processing at Internet Scale](https://ai.google/research/pubs/pub41378)(VLDB13).Google的流计算系统，被广泛应用于构建低延迟数据处理应用的框架。用户只需要描述好关于计算的有向图，编写每个节点的应用程序代码。系统负责管理持久化状态和连续的记录流，同时将一切置于框架提供的容错性保证之下。虽然发布的比较晚，但是其中的一些机制(比如Low Watermark)被借鉴到开源的 **Flink** 系统中。\n\n19. [Mesa: Geo-Replicated, Near Real-Time, Scalable Data Warehousing](https://ai.google/research/pubs/pub42851)(VLDB14).Google的跨数据中心数据仓库系统，主要是为了满足广告业务的场景需求，随着广告平台的不断发展，客户对各自的广告活动的可视化提出了更高的要求。对于更具体和更细粒度的信息需求，直接导致了数据规模的急速增长。虽然Google已经把核心广告数据迁移到了Spanner+F1上，但是对于这种广告效果实时统计需求来言，由于涉及非常多的指标这些指标可能是保存在成百上千张表中，同时这些指标与用户点击日志相关通常对应着非常大的峰值访问量，超过了Spanner+F1这样的OLTP系统的处理能力。为此Google构建了Mesa从而能处理持续增长的数据量，同时它还提供了一致性和近实时查询数据的能力。具体实现方法是：将增量更新进行batch，提交者负责为增量数据分配版本号，利用Paxos对跨数据中心的版本数据库进行更新，基于MVCC机制提供一致性访问。底层通过Bigtable存储元数据，通过[Colossus](http://static.googleusercontent.com/media/research.google.com/en/us/university/relations/facultysummit2010/storage_architecture_and_challenges.pdf)来存储数据文件，此外还利用[MapReduce](http://en.wikipedia.org/wiki/MapReduce)来对连续增量数据进行合并，而为Mesa提供增量更新的上游应用通常是一个流计算系统。可以看到Mesa系统本身结合了批量处理与实时计算，还要满足OLTP+OLAP的场景需求，同时采用了分层架构实现存储计算的分离。既像一个分布式数据库，又像一个大数据准实时处理系统。\n\n20. [Shasta: Interactive Reporting At Scale](https://research.google.com/pubs/archive/45394.pdf)(SIGMOD16).Google的交互式报表系统，也主要是为了满足广告业务的场景需求，与Mesa的区别在于Shasta是构建于Mesa之上的更上层封装。主要为了解决如下挑战：1)用户查询请求的低延迟要求 2)底层事务型数据库的schema与实际展现给用户的视图不友好，报表系统的开发人员需要进行复杂的转换，一个查询视图底层可能涉及多种数据源(比如F1/Mesa/Bigtable等) 3)数据实时性需求，用户修改了广告预算后希望可以在新的报表结果中可以马上体现出来。为了解决这些问题，在F1和Mesa系统之上构建了Shasta。主要从两个层面进行解决：语言层面，在SQL之上设计了一种新的语言RVL(Relational View Language)，通过该语言提供的机制(自动聚合/子句引用/视图模板/文本替换等)可以比SQL更加方便地描述用户的查询视图，RVL编译器会把RVL语句翻译成SQL，在这个过程中还会进行查询优化；系统层面，直接利用了F1的分布式查询引擎，但是进行了一些扩展比如增加单独的UDF server让UDF的执行更加安全，为了确保实时性需要直接访问F1，但是为了降低延迟在F1之上增加了一个只读的分布式Cache层。\n\n21. [Goods: Organizing Google’s Datasets](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45390.pdf)(SIGMOD16).Google的元数据仓库Goods(Google DataSet Search)。Google内部积累了大量的数据集，而这些数据散落在各种不同的存储系统中(GFS/Bigtable/Spanner等)。面临的问题就是如何组织管理这些数据，使得公司内部工程师可以方便地找到他们需要的数据，实现数据价值的最大化。Google的做法很多方面都更像一个小型的搜索引擎，不过在这个系统里被索引的数据由网页变成了Google内部生产系统产生的各种数据，用户变成了内部的数据开发人员。整个做法看起来要费劲很多，很大程度上是因为内部系统众多但是没有一个统一的入口平台，只能采用更加自动化(不依赖人和其他系统)的做法：要爬取各个系统的日志，通过日志解析数据的元信息(这个过程中还是比较费劲的，比如为了确定数据的Schema，要把Google中央代码库里的所有protobuf定义拿过来试看哪个能匹配上)，然后把这些信息(大小/owner/访问权限/时间戳/文件格式/上下游/依赖关系/Schema/内容摘要等)保存一个中央的数据字典中(存储在Bigtable中目前已经索引了260亿条数据集信息)，提供给内部用户查询。这中间解决了如下一些问题和挑战：Schema探测/数据自动摘要/血缘分析/聚类/搜索结果ranking/过期数据管理/数据备份等。本文可以让我们一窥Google是如何管理内部数据资产的，有哪些地方可以借鉴。\n\n## 2.4 存储&数据库\n\n22. [Percalator:](https://ai.google/research/pubs/pub36726)[Large-scale Incremental Processing Using Distributed Transactions and Notifications](https://ai.google/research/pubs/pub36726)(OSDI10).基于Bigtable的增量索引更新系统，Google新一代索引系统”咖啡因“实时性提升的关键。此前Google的索引构建是基于MapReduce，全量索引更新一次可能需要几天才能完成，为了提高索引更新的实时性Google构建了增量更新系统。Bigtable只支持单行的原子更新，但是一个网页的更新通常涉及到其他多个网页(网页间存在链接关系比如更新的这个网页上就有其他网页的锚文本)的更新。为了解决这个问题，Percolator在Bigtable之上通过两阶段提交实现了跨行事务。同时网页更新后还要触发一系列的处理流程，Percolator又实现了类似于数据库里面的触发器机制，当Percolator中的某个cell数据发生变化，就触发应用开发者指定的Observer程序。此外开源分布式数据库TiDB就参考了Percalator的事务模型。\n\n23. [Megastore: Providing Scalable, Highly Available Storage for Interactive Services](http://cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf)(CIDR11).Google在2008年的SIGMOD上就介绍了Megastore，但是直到2011年才发表完整论文。Megastore本身基于Bigtable，在保留可扩展/高性能/低延迟/高可用等优点的前提下，引入了传统关系数据库中的很多概念比如关系数据模型/事务/索引，同时基于Paxos实现了全球化同步复制，可以说是最早的分布式数据库实现了。它本身也提供了分布式事务支持，但是论文中并没有描述相关实现细节，猜测应该跟Percalator类似。虽然此后被Spanner所替代，但是它的继任者Spanner很多特性都是受它影响。\n\n24. [Spanner: Google’s Globally-Distributed Database](http://research.google.com/archive/spanner-osdi2012.pdf)(OSDI12).2009年Jeff Dean的一次分享([Designs, Lessons and Advice from Building Large Distributed)](http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf)中首次提到Spanner，也是过了3年到了2012年才发表完整论文。做为Megastore的继任者，它主要解决了Megastore存在的几个问题：性能、查询语言支持弱、分区不灵活。另外一个重要的创新是基于原子钟和GPS硬件实现了TrueTime API，并基于这个API实现了更强的一致性保证。除此之外其他部分则与Megastore非常类似，但是在文中对其分布式事务的实现细节进行了描述。\n\n25. [F1: A Distributed SQL Database That Scales](https://ai.google/research/pubs/pub41344)(VLDB13).基于Spanner实现的分布式SQL数据库，主要实现了一个分布式并行查询引擎，支持一致性索引和非阻塞的在线Schema变更。与Spanner配合替换掉了Google核心广告系统中的MySQL数据库。F1这个名字来自生物遗传学，代指杂交一代，表示它结合了传统关系数据库和NoSQL系统两者的特性。\n\n### 2.5 AI\n\n26. [TensorFlow: A System for Large-Scale Machine Learning](https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf)(OSDI16).\n\n27. [In-Datacenter Performance Analysis of a Tensor Processing Unit](http://www.cs.toronto.edu/~pekhimenko/courses/csc2231-f17/Papers/tpu.pdf)(SIGARCH17).Google TPU。与往常一样，在Google公布此文的时候，新一代更强大的TPU已经开发完成。由于本文更偏重硬件，具体内容没有看。但是其中的第四作者David Patterson还是值得特别来介绍一下，因为在体系结构领域的贡献(RISC、RAID、体系结构的量化研究方法)，他和John Hennessy共同获得了2017年的图灵奖：[相关新闻](http://www.edu.cn/ke_yan_yu_fa_zhan/zui_jin_geng_xin/201803/t20180322_1591118_2.shtml)。2016年加入Google就是去做TPU的；2018年，与他共同获得图灵奖的John Hennessy(斯坦福第十任校长、MIPS公司创始人)被任命为Google母公司Alphabet的新任主席。\n\n## 3.总结\n\n在前面两节我们对过去20年Google在分布式系统领域的经典论文进行了系统地梳理和介绍，通过这个过程我们可以看到：\n\n每当Google发表一篇相关论文，通常都会产生一个与之对应的开源系统。比如GFS/HDFS，MapReduce/Hadoop MapReduce，BigTable/HBase，Chubby/ZooKeeper，FlumeJava/Plume，Dapper/Zipkin等等。如果把数据中心看做一台计算机的话，在数据中心之上的各种分布式系统就像当年的Unix和C语言，Hadoop及各种开源系统就像当年的Linux，而开启这个时代的人们尤其是Jeff Dean/Sanjay Ghemawat就像当年的Ken Thompson/Dennis M. Ritche，Hadoop创始人Doug Cutting就像当年的Linus Torvalds。Ken Thompson/Dennis M. Ritche因为Unix和C方面的贡献获得1983年图灵奖，或许在将来的某一天Jeff Dean/Sanjay Ghemawat也能摘得桂冠。\n\n观察上图，我们还可以看到随着时间的推进，Google自底向上地逐步构建出一个庞大的软硬件基础设施Stack，同时每个系统内部也在不断地自我进化。而不同的系统之间，可能是互补关系，可能是继承关系，可能是替换关系。通过对这个演化过程的观察，我们也总结出一些内在的趋势和规律。论文本身固然重要，但是这些趋势和规律也很有意义。\n\n### 3.1 两个维度，三个层次\n\n如题”他山之石”，人们常说不能总是低头拉车，还要注意抬头看路。那么应该如何走出去看看，看什么呢？我们可以将其划分为两个维度(时间和空间)，三个层次(架构、细节和实现)，如下图：\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817180305.png)\n\n两个维度：时间维度上可以分为过去，现在和未来。Google的那些论文就属于未来，看看它们，那可能是未来要做的，当然慢慢地它们也会成为过去；经典的理论的东西，放到过去这个维度，它们是非常重要的，这决定了对系统理解的深度和高度；现在，就是正在做的或者符合目前实际环境可以直接借鉴的。人们有时候往往喜欢抓着未来，总是忽略了过去和现在，又或者是仅看着当前，忽略了未来和过去。空间维度上可以分为上层和底层，上层是指依赖于我们自己系统的那些应用，底层则指我们的系统本身底层所依赖的那些。有时候为了继续前进，需要跳出当前的框框，从多个维度上去学习，通过不断学习反过来进一步促进当前系统的演化。\n\n三个层次：如果要了解其他系统，可以从三个层次去学习，先大概了解架构，然后深入到一些具体的细节问题，最后如果有时间还可以继续深入到代码级别。结合本文的第一张图来说就是：可以通过Google论文了解整体架构，然后通过开源系统相关wiki或文档可以了解到更细节的一些东西，最后结合开源系统还可以看到实际的代码实现。\n\n### 3.2 合久必分，分久必合\n\n#### 3.2.1 分\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817180548.png)\n\n实例：\n\n1.越来越多的计算被Offload到非CPU的计算单元：Google TPU\n\n2.[“One Size Fits All”: An Idea Whose Time Has Come and Gone](http://cs.brown.edu/~ugur/fits_all.pdf)：各种新的计算模型如Pregel MillWheel Dremel PowerDrill Mesa\n\n3.计算存储分离：Mesa CFS+Spanner+F1\n\n#### 3.2.1 合\n\n![img](https://gitee.com/coderzc/blogimage/raw/master/20210817180736.png)\n\n实例：\n\n1.分布式数据库：从MegaStore开始到后来的Spanner F1，不断弥补着NoSQL的不足。同时Spanner自身仍在不断演化，开始具备更加丰富的SQL和OLAP支持。\n\n2.流处理和批处理的统一：Cloud DataFlow完成了编程接口层面的统一，而Mesa则解决了数据层面的结合。\n\n3.在线离线混部：Borg。\n\n4.软硬件结合：整个基础设施，就是在解决一个软件(分布式系统)如何适配新硬件(面向互联网设计的数据中心)的问题。通过上层分布式系统屏蔽底层数据中心细节，实现”Datacenter As a Computer“。\n\n### 3.3 理论与实践相结合\n\n#### 3.3.1 ”新瓶装旧酒“\n\n纵观过去的20年，我们可以看到如果单纯从理论上看，Google的这些论文并没有提出新理论。它们所依赖的那些基础理论(主要来自分布式系统和关系数据库领域)，基本上都是上个世纪70/80年代就已经提出的。而Google的系统只是把这些经典理论结合自己的业务场景(互联网搜索和广告)，进行了实践并发扬广大使之成为业界潮流。看起来虽然是”新瓶装旧酒”，但是却不能小觑这一点，因为旧酒在新瓶里可能会产生新的化学反应，进而创造出新的完全不同的“酒”。如果忽略了它，当新”酒“成为新浪潮之时，就再也无法站立在浪潮之巅。\n\n#### 3.3.2 两个阶段\n\n如果从理论与实践的这个角度来看，我们可以把过去的20年分成两个阶段：前十年主要解决的是可扩展性问题，理论主要源自分布式系统领域；后十年在解决了可扩展问题后，开始考虑易用性问题，提供更加方便的编程接口和一致性模型，这个阶段更多地是借鉴传统关系数据库领域的一些做法。再回到当下，从AI的再度流行中我们依然可以看到其所依赖的理论基础，依然是在上个世纪就已经提出的，而今天在互联网时代大规模的数据和计算能力这个背景下，重新焕发了生命。在解决完可扩展易用性问题后，使得可以对大规模数据进行方便地存储计算和查询之后，下一个十年人们开始关注如何进一步挖掘数据，如何借助这些数据去完成以前未完成的构想，这个过程中仍在不断学习应用前人的经典理论。\n\n#### 3.3.3 实践联系理论\n\n从另一个方面来说，如果要真正理解这些论文，除了论文本身内容之外，也还需要去了解传统的分布式系统和关系数据库理论。比如Spanner那篇论文，如果只看论文本身，没有关系数据库和分布式系统理论基础的话估计很难看懂。有时候可能还需要多看看论文的参考文献，之后再看才会理解一些。很多研究领域的大牛们，经常会调侃做工程的家伙们，他们说”这些家伙看着就像生活在5,60年代的老家伙“，为什么呢，因为这些家伙们总是用一些很丑陋的方法去解决一个科学家们早在几十年前就给出了完美解决方案的问题，但是这些家伙看起来对此一无所知。当然了，做工程的也会挖苦下那些研究家们老是指指点点，从来不肯俯下身子来解决实际问题。但是实际上，如果你是做工程的，那就应该多看看研究家们的成果，其实很多问题的确是人家n多年前就已经提出并很好解决了的。如果是做研究的，那就多接触下工程实践，理解下现实需求，弥补下理论与实践的差距。\n\n#### 3.3.4 分布式理论实践\n\n具体到分布式系统领域，我们可以发现正是通过与实践相结合，理论才逐渐赢得科学界和工业界的重视。在此之前，分布式理论研究一直处于非常尴尬的状态，与实践的隔阂尤其严重，很多研究工作局限在研究领域，严重脱离现实世界。关于这一点从图灵奖的颁发上可以看出来，自1966年图灵奖首次颁发以来，直到2013年Lamport获奖之前，可以说还没有一个人因为在分布式系统领域的贡献而获得图灵奖。虽然有些获奖者的研究领域也涉及到分布式系统，但是他们获奖更多是因为在其他领域的贡献。而反观程序设计语言/算法/关系数据库等领域均有多人获奖，同时这些领域的研究成果早已被广泛应用在工业界，通过实践证明了其价值。可以说正是因为互联网的兴起，在Google等公司的分布式系统实践下，分布式理论逐渐被广泛应用到各个实际系统中，这也是 Lamport能够获得图灵奖的重要原因。\n\n## 4.云计算的起源与发展\n\n本节我们将跳出Google论文的范畴，以更广泛的视角看一下今天的云计算。下面更多的是描述一些历史，进行一些”考古”，希望这个过程可以带来更多的启发和思考。\n\n### 4.1 从Google论文说起\n\n#### 4.1.1 “冰山一角”\n\n首先还是回到第一张图，我们把图缩小一下，并重点关注图的顶部。\n\n<img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817181035.jpg\" alt=\"img\" style=\"zoom: 50%;\" />\n\n可以看到，在Google强大的软硬件基础设施之上，在其云平台上暴露给外部用户使用的则寥寥无几。这个场景就像我们看到了一座冰山，露在水面上的只有那一角。即便是已经开放给外部用户的Cloud Bigtable是2015年才发布的，此时距离Bigtable论文发表已经过了快10年。Cloud Spanner是2017年，也已经是论文发表5年之后。虽然在2008年就推出了GAE，但是也一直不温不火。\n\n将Google的这些系统与AWS的各种云产品对比一下，可以发现两者的出发点类似都是为了实现”Datacenter As a Computer“，但是目标用户不同。Google这些系统面向的是内部的搜索广告业务，而AWS则致力于让外部客户也能实现”Datacenter As a Computer“。就好比一个是面向大企业客户的国有大银行，一个是面向小微客户的普惠金融。从技术->产品->商品->服务的角度来看，Google在技术上做到了独步天下，但是要提供给外部客户后面的短板仍然需要补足。\n\n早在2011年，Google员工Amazon前员工Steve Yegge在G+上发表了一篇文章对Google和Amazon进行了有趣的对比：[Stevey’s Google Platforms Rant](https://blog.csdn.net/maray/article/details/19553301) ，[中文版](https://news.cnblogs.com/n/120344/)。其中非常重要的一点就是Amazon对于服务及服务化的重视。\n\n2015年Sundar Pichai成为Google新任CEO。进行了一系列调整，找来了VMware的联合创始人Diane Greene领导谷歌的企业及云业务，相关新闻：[谷歌公有云GCP轰隆崛起？](http://www.sohu.com/a/67216913_118794)，可以看到Google正在做出很多改变，开始将云计算作为公司重要战略。同时开源了很多技术如Kubernetes和TensorFlow，试图通过容器、CloudNative和AI等新兴领域实现弯道超车。\n\n#### 4.1.2 为啥要发论文\n\n还有一个有趣的对比，可以看到在过去20年Google发表了非常多的论文来介绍它的内部系统，但是反观Amazon，对于它的云产品内部实现可以说介绍的非常少，相关论文只有寥寥几篇。\n\n对于Google来说，发表论文主要是为了增加个人和公司的业界影响力，便于赢得声誉吸引人才。当然Google内部同样有非常严格的保密机制，禁止员工向外界透露内部系统信息，除非获得了授权。通过前面的一些论文也可以看到，从系统做出来上线算，真正论文发表通常是5年之后的事情了，而发表的时候内部已经有下一代系统了。按照中国古话说”富贵不还乡，如锦衣夜行“，内部再牛逼别人看不到就没有存在感。\n\n反观Amazon，则没有这个苦恼，因为它云平台上的所有系统都是对外开放的，外面的人可以切实地感受到它的存在，大部分情况下都不需要通过论文来提升存在感。\n\n### 4.2 “5朵云”的起源\n\nIBM的CEO Thomas J. Watson在1943年说过这样一段话：”I think there is a world market for maybe five computers,” 后来在Cloud Computing概念提出后，逐步演变成5朵云的说法。\n\n### 4.3 AWS\n\n关于售卖计算能力给外部客户的想法最早源自2003年Benjamin Black和Chris Pinkham写的一篇报告中，这个想法引起了Jeff Bezos的兴趣。之后2004年就开干了，当时大家一致觉得Pinkham最适合去干这件事，但是他那个时候正想着回到他的家乡南非，于是Amazon就让他在南非开了新的办公室，在那里他们创建了EC2团队并开发出了EC2。Benjamin Black 在一篇文章([EC2 Origins](http://blog.b3k.us/2009/01/25/ec2-origins.html))中介绍了这段有趣的历史。\n\n2006年AWS正式上线了EC2和S3，自此拉开了云计算的序幕。其后续整个发展的详细历程可以参考：[Timeline of Amazon Web Services](https://en.wikipedia.org/wiki/Timeline_of_Amazon_Web_Services)。\n\n此外还有一个比较有意思的问题：[为什么 AWS 云计算服务是亚马逊先做出来，而不是 Google ？](https://www.zhihu.com/question/20058413/answer/325838352)其中有偶然也有必然，简要总结一下就是”天时、地利、人和“。\n\n# 参考文献\n\nhttps://www.gcppodcast.com/post/episode-46-borg-and-k8s-with-john-wilkes/\n\nhttps://blog.risingstack.com/the-history-of-kubernetes/\n\n[Borg, Omega, and Kubernetes](https://storage.googleapis.com/pub-tools-public-publication-data/pdf/44843.pdf)\n\nhttp://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/\n\nhttps://en.wikipedia.org/wiki/Eric_Brewer_(scientist)\n\n[如何看待谷歌工程师透露谷歌有20亿行代码，相当于写40遍Windows？](https://www.zhihu.com/question/35736161)\n\n[Return of the Borg: How Twitter Rebuilt Google’s Secret Weapon](https://www.oschina.net/translate/google-borg-twitter-mesos)\n\nhttp://www.infoq.com/cn/news/2014/08/google-data-warehouse-mesa\n\nhttps://en.wikipedia.org/wiki/Amazon_Web_Services\n\nhttps://en.wikipedia.org/wiki/Thomas_J._Watson","slug":"分布式/20210817-Google论文、开源与云计算","published":1,"date":"2021-08-16T16:00:00.000Z","updated":"2021-08-17T20:03:30.909Z","title":"Google论文、开源与云计算","comments":1,"layout":"post","photos":[],"link":"","_id":"cksgjze230011nnvb9dq6bshu","content":"<h1 id=\"Google论文、开源与云计算\"><a href=\"#Google论文、开源与云计算\" class=\"headerlink\" title=\"Google论文、开源与云计算\"></a>Google论文、开源与云计算</h1><blockquote>\n<p>本文搬运自：<a href=\"https://zhuanlan.zhihu.com/p/85808754\">https://zhuanlan.zhihu.com/p/85808754</a></p>\n</blockquote>\n<h2 id=\"1-Google论文与开源\"><a href=\"#1-Google论文与开源\" class=\"headerlink\" title=\"1.Google论文与开源\"></a>1.Google论文与开源</h2><p>自1998年成立，至今Google已走过20个年头。在这20年里，Google不断地发表一些对于自己来说已经过时甚至不再使用的技术的论文，但是发表之后总会有类似系统被业界实现出来，也足以说明google的技术至少领先业界数年。在Amazon不断引领全球云计算浪潮开发出一系列面向普罗大众的云产品的同时；Google也在不断引领构建着满足互联网时代海量数据的存储计算和查询分析需求的软硬件基础设施。</p>\n<p>本文对Google在这20年中发表的论文进行了一个简单的总结和整理，主要选择了分布式系统和并行计算领域相关的论文，其中内容涉及数据中心/计算/存储/网络/数据库/调度/大数据处理等多个方向。通过这样的一个总结，一方面可以一窥Google强大的软硬件基础设施，另一方面也可以为不同领域的开发人员提供一个学习的参考。可以通过这些文章去了解上层应用的架构设计和实现，进而可以更好的理解和服务于上层应用。同时这些系统中所采用的架构/算法/设计/权衡，本身也可以为我们的系统设计和实现提供重要的参考。</p>\n<p>通过Google论文可以了解到系统整体的架构，通过对应开源系统可以在代码层面进行学习。具体如下图(浅蓝色部分为Google论文/黄色为开源系统)：</p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817163733.jpg\" alt=\"img\"></p>\n<h2 id=\"2-Google论文简介\"><a href=\"#2-Google论文简介\" class=\"headerlink\" title=\"2.Google论文简介\"></a>2.Google论文简介</h2><p>下面来简要介绍下”那些年我们追过的Google论文”，由于篇幅有限主要讲下每篇论文的主要思路，另外可能还会介绍下论文作者及论文本身的一些八卦。深入阅读的话，可以直接根据下面的链接查看原文，另外很多文章网上已经有中文译文，也可以作为阅读参考。</p>\n<h3 id=\"2-1-起源\"><a href=\"#2-1-起源\" class=\"headerlink\" title=\"2.1 起源\"></a>2.1 起源</h3><ol>\n<li><p><a href=\"https://link.zhihu.com/?target=http://zoo.cs.yale.edu/classes/cs426/2012/bib/brin98theanatomy.pdf\">The anatomy of a large-scale hypertextual Web search engine</a>(1998).Google创始人Sergey Brin和Larry Page于1998年发表的奠定Google搜索引擎理论基础的原始论文。在上图中我们把它放到了最底层，在这篇论文里他们描述了最初构建的Google搜索引擎基础架构，可以说所有其他文章都是以此文为起点。此文对于搜索引擎的基本架构，尤其是Google使用的PageRank算法进行了描述，可以作为了解搜索引擎的入门文章。</p>\n</li>\n<li><p><a href=\"http://research.google.com/archive/googlecluster-ieee.pdf\">WEB SEARCH FOR A PLANET: THE GOOGLE CLUSTER ARCHITECTURE</a>(IEEE Micro03).描述Google集群架构最早的一篇文章，同时也应该是最被忽略的一篇文章，此文不像GFS MapReduce Bigtable那几篇文章为人所熟知，但是其重要性丝毫不亚于那几篇。这篇文章体现了Google在硬件方面的一个革命性的选择：在数据中心中使用廉价的PC硬件取代高端服务器。这一选择的出发点主要基于性价比，实际的需求是源于互联网数据规模之大已经不能用传统方法解决，但是这个选择导致了上层的软件也要针对性地进行重新的设计和调整。由于硬件可靠性的降低及数量的上升，意味着要在软件层面实现可靠性，需要采用多个副本，需要更加自动化的集群管理和监控。也是从这个时候开始，Google开始着眼于自己设计服务器以及数据中心相关的其他硬件，逐步从托管数据中心向自建数据中心转变。而Google之后实现的各种分布式系统，都可以看做是基于这一硬件选择做出的软件层面的设计权衡。</p>\n<p>再看下本文的作者：Luiz André Barroso/Jeff Dean/Urs Hölzle，除了Jeff Dean，其他两位也都是Google基础设施领域非常重要的人物。Urs Holzle是Google的第8号员工，最早的技术副总裁，一直在Google负责基础设施部门，Jeff Dean和Luiz Barroso等很多人都是他招进Google的，包括当前Google云平台的掌门人Diane Greene(VMWare联合创始人)据说也是在他的游说下才最终决定掌管GCP。Luiz Barroso跟Jeff Dean在加入Google以前都是在DEC工作，在DEC的时候他参与了多核处理器方面的工作，是Google最早的硬件工程师，在构建Google面向互联网时代的数据中心硬件基础设施中做了很多工作。到了2009年，Luiz André Barroso和Urs Hölzle写了一本书，书名就叫&lt;&lt;<a href=\"http://research.google.com/pubs/pub41606.html\">The Datacenter as a Computer</a>&gt;&gt;，对这些工作(数据中心里的服务器/网络/供电/制冷/能效/成本/故障处理和修复等)做了更详细的介绍。</p>\n</li>\n<li><p><a href=\"https://research.google.com/archive/gfs-sosp2003.pdf\">The Google File System</a>(SOSP03).Google在分布式系统领域发表的最早的一篇论文。关于GFS相信很多人都有所了解，此处不再赘言。今天Google内部已经进化到第二代GFS：Colossus，而关于Colossus目前为止还没有相关的论文，网上只有一些零散介绍：<a href=\"https://www.systutorials.com/3202/colossus-successor-to-google-file-system-gfs/\">Colossus</a>。简要介绍下本文第一作者Sanjay Ghemawat，在加入Google之前他也是在DEC工作，主要从事Java编译器和Profiling相关工作。同时在DEC时代他与Jeff Dean就有很多合作，而他加入Google也是Jeff Dean先加入后推荐他加入的，此后的很多工作都是他和Jeff Dean一块完成的，像后来的MapReduce/BigTable/Spanner/TensorFlow，在做完Spanner之后，Jeff Dean和Sanjay开始转向构建AI领域的大规模分布式系统。2012年，Jeff Dean和Sanjay共同获得了ACM-Infosys Foundation Award。此外Google的一些开源项目像<strong>LevelDB</strong>/GPerftools/TCMalloc等，都可以看到Sanjay的身影。</p>\n</li>\n<li><p><a href=\"https://research.google.com/archive/mapreduce-osdi04.pdf\">MapReduce: Simplified Data Processing on Large Clusters</a>(OSDI04).该文作者是Jeff Dean和Sanjay Ghemawat，受Lisp语言中的Map Reduce原语启发，在大规模分布式系统中提供类似的操作原语。在框架层面屏蔽底层分布式系统实现，让用户只需要关注如何编写自己的Mapper和Reducer实现，从而大大简化分布式编程。时至今日MapReduce已经成为大规模数据处理中广泛应用的一种编程模型，虽然之后有很多新的编程模型不断被实现出来，但是在很多场景MapReduce依然发挥着不可替代的作用。</p>\n<p>而自2004年提出之后，中间也出现过很多关于MapReduce的争论，最著名的应该是2008年1月8号David J. DeWitt和Michael Stonebraker发表的一篇文章&lt;&lt; <a href=\"http://databasecolumn.vertica.com/database-innovation/mapreduce-a-major-step-backwards/\">MapReduce: A major step backwards</a>&gt;&gt;，该文发表后引起了广泛的争论。首先介绍下这两位都是数据库领域的著名科学家，David J. DeWitt，ACM Fellow，2008年以前一直在大学里搞研究，在并行数据库领域建树颇多，之后去了微软在威斯康辛的Jim Gray系统实验室。Michael Stonebraker(2014图灵奖得主)，名头要更大一些，在1992 年提出对象关系数据库。在加州伯克利分校计算机教授达25年，在此期间他创作了Ingres, Illustra, Cohera, StreamBase Systems和Vertica等系统。其中Ingres是很多现代RDBMS的基础，比如Sybase、Microsoft SQL Server、NonStop SQL、Informix 和许多其他的系统。Stonebraker曾担任过Informix的CEO，自己还经常出来创个业，每次还都成功了。关于这个争论，Jeff Dean和Sanjay Ghemawat在2010年1月份的&lt;<Communication of the ACM>&gt;上发表了这篇&lt;&lt;<a href=\"http://duanple.blog.163.com/blog/static/7097176720119711038980/\">MapReduce-A Flexible Data Processing Tool</a>&gt;&gt;进行回应，同一期上还刊了Michael Stonebraker等人的&lt;&lt;<a href=\"http://duanple.blog.163.com/blog/static/7097176720119720494/\">MapReduce and Parallel DBMSs-Friends or Foes </a>&gt;&gt;。</p>\n</li>\n<li><p><a href=\"http://research.google.com/archive/bigtable-osdi06.pdf\">Bigtable: A Distributed Storage System for Structured Data</a>(OSDI06).Bigtable基于GFS构建，提供了结构化数据的可扩展分布式存储。自Bigtable论文发表之后，很快开源的HBase被实现出来，此后更是与Amazon的Dynamo一块引领了NoSQL系统的潮流，之后各种NoSQL系统如雨后春笋般出现在各大互联网公司及开源领域。此外在tablet-server中采用的LSM-Tree存储结构，使得这种在1996年就被提出的模型被重新认识，并广泛应用于各种新的存储系统实现中，成为与传统关系数据库中的B树并驾齐驱的两大模型。</p>\n<p>如果说MapReduce代表着新的分布式计算模型的开端的话，Bigtable则代表着新的分布式存储系统的开端。自此之后在分布式计算存储领域，Google不断地推陈出新，发表了很多新的计算和存储系统，如上图中所示。在继续介绍这些新的计算存储系统之前，我们回到图的底层，关注下基础设施方面的一些系统。</p>\n</li>\n</ol>\n<h3 id=\"2-2-基础设施\"><a href=\"#2-2-基础设施\" class=\"headerlink\" title=\"2.2 基础设施\"></a>2.2 基础设施</h3><ol start=\"6\">\n<li><p><a href=\"http://research.google.com/archive/chubby-osdi06.pdf\">The Chubby lock service for loosely-coupled distributed systems</a>(OSDI06).以文件系统接口形式提供的分布式锁服务，帮助开发者简化分布式系统中的同步和协调工作，比如进行Leader选举。除此之外，这篇文章一个很大的贡献应该是将Paxos应用于工业实践，并极大地促进了Paxos的流行，从这个时候开始Paxos逐渐被更多地工业界人士所熟知并应用在自己的分布式系统中。此后Google发表的其他论文中也不止一次地提到Paxos，像MegaStore/Spanner/Mesa都有提及。此文作者Mike Burrows加入Google之前也是在DEC工作，在DEC的时候他还是AltaVista搜索引擎的主要设计者。</p>\n</li>\n<li><p><a href=\"https://research.google.com/pubs/pub43438.html\">Borg</a>(Eurosys15) <a href=\"https://ai.google/research/pubs/pub41684\">Omega</a>(Eurosys13) <a href=\"https://kubernetes.io/\">Kubernetes</a>.Borg是Google内部的集群资源管理系统，大概诞生在2003-2004年，在Borg之前Google通过两个系统Babysitter和Global Work Queue来分别管理它的在线服务和离线作业，而Borg实现了两者的统一管理。直到15年Google才公布了Borg论文，在此之前对外界来说Borg一直都是很神秘的存在。而Omega主要是几个博士生在Google做的研究型项目，最终并没有实际大规模上线，其中的一些理念被应用到Borg系统中。<em>注：Borg这个名字源自于&lt;&lt;星际迷航&gt;&gt;里的博格人，博格人生活在银河系的德尔塔象限，是半有机物半机械的生化人。博格个体的身体上装配有大量人造器官及机械，大脑为人造的处理器。博格人是严格奉行集体意识的种族，从生理上完全剥夺了个体的自由意识。博格人的社会系统由“博格集合体”组成，每个集合体中的个体成员被称为“Drone”。集合体内的博格个体通过某种复杂的子空间通信网络相互连接。在博格集合体中，博格个体没有自我意识，而是通过一个被称为博格女皇（Borg Queen）的程序对整个集合体进行控制。</em></p>\n<p>在2014年中的时候，Google启动了Kubernetes(Borg的开源版本)。2015年，Kubernetes 1.0 release，同时Google与Linux基金会共同发起了CNCF。2016年，Kubernates逐渐成为容器编排管理领域的主流。提到Kubernates，需要介绍下著名的分布式系统专家Eric Brewer，伯克利教授&amp;Google infrastructure VP，互联网服务系统早期研究者。早在1995年他就和Paul Gauthier创立了Inktomi搜索引擎(2003年被Yahoo!收购，李彦宏曾在这家公司工作)，此时距离Google创立还有3年。之后在2000年的PODC上他首次提出了CAP理论，2012年又对CAP进行了<a href=\"http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed\">回顾</a>。2011年他加入了Google，目前在负责推动Kubernetes的发展。</p>\n</li>\n<li><p><a href=\"http://www.e-wilkes.com/john/papers/2013-EuroSys-CPI2.pdf\">CPI2: CPU performance isolation for shared compute clusters</a>(Eurosys13).通过监控CPI(Cycles-Per-Instruction)指标，结合历史运行数据进行分析预测找到影响系统性能的可疑程序，限制其CPU使用或进行隔离/下线，避免影响其他关键应用。本文也从一个侧面反映出，为了实现离线在线混布Google在多方面所做的努力和探索，尤其是在资源隔离方面。具体实现中，每台机器上有一个守护进程负责采集本机上运行的各个Job的CPI数据(通过采用计数模式/采样等方法降低开销，实际CPU开销小于0.1%)，然后发送到一个中央的服务器进行聚合，由于集群可能是异构的，每个Job还会根据不同的CPU类型进行单独聚合，最后把计算出来的CPI数据的平均值和标准差作为CPI spec。结合CPI历史记录建立CPI预测模型，一旦出现采样值偏离预测值的异常情况，就会记录下来，如果异常次数超过一定阈值就启动相关性分析寻找干扰源，找到之后进行相应地处理(限制批处理作业的CPU使用/调度到单独机器上等)。讲到这里，不仅让我们联想到今天大火的AIOPS概念，而很久之前Google已经在生产系统上使用类似技术。不过在论文发表时，Google只是打开了CPI2的监控功能，实际的自动化处理还未在生产系统中打开。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub36575\">GOOGLE-WIDE PROFILING:A CONTINUOUS PROFILING </a><a href=\"https://ai.google/research/pubs/pub36575\">INFRASTRUCTURE FOR DATA CENTERS</a>(IEEE Micro10).Google的分布式Profiling基础设施，通过收集数据中心的机器上的各种硬件事件/内核事件/调用栈/锁竞争/堆内存分配/应用性能指标等信息，通过这些信息可以为程序性能优化/Job调度提供参考。为了降低开销，采样是在两个维度上进行，首先是在整个集群的机器集合上采样同一时刻只对很少一部分机器进行profiling，然后在每台机器上再进行基于事件的采样。底层通过OProfile采集系统硬件监控指标(比如CPU周期/L1 L2 Cache Miss/分支预测失败情况等)，通过GPerfTools采集应用程序进程级的运行指标(比如堆内存分配/锁竞争/CPU开销等)。收集后的原始采样信息会保存在GFS上，但是这些信息还未与源代码关联上，而部署的binary通常都是去掉了debug和符号表信息，采用的解决方法是为每个binary还会保存一个包含debug信息的未被strip的原始binary，然后通过运行MapReduce Job完成原始采样信息与源代码的关联。为了方便用户查询，历史Profiling数据还会被加载到一个分布式数据库中。通过这些Profiling数据，除了可以帮助应用理解程序的资源消耗和性能演化历史，还可以实现数据驱动的数据中心设计/构建/运维。</p>\n</li>\n<li><p><a href=\"http://research.google.com/pubs/archive/36356.pdf\">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</a>(Google TR10).Google的分布式Tracing基础设施。Dapper最初是为了追踪在线服务系统的请求处理过程。比如在搜索系统中，用户的一个请求在系统中会经过多个子系统的处理，而且这些处理是发生在不同机器甚至是不同集群上的，当请求处理发生异常时，需要快速发现问题，并准确定位到是哪个环节出了问题，这是非常重要的，Dapper就是为了解决这样的问题。对系统行为进行跟踪必须是持续进行的，因为异常的发生是无法预料的，而且可能是难以重现的。同时跟踪需要是无所不在，遍布各处的，否则可能会遗漏某些重要的点。基于此Dapper有如下三个最重要的设计目标：低的额外开销，对应用的透明性，可扩展。同时产生的跟踪数据需要可以被快速分析，这样可以帮助用户实时获取在线服务状态。</p>\n</li>\n<li><p><a href=\"http://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf\">B4: Experience with a Globally-Deployed Software Defined WAN</a>(Sigcomm13).Google在全球有几十个数据中心，这些数据中心之间通常通过2-3条专线与其他数据中心进行连接。本文描述了Google如何通过SDN/OpenFlow对数据中心间的网络进行改造，通过对跨数据中心的流量进行智能调度，最大化数据中心网络链路的利用率。Google通过强大的网络基础设施，使得它的跨越全球的数据中心就像一个局域网，从而为后续很多系统实现跨数据中心的同步复制提供了网络层面的保障。</p>\n</li>\n</ol>\n<h3 id=\"2-3-计算分析系统\"><a href=\"#2-3-计算分析系统\" class=\"headerlink\" title=\"2.3 计算分析系统\"></a>2.3 计算分析系统</h3><p>自MapReduce之后，Google又不断地开发出新的分布式计算系统，一方面是为了提供更易用的编程接口(比如新的DSL/SQL语言支持)，另一方面是为了适应不同场景(图计算/流计算/即席查询/内存计算/交互式报表等)的需求。</p>\n<ol start=\"12\">\n<li><p><a href=\"http://cloud.pubs.dbs.uni-leipzig.de/sites/cloud.pubs.dbs.uni-leipzig.de/files/Pike2005InterpretingthedataParallelanalysiswithSawzall.pdf\">Interpreting the Data: Parallel Analysis with Sawzall</a>(Scientific Programming05).Google为了简化MapReduce程序的编写，而提出的一种新的DSL。后来Google又推出了Tenzing/Dremel等数据分析系统，到了2010年就把Sawzall给开源了，项目主页：<a href=\"http://code.google.com/p/szl/%E3%80%82%E8%99%BD%E7%84%B6%E4%B8%8ETenzing/Dremel%E7%9B%B8%E6%AF%94%EF%BC%8C\">http://code.google.com/p/szl/。虽然与Tenzing/Dremel相比，</a> Sawzall所能做的事情还是比较有限，但是它是最早的，同时作为一种DSL毕竟还是要比直接写MapReduce job要更易用些。</p>\n<p>本文第一作者Rob Pike，当今世界上最著名的程序员之一，&lt;&lt;Unix编程环境&gt;&gt; &lt;&lt;程序设计实践&gt;&gt;作者。70年代就加入贝尔实验室，跟随Ken Thompson&amp;DMR(二人因为发明Unix和C语言共同获得1983年图灵奖)参与开发了Unix，后来又跟Ken一块设计了UTF-8。2002年起加入Google，之后搞了Sawzall，目前跟Ken Thompson一块在Google设计开发Go语言。</p>\n</li>\n<li><p><a href=\"http://pages.cs.wisc.edu/~akella/CS838/F12/838-CloudPapers/FlumeJava.pdf\">FlumeJava: Easy, Efficient Data-Parallel Pipelines</a>(PLDI10).由于实际的数据处理中，通常都不是单个的MapReduce Job，而是多个MapReduce Job组成的Pipeline。为了简化Pipleline的管理和编程，提出了FlumeJava框架。由框架负责MapReduce Job的提交/中间数据管理，同时还会对执行过程进行优化，用户可以方便地对Pipeline进行开发/测试/运行。另外FlumeJava没有采用新的DSL，而是以Java类库的方式提供给用户，用户只需要使用Java语言编写即可。</p>\n</li>\n<li><p><a href=\"https://kowshik.github.io/JPregel/pregel_paper.pdf\">Pregel: A System for Large-Scale Graph Processing</a>(SIGMOD10).Google的图处理框架。Pregel这个名称是为了纪念欧拉，在他提出的格尼斯堡七桥问题中，那些桥所在的河就叫Pregel，而正是格尼斯堡七桥问题导致了图论的诞生。最初是为了解决PageRank计算问题，由于MapReduce并不适于这种场景，所以需要发展新的计算模型去完成这项计算任务，在这个过程中逐步提炼出一个通用的图计算框架，并用来解决更多的问题。核心思想源自BSP模型，这个就更早了，是在上世纪80年代由Leslie Valiant(2010年图灵奖得主)提出，之后在1990的Communications of the ACM 上，正式发表了题为A bridging model for parallel computation的文章。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub36632\">Dremel: Interactive Analysis of Web-Scale Datasets</a>(VLDB10).由于MapReduce的延迟太大，无法满足交互式查询的需求，Google开发了Dremel系统。Dremel主要做了三件事：</p>\n<ul>\n<li><p>将嵌套记录转换为列式存储，并提供快速的反向组装</p>\n</li>\n<li><p>类sql的查询语言</p>\n</li>\n<li><p>类搜索系统的查询执行树</p>\n</li>\n</ul>\n<p>通过列式存储降低io，将速度提高一个数量级，这类似于诸如Vertica这样的列存式数据库，与传统行式存储不同，它们只需要读取查询语句中真正必需的那些字段数据；通过类搜索系统的查询执行系统取代mr(MapReduce)，再提高一个数量级。它类似于Hive，应该说查询层像Hive，都具有类似于SQL的查询语言，都可以用来做数据挖掘和分析；但hive是基于mr，所以实时性要差，Dremel则由于它的查询执行引擎类似于搜索服务系统，因此非常适合于交互式的数据分析方式，具有较低的延迟，但是通常数据规模要小于mr；而与传统数据库的区别是，它具有更高的可扩展性和容错性，结构相对简单，可以支持更多的底层存储方式。其中的数据转化与存储方式，巧妙地将Protobuf格式的嵌套记录转换成了列式存储，同时还能够快速的进行重组，是其比较独特的一点。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub37200\">Tenzing A SQL Implementation On The MapReduce Framework</a>(VLDB11).Tenzing是一个建立在MapReduce之上的用于Google数据的ad hoc分析的SQL查询引擎。Tenzing提供了一个具有如下关键特征的完整SQL实现(还具有几个扩展)：异构性，高性能，可扩展性，可靠性，元数据感知，低延时，支持列式存储和结构化数据，容易扩展。Tenzing的发表算是很晚的了，与之相比Facebook在VLDB09上就发表了Hive的论文。与开源系统Hive的优势在于它跟底层所依赖的MapReduce系统都是一个公司内的产品，因此它可以对MapReduce做很多改动，以满足Tenzing某些特殊性的需求，最大化Tenzing的性能。 </p>\n</li>\n<li><p><a href=\"http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf\">PowerDrill：</a><a href=\"http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf\">Processing a Trillion Cells per Mouse Click</a>(VLDB12).Google推出的基于内存的列存数据库，该系统在2008年就已经在Google内部上线。与Dremel相比虽然都是面向分析场景，但是PowerDrill主要面向的是少量核心数据集上的多维分析，由于数据集相对少同时分析需求多所以可以放到内存，在把数据加载到内存分析之前会进行复杂的预处理以尽量减少内存占用。而Dremel则更加适合面向大量数据集的分析，不需要把数据加载到内存。主要采用了如下技术进行加速和内存优化：</p>\n<ol>\n<li>导入时对数据进行分区，然后查询时根据分区进行过滤尽量避免进行全量扫描 </li>\n<li>底层数据采用列式存储，可以跳过不需要的列 </li>\n<li>采用全局/chunk两级字典对列值进行编码，一方面可以加速计算(chunk级的字典可以用来进行针对用户查询的chunk过滤，编码后的value变成了更短的int类型与原始值相比可以更快速的进行相关运算)，另一方面还可以达到数据压缩的目的，与通用压缩算法相比采用这种编码方式的优点是：读取时不需要进行解压这样的预处理，同时支持随机读取 </li>\n<li>编码后的数据进行压缩还可以达到1.4-2倍的压缩比，为了避免压缩带来的性能降低，采用了压缩与编码的混合策略，对数据进行分层，最热的数据是解压后的编码数据，然后稍冷的数据也还会进行压缩 </li>\n<li>对数据行根据partition key进行重排序，提高压缩比 </li>\n<li>查询分布式执行，对于同一个查询会分成多个子查询并发给多个机器执行，同时同一个子查询会发给两台机器同时执行，只要有一个返回即可，但是另一个最终也要执行完以进行数据预热</li>\n</ol>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub41378\">MillWheel: Fault-Tolerant Stream Processing at Internet Scale</a>(VLDB13).Google的流计算系统，被广泛应用于构建低延迟数据处理应用的框架。用户只需要描述好关于计算的有向图，编写每个节点的应用程序代码。系统负责管理持久化状态和连续的记录流，同时将一切置于框架提供的容错性保证之下。虽然发布的比较晚，但是其中的一些机制(比如Low Watermark)被借鉴到开源的 <strong>Flink</strong> 系统中。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub42851\">Mesa: Geo-Replicated, Near Real-Time, Scalable Data Warehousing</a>(VLDB14).Google的跨数据中心数据仓库系统，主要是为了满足广告业务的场景需求，随着广告平台的不断发展，客户对各自的广告活动的可视化提出了更高的要求。对于更具体和更细粒度的信息需求，直接导致了数据规模的急速增长。虽然Google已经把核心广告数据迁移到了Spanner+F1上，但是对于这种广告效果实时统计需求来言，由于涉及非常多的指标这些指标可能是保存在成百上千张表中，同时这些指标与用户点击日志相关通常对应着非常大的峰值访问量，超过了Spanner+F1这样的OLTP系统的处理能力。为此Google构建了Mesa从而能处理持续增长的数据量，同时它还提供了一致性和近实时查询数据的能力。具体实现方法是：将增量更新进行batch，提交者负责为增量数据分配版本号，利用Paxos对跨数据中心的版本数据库进行更新，基于MVCC机制提供一致性访问。底层通过Bigtable存储元数据，通过<a href=\"http://static.googleusercontent.com/media/research.google.com/en/us/university/relations/facultysummit2010/storage_architecture_and_challenges.pdf\">Colossus</a>来存储数据文件，此外还利用<a href=\"http://en.wikipedia.org/wiki/MapReduce\">MapReduce</a>来对连续增量数据进行合并，而为Mesa提供增量更新的上游应用通常是一个流计算系统。可以看到Mesa系统本身结合了批量处理与实时计算，还要满足OLTP+OLAP的场景需求，同时采用了分层架构实现存储计算的分离。既像一个分布式数据库，又像一个大数据准实时处理系统。</p>\n</li>\n<li><p><a href=\"https://research.google.com/pubs/archive/45394.pdf\">Shasta: Interactive Reporting At Scale</a>(SIGMOD16).Google的交互式报表系统，也主要是为了满足广告业务的场景需求，与Mesa的区别在于Shasta是构建于Mesa之上的更上层封装。主要为了解决如下挑战：1)用户查询请求的低延迟要求 2)底层事务型数据库的schema与实际展现给用户的视图不友好，报表系统的开发人员需要进行复杂的转换，一个查询视图底层可能涉及多种数据源(比如F1/Mesa/Bigtable等) 3)数据实时性需求，用户修改了广告预算后希望可以在新的报表结果中可以马上体现出来。为了解决这些问题，在F1和Mesa系统之上构建了Shasta。主要从两个层面进行解决：语言层面，在SQL之上设计了一种新的语言RVL(Relational View Language)，通过该语言提供的机制(自动聚合/子句引用/视图模板/文本替换等)可以比SQL更加方便地描述用户的查询视图，RVL编译器会把RVL语句翻译成SQL，在这个过程中还会进行查询优化；系统层面，直接利用了F1的分布式查询引擎，但是进行了一些扩展比如增加单独的UDF server让UDF的执行更加安全，为了确保实时性需要直接访问F1，但是为了降低延迟在F1之上增加了一个只读的分布式Cache层。</p>\n</li>\n<li><p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45390.pdf\">Goods: Organizing Google’s Datasets</a>(SIGMOD16).Google的元数据仓库Goods(Google DataSet Search)。Google内部积累了大量的数据集，而这些数据散落在各种不同的存储系统中(GFS/Bigtable/Spanner等)。面临的问题就是如何组织管理这些数据，使得公司内部工程师可以方便地找到他们需要的数据，实现数据价值的最大化。Google的做法很多方面都更像一个小型的搜索引擎，不过在这个系统里被索引的数据由网页变成了Google内部生产系统产生的各种数据，用户变成了内部的数据开发人员。整个做法看起来要费劲很多，很大程度上是因为内部系统众多但是没有一个统一的入口平台，只能采用更加自动化(不依赖人和其他系统)的做法：要爬取各个系统的日志，通过日志解析数据的元信息(这个过程中还是比较费劲的，比如为了确定数据的Schema，要把Google中央代码库里的所有protobuf定义拿过来试看哪个能匹配上)，然后把这些信息(大小/owner/访问权限/时间戳/文件格式/上下游/依赖关系/Schema/内容摘要等)保存一个中央的数据字典中(存储在Bigtable中目前已经索引了260亿条数据集信息)，提供给内部用户查询。这中间解决了如下一些问题和挑战：Schema探测/数据自动摘要/血缘分析/聚类/搜索结果ranking/过期数据管理/数据备份等。本文可以让我们一窥Google是如何管理内部数据资产的，有哪些地方可以借鉴。</p>\n</li>\n</ol>\n<h2 id=\"2-4-存储-amp-数据库\"><a href=\"#2-4-存储-amp-数据库\" class=\"headerlink\" title=\"2.4 存储&amp;数据库\"></a>2.4 存储&amp;数据库</h2><ol start=\"22\">\n<li><p><a href=\"https://ai.google/research/pubs/pub36726\">Percalator:</a><a href=\"https://ai.google/research/pubs/pub36726\">Large-scale Incremental Processing Using Distributed Transactions and Notifications</a>(OSDI10).基于Bigtable的增量索引更新系统，Google新一代索引系统”咖啡因“实时性提升的关键。此前Google的索引构建是基于MapReduce，全量索引更新一次可能需要几天才能完成，为了提高索引更新的实时性Google构建了增量更新系统。Bigtable只支持单行的原子更新，但是一个网页的更新通常涉及到其他多个网页(网页间存在链接关系比如更新的这个网页上就有其他网页的锚文本)的更新。为了解决这个问题，Percolator在Bigtable之上通过两阶段提交实现了跨行事务。同时网页更新后还要触发一系列的处理流程，Percolator又实现了类似于数据库里面的触发器机制，当Percolator中的某个cell数据发生变化，就触发应用开发者指定的Observer程序。此外开源分布式数据库TiDB就参考了Percalator的事务模型。</p>\n</li>\n<li><p><a href=\"http://cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf\">Megastore: Providing Scalable, Highly Available Storage for Interactive Services</a>(CIDR11).Google在2008年的SIGMOD上就介绍了Megastore，但是直到2011年才发表完整论文。Megastore本身基于Bigtable，在保留可扩展/高性能/低延迟/高可用等优点的前提下，引入了传统关系数据库中的很多概念比如关系数据模型/事务/索引，同时基于Paxos实现了全球化同步复制，可以说是最早的分布式数据库实现了。它本身也提供了分布式事务支持，但是论文中并没有描述相关实现细节，猜测应该跟Percalator类似。虽然此后被Spanner所替代，但是它的继任者Spanner很多特性都是受它影响。</p>\n</li>\n<li><p><a href=\"http://research.google.com/archive/spanner-osdi2012.pdf\">Spanner: Google’s Globally-Distributed Database</a>(OSDI12).2009年Jeff Dean的一次分享(<a href=\"http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\">Designs, Lessons and Advice from Building Large Distributed)</a>中首次提到Spanner，也是过了3年到了2012年才发表完整论文。做为Megastore的继任者，它主要解决了Megastore存在的几个问题：性能、查询语言支持弱、分区不灵活。另外一个重要的创新是基于原子钟和GPS硬件实现了TrueTime API，并基于这个API实现了更强的一致性保证。除此之外其他部分则与Megastore非常类似，但是在文中对其分布式事务的实现细节进行了描述。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub41344\">F1: A Distributed SQL Database That Scales</a>(VLDB13).基于Spanner实现的分布式SQL数据库，主要实现了一个分布式并行查询引擎，支持一致性索引和非阻塞的在线Schema变更。与Spanner配合替换掉了Google核心广告系统中的MySQL数据库。F1这个名字来自生物遗传学，代指杂交一代，表示它结合了传统关系数据库和NoSQL系统两者的特性。</p>\n</li>\n</ol>\n<h3 id=\"2-5-AI\"><a href=\"#2-5-AI\" class=\"headerlink\" title=\"2.5 AI\"></a>2.5 AI</h3><ol start=\"26\">\n<li><p><a href=\"https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf\">TensorFlow: A System for Large-Scale Machine Learning</a>(OSDI16).</p>\n</li>\n<li><p><a href=\"http://www.cs.toronto.edu/~pekhimenko/courses/csc2231-f17/Papers/tpu.pdf\">In-Datacenter Performance Analysis of a Tensor Processing Unit</a>(SIGARCH17).Google TPU。与往常一样，在Google公布此文的时候，新一代更强大的TPU已经开发完成。由于本文更偏重硬件，具体内容没有看。但是其中的第四作者David Patterson还是值得特别来介绍一下，因为在体系结构领域的贡献(RISC、RAID、体系结构的量化研究方法)，他和John Hennessy共同获得了2017年的图灵奖：<a href=\"http://www.edu.cn/ke_yan_yu_fa_zhan/zui_jin_geng_xin/201803/t20180322_1591118_2.shtml\">相关新闻</a>。2016年加入Google就是去做TPU的；2018年，与他共同获得图灵奖的John Hennessy(斯坦福第十任校长、MIPS公司创始人)被任命为Google母公司Alphabet的新任主席。</p>\n</li>\n</ol>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h2><p>在前面两节我们对过去20年Google在分布式系统领域的经典论文进行了系统地梳理和介绍，通过这个过程我们可以看到：</p>\n<p>每当Google发表一篇相关论文，通常都会产生一个与之对应的开源系统。比如GFS/HDFS，MapReduce/Hadoop MapReduce，BigTable/HBase，Chubby/ZooKeeper，FlumeJava/Plume，Dapper/Zipkin等等。如果把数据中心看做一台计算机的话，在数据中心之上的各种分布式系统就像当年的Unix和C语言，Hadoop及各种开源系统就像当年的Linux，而开启这个时代的人们尤其是Jeff Dean/Sanjay Ghemawat就像当年的Ken Thompson/Dennis M. Ritche，Hadoop创始人Doug Cutting就像当年的Linus Torvalds。Ken Thompson/Dennis M. Ritche因为Unix和C方面的贡献获得1983年图灵奖，或许在将来的某一天Jeff Dean/Sanjay Ghemawat也能摘得桂冠。</p>\n<p>观察上图，我们还可以看到随着时间的推进，Google自底向上地逐步构建出一个庞大的软硬件基础设施Stack，同时每个系统内部也在不断地自我进化。而不同的系统之间，可能是互补关系，可能是继承关系，可能是替换关系。通过对这个演化过程的观察，我们也总结出一些内在的趋势和规律。论文本身固然重要，但是这些趋势和规律也很有意义。</p>\n<h3 id=\"3-1-两个维度，三个层次\"><a href=\"#3-1-两个维度，三个层次\" class=\"headerlink\" title=\"3.1 两个维度，三个层次\"></a>3.1 两个维度，三个层次</h3><p>如题”他山之石”，人们常说不能总是低头拉车，还要注意抬头看路。那么应该如何走出去看看，看什么呢？我们可以将其划分为两个维度(时间和空间)，三个层次(架构、细节和实现)，如下图：</p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817180305.png\" alt=\"img\"></p>\n<p>两个维度：时间维度上可以分为过去，现在和未来。Google的那些论文就属于未来，看看它们，那可能是未来要做的，当然慢慢地它们也会成为过去；经典的理论的东西，放到过去这个维度，它们是非常重要的，这决定了对系统理解的深度和高度；现在，就是正在做的或者符合目前实际环境可以直接借鉴的。人们有时候往往喜欢抓着未来，总是忽略了过去和现在，又或者是仅看着当前，忽略了未来和过去。空间维度上可以分为上层和底层，上层是指依赖于我们自己系统的那些应用，底层则指我们的系统本身底层所依赖的那些。有时候为了继续前进，需要跳出当前的框框，从多个维度上去学习，通过不断学习反过来进一步促进当前系统的演化。</p>\n<p>三个层次：如果要了解其他系统，可以从三个层次去学习，先大概了解架构，然后深入到一些具体的细节问题，最后如果有时间还可以继续深入到代码级别。结合本文的第一张图来说就是：可以通过Google论文了解整体架构，然后通过开源系统相关wiki或文档可以了解到更细节的一些东西，最后结合开源系统还可以看到实际的代码实现。</p>\n<h3 id=\"3-2-合久必分，分久必合\"><a href=\"#3-2-合久必分，分久必合\" class=\"headerlink\" title=\"3.2 合久必分，分久必合\"></a>3.2 合久必分，分久必合</h3><h4 id=\"3-2-1-分\"><a href=\"#3-2-1-分\" class=\"headerlink\" title=\"3.2.1 分\"></a>3.2.1 分</h4><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817180548.png\" alt=\"img\"></p>\n<p>实例：</p>\n<p>1.越来越多的计算被Offload到非CPU的计算单元：Google TPU</p>\n<p>2.<a href=\"http://cs.brown.edu/~ugur/fits_all.pdf\">“One Size Fits All”: An Idea Whose Time Has Come and Gone</a>：各种新的计算模型如Pregel MillWheel Dremel PowerDrill Mesa</p>\n<p>3.计算存储分离：Mesa CFS+Spanner+F1</p>\n<h4 id=\"3-2-1-合\"><a href=\"#3-2-1-合\" class=\"headerlink\" title=\"3.2.1 合\"></a>3.2.1 合</h4><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817180736.png\" alt=\"img\"></p>\n<p>实例：</p>\n<p>1.分布式数据库：从MegaStore开始到后来的Spanner F1，不断弥补着NoSQL的不足。同时Spanner自身仍在不断演化，开始具备更加丰富的SQL和OLAP支持。</p>\n<p>2.流处理和批处理的统一：Cloud DataFlow完成了编程接口层面的统一，而Mesa则解决了数据层面的结合。</p>\n<p>3.在线离线混部：Borg。</p>\n<p>4.软硬件结合：整个基础设施，就是在解决一个软件(分布式系统)如何适配新硬件(面向互联网设计的数据中心)的问题。通过上层分布式系统屏蔽底层数据中心细节，实现”Datacenter As a Computer“。</p>\n<h3 id=\"3-3-理论与实践相结合\"><a href=\"#3-3-理论与实践相结合\" class=\"headerlink\" title=\"3.3 理论与实践相结合\"></a>3.3 理论与实践相结合</h3><h4 id=\"3-3-1-”新瓶装旧酒“\"><a href=\"#3-3-1-”新瓶装旧酒“\" class=\"headerlink\" title=\"3.3.1 ”新瓶装旧酒“\"></a>3.3.1 ”新瓶装旧酒“</h4><p>纵观过去的20年，我们可以看到如果单纯从理论上看，Google的这些论文并没有提出新理论。它们所依赖的那些基础理论(主要来自分布式系统和关系数据库领域)，基本上都是上个世纪70/80年代就已经提出的。而Google的系统只是把这些经典理论结合自己的业务场景(互联网搜索和广告)，进行了实践并发扬广大使之成为业界潮流。看起来虽然是”新瓶装旧酒”，但是却不能小觑这一点，因为旧酒在新瓶里可能会产生新的化学反应，进而创造出新的完全不同的“酒”。如果忽略了它，当新”酒“成为新浪潮之时，就再也无法站立在浪潮之巅。</p>\n<h4 id=\"3-3-2-两个阶段\"><a href=\"#3-3-2-两个阶段\" class=\"headerlink\" title=\"3.3.2 两个阶段\"></a>3.3.2 两个阶段</h4><p>如果从理论与实践的这个角度来看，我们可以把过去的20年分成两个阶段：前十年主要解决的是可扩展性问题，理论主要源自分布式系统领域；后十年在解决了可扩展问题后，开始考虑易用性问题，提供更加方便的编程接口和一致性模型，这个阶段更多地是借鉴传统关系数据库领域的一些做法。再回到当下，从AI的再度流行中我们依然可以看到其所依赖的理论基础，依然是在上个世纪就已经提出的，而今天在互联网时代大规模的数据和计算能力这个背景下，重新焕发了生命。在解决完可扩展易用性问题后，使得可以对大规模数据进行方便地存储计算和查询之后，下一个十年人们开始关注如何进一步挖掘数据，如何借助这些数据去完成以前未完成的构想，这个过程中仍在不断学习应用前人的经典理论。</p>\n<h4 id=\"3-3-3-实践联系理论\"><a href=\"#3-3-3-实践联系理论\" class=\"headerlink\" title=\"3.3.3 实践联系理论\"></a>3.3.3 实践联系理论</h4><p>从另一个方面来说，如果要真正理解这些论文，除了论文本身内容之外，也还需要去了解传统的分布式系统和关系数据库理论。比如Spanner那篇论文，如果只看论文本身，没有关系数据库和分布式系统理论基础的话估计很难看懂。有时候可能还需要多看看论文的参考文献，之后再看才会理解一些。很多研究领域的大牛们，经常会调侃做工程的家伙们，他们说”这些家伙看着就像生活在5,60年代的老家伙“，为什么呢，因为这些家伙们总是用一些很丑陋的方法去解决一个科学家们早在几十年前就给出了完美解决方案的问题，但是这些家伙看起来对此一无所知。当然了，做工程的也会挖苦下那些研究家们老是指指点点，从来不肯俯下身子来解决实际问题。但是实际上，如果你是做工程的，那就应该多看看研究家们的成果，其实很多问题的确是人家n多年前就已经提出并很好解决了的。如果是做研究的，那就多接触下工程实践，理解下现实需求，弥补下理论与实践的差距。</p>\n<h4 id=\"3-3-4-分布式理论实践\"><a href=\"#3-3-4-分布式理论实践\" class=\"headerlink\" title=\"3.3.4 分布式理论实践\"></a>3.3.4 分布式理论实践</h4><p>具体到分布式系统领域，我们可以发现正是通过与实践相结合，理论才逐渐赢得科学界和工业界的重视。在此之前，分布式理论研究一直处于非常尴尬的状态，与实践的隔阂尤其严重，很多研究工作局限在研究领域，严重脱离现实世界。关于这一点从图灵奖的颁发上可以看出来，自1966年图灵奖首次颁发以来，直到2013年Lamport获奖之前，可以说还没有一个人因为在分布式系统领域的贡献而获得图灵奖。虽然有些获奖者的研究领域也涉及到分布式系统，但是他们获奖更多是因为在其他领域的贡献。而反观程序设计语言/算法/关系数据库等领域均有多人获奖，同时这些领域的研究成果早已被广泛应用在工业界，通过实践证明了其价值。可以说正是因为互联网的兴起，在Google等公司的分布式系统实践下，分布式理论逐渐被广泛应用到各个实际系统中，这也是 Lamport能够获得图灵奖的重要原因。</p>\n<h2 id=\"4-云计算的起源与发展\"><a href=\"#4-云计算的起源与发展\" class=\"headerlink\" title=\"4.云计算的起源与发展\"></a>4.云计算的起源与发展</h2><p>本节我们将跳出Google论文的范畴，以更广泛的视角看一下今天的云计算。下面更多的是描述一些历史，进行一些”考古”，希望这个过程可以带来更多的启发和思考。</p>\n<h3 id=\"4-1-从Google论文说起\"><a href=\"#4-1-从Google论文说起\" class=\"headerlink\" title=\"4.1 从Google论文说起\"></a>4.1 从Google论文说起</h3><h4 id=\"4-1-1-“冰山一角”\"><a href=\"#4-1-1-“冰山一角”\" class=\"headerlink\" title=\"4.1.1 “冰山一角”\"></a>4.1.1 “冰山一角”</h4><p>首先还是回到第一张图，我们把图缩小一下，并重点关注图的顶部。</p>\n<img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817181035.jpg\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<p>可以看到，在Google强大的软硬件基础设施之上，在其云平台上暴露给外部用户使用的则寥寥无几。这个场景就像我们看到了一座冰山，露在水面上的只有那一角。即便是已经开放给外部用户的Cloud Bigtable是2015年才发布的，此时距离Bigtable论文发表已经过了快10年。Cloud Spanner是2017年，也已经是论文发表5年之后。虽然在2008年就推出了GAE，但是也一直不温不火。</p>\n<p>将Google的这些系统与AWS的各种云产品对比一下，可以发现两者的出发点类似都是为了实现”Datacenter As a Computer“，但是目标用户不同。Google这些系统面向的是内部的搜索广告业务，而AWS则致力于让外部客户也能实现”Datacenter As a Computer“。就好比一个是面向大企业客户的国有大银行，一个是面向小微客户的普惠金融。从技术-&gt;产品-&gt;商品-&gt;服务的角度来看，Google在技术上做到了独步天下，但是要提供给外部客户后面的短板仍然需要补足。</p>\n<p>早在2011年，Google员工Amazon前员工Steve Yegge在G+上发表了一篇文章对Google和Amazon进行了有趣的对比：<a href=\"https://blog.csdn.net/maray/article/details/19553301\">Stevey’s Google Platforms Rant</a> ，<a href=\"https://news.cnblogs.com/n/120344/\">中文版</a>。其中非常重要的一点就是Amazon对于服务及服务化的重视。</p>\n<p>2015年Sundar Pichai成为Google新任CEO。进行了一系列调整，找来了VMware的联合创始人Diane Greene领导谷歌的企业及云业务，相关新闻：<a href=\"http://www.sohu.com/a/67216913_118794\">谷歌公有云GCP轰隆崛起？</a>，可以看到Google正在做出很多改变，开始将云计算作为公司重要战略。同时开源了很多技术如Kubernetes和TensorFlow，试图通过容器、CloudNative和AI等新兴领域实现弯道超车。</p>\n<h4 id=\"4-1-2-为啥要发论文\"><a href=\"#4-1-2-为啥要发论文\" class=\"headerlink\" title=\"4.1.2 为啥要发论文\"></a>4.1.2 为啥要发论文</h4><p>还有一个有趣的对比，可以看到在过去20年Google发表了非常多的论文来介绍它的内部系统，但是反观Amazon，对于它的云产品内部实现可以说介绍的非常少，相关论文只有寥寥几篇。</p>\n<p>对于Google来说，发表论文主要是为了增加个人和公司的业界影响力，便于赢得声誉吸引人才。当然Google内部同样有非常严格的保密机制，禁止员工向外界透露内部系统信息，除非获得了授权。通过前面的一些论文也可以看到，从系统做出来上线算，真正论文发表通常是5年之后的事情了，而发表的时候内部已经有下一代系统了。按照中国古话说”富贵不还乡，如锦衣夜行“，内部再牛逼别人看不到就没有存在感。</p>\n<p>反观Amazon，则没有这个苦恼，因为它云平台上的所有系统都是对外开放的，外面的人可以切实地感受到它的存在，大部分情况下都不需要通过论文来提升存在感。</p>\n<h3 id=\"4-2-“5朵云”的起源\"><a href=\"#4-2-“5朵云”的起源\" class=\"headerlink\" title=\"4.2 “5朵云”的起源\"></a>4.2 “5朵云”的起源</h3><p>IBM的CEO Thomas J. Watson在1943年说过这样一段话：”I think there is a world market for maybe five computers,” 后来在Cloud Computing概念提出后，逐步演变成5朵云的说法。</p>\n<h3 id=\"4-3-AWS\"><a href=\"#4-3-AWS\" class=\"headerlink\" title=\"4.3 AWS\"></a>4.3 AWS</h3><p>关于售卖计算能力给外部客户的想法最早源自2003年Benjamin Black和Chris Pinkham写的一篇报告中，这个想法引起了Jeff Bezos的兴趣。之后2004年就开干了，当时大家一致觉得Pinkham最适合去干这件事，但是他那个时候正想着回到他的家乡南非，于是Amazon就让他在南非开了新的办公室，在那里他们创建了EC2团队并开发出了EC2。Benjamin Black 在一篇文章(<a href=\"http://blog.b3k.us/2009/01/25/ec2-origins.html\">EC2 Origins</a>)中介绍了这段有趣的历史。</p>\n<p>2006年AWS正式上线了EC2和S3，自此拉开了云计算的序幕。其后续整个发展的详细历程可以参考：<a href=\"https://en.wikipedia.org/wiki/Timeline_of_Amazon_Web_Services\">Timeline of Amazon Web Services</a>。</p>\n<p>此外还有一个比较有意思的问题：<a href=\"https://www.zhihu.com/question/20058413/answer/325838352\">为什么 AWS 云计算服务是亚马逊先做出来，而不是 Google ？</a>其中有偶然也有必然，简要总结一下就是”天时、地利、人和“。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://www.gcppodcast.com/post/episode-46-borg-and-k8s-with-john-wilkes/\">https://www.gcppodcast.com/post/episode-46-borg-and-k8s-with-john-wilkes/</a></p>\n<p><a href=\"https://blog.risingstack.com/the-history-of-kubernetes/\">https://blog.risingstack.com/the-history-of-kubernetes/</a></p>\n<p><a href=\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/44843.pdf\">Borg, Omega, and Kubernetes</a></p>\n<p><a href=\"http://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/\">http://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)\">https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)</a></p>\n<p><a href=\"https://www.zhihu.com/question/35736161\">如何看待谷歌工程师透露谷歌有20亿行代码，相当于写40遍Windows？</a></p>\n<p><a href=\"https://www.oschina.net/translate/google-borg-twitter-mesos\">Return of the Borg: How Twitter Rebuilt Google’s Secret Weapon</a></p>\n<p><a href=\"http://www.infoq.com/cn/news/2014/08/google-data-warehouse-mesa\">http://www.infoq.com/cn/news/2014/08/google-data-warehouse-mesa</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Amazon_Web_Services\">https://en.wikipedia.org/wiki/Amazon_Web_Services</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Thomas_J._Watson\">https://en.wikipedia.org/wiki/Thomas_J._Watson</a></p>\n","site":{"data":{}},"abbrlink":"3HR80D1","excerpt":"Google论文、开源与云计算\n本文搬运自：https://zhuanlan.zhihu.com/p/85808754\n\n1.Google论文与开源\n自1998年成立，至今Google已走过20个年头。在这20年里，Google不断地发表一些对于自己来说已经过时甚至不再使用的技术的论文，但是发表之后总会有类似系统被业界实现出来，也足以说明google的技术至少领先业界数年。在Amazon不断引领全球云计算浪潮开发出一系列面向普罗大众的云产品的同时；Google也在不断引领构建着满足互联网时代海量数据的存储计算和查询分析需求的软硬件基础设施。\n\n本文对Google在这20年中发表的论文进行了一个","more":"<h1 id=\"Google论文、开源与云计算\"><a href=\"#Google论文、开源与云计算\" class=\"headerlink\" title=\"Google论文、开源与云计算\"></a>Google论文、开源与云计算</h1><blockquote>\n<p>本文搬运自：<a href=\"https://zhuanlan.zhihu.com/p/85808754\">https://zhuanlan.zhihu.com/p/85808754</a></p>\n</blockquote>\n<h2 id=\"1-Google论文与开源\"><a href=\"#1-Google论文与开源\" class=\"headerlink\" title=\"1.Google论文与开源\"></a>1.Google论文与开源</h2><p>自1998年成立，至今Google已走过20个年头。在这20年里，Google不断地发表一些对于自己来说已经过时甚至不再使用的技术的论文，但是发表之后总会有类似系统被业界实现出来，也足以说明google的技术至少领先业界数年。在Amazon不断引领全球云计算浪潮开发出一系列面向普罗大众的云产品的同时；Google也在不断引领构建着满足互联网时代海量数据的存储计算和查询分析需求的软硬件基础设施。</p>\n<p>本文对Google在这20年中发表的论文进行了一个简单的总结和整理，主要选择了分布式系统和并行计算领域相关的论文，其中内容涉及数据中心/计算/存储/网络/数据库/调度/大数据处理等多个方向。通过这样的一个总结，一方面可以一窥Google强大的软硬件基础设施，另一方面也可以为不同领域的开发人员提供一个学习的参考。可以通过这些文章去了解上层应用的架构设计和实现，进而可以更好的理解和服务于上层应用。同时这些系统中所采用的架构/算法/设计/权衡，本身也可以为我们的系统设计和实现提供重要的参考。</p>\n<p>通过Google论文可以了解到系统整体的架构，通过对应开源系统可以在代码层面进行学习。具体如下图(浅蓝色部分为Google论文/黄色为开源系统)：</p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817163733.jpg\" alt=\"img\"></p>\n<h2 id=\"2-Google论文简介\"><a href=\"#2-Google论文简介\" class=\"headerlink\" title=\"2.Google论文简介\"></a>2.Google论文简介</h2><p>下面来简要介绍下”那些年我们追过的Google论文”，由于篇幅有限主要讲下每篇论文的主要思路，另外可能还会介绍下论文作者及论文本身的一些八卦。深入阅读的话，可以直接根据下面的链接查看原文，另外很多文章网上已经有中文译文，也可以作为阅读参考。</p>\n<h3 id=\"2-1-起源\"><a href=\"#2-1-起源\" class=\"headerlink\" title=\"2.1 起源\"></a>2.1 起源</h3><ol>\n<li><p><a href=\"https://link.zhihu.com/?target=http://zoo.cs.yale.edu/classes/cs426/2012/bib/brin98theanatomy.pdf\">The anatomy of a large-scale hypertextual Web search engine</a>(1998).Google创始人Sergey Brin和Larry Page于1998年发表的奠定Google搜索引擎理论基础的原始论文。在上图中我们把它放到了最底层，在这篇论文里他们描述了最初构建的Google搜索引擎基础架构，可以说所有其他文章都是以此文为起点。此文对于搜索引擎的基本架构，尤其是Google使用的PageRank算法进行了描述，可以作为了解搜索引擎的入门文章。</p>\n</li>\n<li><p><a href=\"http://research.google.com/archive/googlecluster-ieee.pdf\">WEB SEARCH FOR A PLANET: THE GOOGLE CLUSTER ARCHITECTURE</a>(IEEE Micro03).描述Google集群架构最早的一篇文章，同时也应该是最被忽略的一篇文章，此文不像GFS MapReduce Bigtable那几篇文章为人所熟知，但是其重要性丝毫不亚于那几篇。这篇文章体现了Google在硬件方面的一个革命性的选择：在数据中心中使用廉价的PC硬件取代高端服务器。这一选择的出发点主要基于性价比，实际的需求是源于互联网数据规模之大已经不能用传统方法解决，但是这个选择导致了上层的软件也要针对性地进行重新的设计和调整。由于硬件可靠性的降低及数量的上升，意味着要在软件层面实现可靠性，需要采用多个副本，需要更加自动化的集群管理和监控。也是从这个时候开始，Google开始着眼于自己设计服务器以及数据中心相关的其他硬件，逐步从托管数据中心向自建数据中心转变。而Google之后实现的各种分布式系统，都可以看做是基于这一硬件选择做出的软件层面的设计权衡。</p>\n<p>再看下本文的作者：Luiz André Barroso/Jeff Dean/Urs Hölzle，除了Jeff Dean，其他两位也都是Google基础设施领域非常重要的人物。Urs Holzle是Google的第8号员工，最早的技术副总裁，一直在Google负责基础设施部门，Jeff Dean和Luiz Barroso等很多人都是他招进Google的，包括当前Google云平台的掌门人Diane Greene(VMWare联合创始人)据说也是在他的游说下才最终决定掌管GCP。Luiz Barroso跟Jeff Dean在加入Google以前都是在DEC工作，在DEC的时候他参与了多核处理器方面的工作，是Google最早的硬件工程师，在构建Google面向互联网时代的数据中心硬件基础设施中做了很多工作。到了2009年，Luiz André Barroso和Urs Hölzle写了一本书，书名就叫&lt;&lt;<a href=\"http://research.google.com/pubs/pub41606.html\">The Datacenter as a Computer</a>&gt;&gt;，对这些工作(数据中心里的服务器/网络/供电/制冷/能效/成本/故障处理和修复等)做了更详细的介绍。</p>\n</li>\n<li><p><a href=\"https://research.google.com/archive/gfs-sosp2003.pdf\">The Google File System</a>(SOSP03).Google在分布式系统领域发表的最早的一篇论文。关于GFS相信很多人都有所了解，此处不再赘言。今天Google内部已经进化到第二代GFS：Colossus，而关于Colossus目前为止还没有相关的论文，网上只有一些零散介绍：<a href=\"https://www.systutorials.com/3202/colossus-successor-to-google-file-system-gfs/\">Colossus</a>。简要介绍下本文第一作者Sanjay Ghemawat，在加入Google之前他也是在DEC工作，主要从事Java编译器和Profiling相关工作。同时在DEC时代他与Jeff Dean就有很多合作，而他加入Google也是Jeff Dean先加入后推荐他加入的，此后的很多工作都是他和Jeff Dean一块完成的，像后来的MapReduce/BigTable/Spanner/TensorFlow，在做完Spanner之后，Jeff Dean和Sanjay开始转向构建AI领域的大规模分布式系统。2012年，Jeff Dean和Sanjay共同获得了ACM-Infosys Foundation Award。此外Google的一些开源项目像<strong>LevelDB</strong>/GPerftools/TCMalloc等，都可以看到Sanjay的身影。</p>\n</li>\n<li><p><a href=\"https://research.google.com/archive/mapreduce-osdi04.pdf\">MapReduce: Simplified Data Processing on Large Clusters</a>(OSDI04).该文作者是Jeff Dean和Sanjay Ghemawat，受Lisp语言中的Map Reduce原语启发，在大规模分布式系统中提供类似的操作原语。在框架层面屏蔽底层分布式系统实现，让用户只需要关注如何编写自己的Mapper和Reducer实现，从而大大简化分布式编程。时至今日MapReduce已经成为大规模数据处理中广泛应用的一种编程模型，虽然之后有很多新的编程模型不断被实现出来，但是在很多场景MapReduce依然发挥着不可替代的作用。</p>\n<p>而自2004年提出之后，中间也出现过很多关于MapReduce的争论，最著名的应该是2008年1月8号David J. DeWitt和Michael Stonebraker发表的一篇文章&lt;&lt; <a href=\"http://databasecolumn.vertica.com/database-innovation/mapreduce-a-major-step-backwards/\">MapReduce: A major step backwards</a>&gt;&gt;，该文发表后引起了广泛的争论。首先介绍下这两位都是数据库领域的著名科学家，David J. DeWitt，ACM Fellow，2008年以前一直在大学里搞研究，在并行数据库领域建树颇多，之后去了微软在威斯康辛的Jim Gray系统实验室。Michael Stonebraker(2014图灵奖得主)，名头要更大一些，在1992 年提出对象关系数据库。在加州伯克利分校计算机教授达25年，在此期间他创作了Ingres, Illustra, Cohera, StreamBase Systems和Vertica等系统。其中Ingres是很多现代RDBMS的基础，比如Sybase、Microsoft SQL Server、NonStop SQL、Informix 和许多其他的系统。Stonebraker曾担任过Informix的CEO，自己还经常出来创个业，每次还都成功了。关于这个争论，Jeff Dean和Sanjay Ghemawat在2010年1月份的&lt;<Communication of the ACM>&gt;上发表了这篇&lt;&lt;<a href=\"http://duanple.blog.163.com/blog/static/7097176720119711038980/\">MapReduce-A Flexible Data Processing Tool</a>&gt;&gt;进行回应，同一期上还刊了Michael Stonebraker等人的&lt;&lt;<a href=\"http://duanple.blog.163.com/blog/static/7097176720119720494/\">MapReduce and Parallel DBMSs-Friends or Foes </a>&gt;&gt;。</p>\n</li>\n<li><p><a href=\"http://research.google.com/archive/bigtable-osdi06.pdf\">Bigtable: A Distributed Storage System for Structured Data</a>(OSDI06).Bigtable基于GFS构建，提供了结构化数据的可扩展分布式存储。自Bigtable论文发表之后，很快开源的HBase被实现出来，此后更是与Amazon的Dynamo一块引领了NoSQL系统的潮流，之后各种NoSQL系统如雨后春笋般出现在各大互联网公司及开源领域。此外在tablet-server中采用的LSM-Tree存储结构，使得这种在1996年就被提出的模型被重新认识，并广泛应用于各种新的存储系统实现中，成为与传统关系数据库中的B树并驾齐驱的两大模型。</p>\n<p>如果说MapReduce代表着新的分布式计算模型的开端的话，Bigtable则代表着新的分布式存储系统的开端。自此之后在分布式计算存储领域，Google不断地推陈出新，发表了很多新的计算和存储系统，如上图中所示。在继续介绍这些新的计算存储系统之前，我们回到图的底层，关注下基础设施方面的一些系统。</p>\n</li>\n</ol>\n<h3 id=\"2-2-基础设施\"><a href=\"#2-2-基础设施\" class=\"headerlink\" title=\"2.2 基础设施\"></a>2.2 基础设施</h3><ol start=\"6\">\n<li><p><a href=\"http://research.google.com/archive/chubby-osdi06.pdf\">The Chubby lock service for loosely-coupled distributed systems</a>(OSDI06).以文件系统接口形式提供的分布式锁服务，帮助开发者简化分布式系统中的同步和协调工作，比如进行Leader选举。除此之外，这篇文章一个很大的贡献应该是将Paxos应用于工业实践，并极大地促进了Paxos的流行，从这个时候开始Paxos逐渐被更多地工业界人士所熟知并应用在自己的分布式系统中。此后Google发表的其他论文中也不止一次地提到Paxos，像MegaStore/Spanner/Mesa都有提及。此文作者Mike Burrows加入Google之前也是在DEC工作，在DEC的时候他还是AltaVista搜索引擎的主要设计者。</p>\n</li>\n<li><p><a href=\"https://research.google.com/pubs/pub43438.html\">Borg</a>(Eurosys15) <a href=\"https://ai.google/research/pubs/pub41684\">Omega</a>(Eurosys13) <a href=\"https://kubernetes.io/\">Kubernetes</a>.Borg是Google内部的集群资源管理系统，大概诞生在2003-2004年，在Borg之前Google通过两个系统Babysitter和Global Work Queue来分别管理它的在线服务和离线作业，而Borg实现了两者的统一管理。直到15年Google才公布了Borg论文，在此之前对外界来说Borg一直都是很神秘的存在。而Omega主要是几个博士生在Google做的研究型项目，最终并没有实际大规模上线，其中的一些理念被应用到Borg系统中。<em>注：Borg这个名字源自于&lt;&lt;星际迷航&gt;&gt;里的博格人，博格人生活在银河系的德尔塔象限，是半有机物半机械的生化人。博格个体的身体上装配有大量人造器官及机械，大脑为人造的处理器。博格人是严格奉行集体意识的种族，从生理上完全剥夺了个体的自由意识。博格人的社会系统由“博格集合体”组成，每个集合体中的个体成员被称为“Drone”。集合体内的博格个体通过某种复杂的子空间通信网络相互连接。在博格集合体中，博格个体没有自我意识，而是通过一个被称为博格女皇（Borg Queen）的程序对整个集合体进行控制。</em></p>\n<p>在2014年中的时候，Google启动了Kubernetes(Borg的开源版本)。2015年，Kubernetes 1.0 release，同时Google与Linux基金会共同发起了CNCF。2016年，Kubernates逐渐成为容器编排管理领域的主流。提到Kubernates，需要介绍下著名的分布式系统专家Eric Brewer，伯克利教授&amp;Google infrastructure VP，互联网服务系统早期研究者。早在1995年他就和Paul Gauthier创立了Inktomi搜索引擎(2003年被Yahoo!收购，李彦宏曾在这家公司工作)，此时距离Google创立还有3年。之后在2000年的PODC上他首次提出了CAP理论，2012年又对CAP进行了<a href=\"http://www.infoq.com/cn/articles/cap-twelve-years-later-how-the-rules-have-changed\">回顾</a>。2011年他加入了Google，目前在负责推动Kubernetes的发展。</p>\n</li>\n<li><p><a href=\"http://www.e-wilkes.com/john/papers/2013-EuroSys-CPI2.pdf\">CPI2: CPU performance isolation for shared compute clusters</a>(Eurosys13).通过监控CPI(Cycles-Per-Instruction)指标，结合历史运行数据进行分析预测找到影响系统性能的可疑程序，限制其CPU使用或进行隔离/下线，避免影响其他关键应用。本文也从一个侧面反映出，为了实现离线在线混布Google在多方面所做的努力和探索，尤其是在资源隔离方面。具体实现中，每台机器上有一个守护进程负责采集本机上运行的各个Job的CPI数据(通过采用计数模式/采样等方法降低开销，实际CPU开销小于0.1%)，然后发送到一个中央的服务器进行聚合，由于集群可能是异构的，每个Job还会根据不同的CPU类型进行单独聚合，最后把计算出来的CPI数据的平均值和标准差作为CPI spec。结合CPI历史记录建立CPI预测模型，一旦出现采样值偏离预测值的异常情况，就会记录下来，如果异常次数超过一定阈值就启动相关性分析寻找干扰源，找到之后进行相应地处理(限制批处理作业的CPU使用/调度到单独机器上等)。讲到这里，不仅让我们联想到今天大火的AIOPS概念，而很久之前Google已经在生产系统上使用类似技术。不过在论文发表时，Google只是打开了CPI2的监控功能，实际的自动化处理还未在生产系统中打开。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub36575\">GOOGLE-WIDE PROFILING:A CONTINUOUS PROFILING </a><a href=\"https://ai.google/research/pubs/pub36575\">INFRASTRUCTURE FOR DATA CENTERS</a>(IEEE Micro10).Google的分布式Profiling基础设施，通过收集数据中心的机器上的各种硬件事件/内核事件/调用栈/锁竞争/堆内存分配/应用性能指标等信息，通过这些信息可以为程序性能优化/Job调度提供参考。为了降低开销，采样是在两个维度上进行，首先是在整个集群的机器集合上采样同一时刻只对很少一部分机器进行profiling，然后在每台机器上再进行基于事件的采样。底层通过OProfile采集系统硬件监控指标(比如CPU周期/L1 L2 Cache Miss/分支预测失败情况等)，通过GPerfTools采集应用程序进程级的运行指标(比如堆内存分配/锁竞争/CPU开销等)。收集后的原始采样信息会保存在GFS上，但是这些信息还未与源代码关联上，而部署的binary通常都是去掉了debug和符号表信息，采用的解决方法是为每个binary还会保存一个包含debug信息的未被strip的原始binary，然后通过运行MapReduce Job完成原始采样信息与源代码的关联。为了方便用户查询，历史Profiling数据还会被加载到一个分布式数据库中。通过这些Profiling数据，除了可以帮助应用理解程序的资源消耗和性能演化历史，还可以实现数据驱动的数据中心设计/构建/运维。</p>\n</li>\n<li><p><a href=\"http://research.google.com/pubs/archive/36356.pdf\">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</a>(Google TR10).Google的分布式Tracing基础设施。Dapper最初是为了追踪在线服务系统的请求处理过程。比如在搜索系统中，用户的一个请求在系统中会经过多个子系统的处理，而且这些处理是发生在不同机器甚至是不同集群上的，当请求处理发生异常时，需要快速发现问题，并准确定位到是哪个环节出了问题，这是非常重要的，Dapper就是为了解决这样的问题。对系统行为进行跟踪必须是持续进行的，因为异常的发生是无法预料的，而且可能是难以重现的。同时跟踪需要是无所不在，遍布各处的，否则可能会遗漏某些重要的点。基于此Dapper有如下三个最重要的设计目标：低的额外开销，对应用的透明性，可扩展。同时产生的跟踪数据需要可以被快速分析，这样可以帮助用户实时获取在线服务状态。</p>\n</li>\n<li><p><a href=\"http://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf\">B4: Experience with a Globally-Deployed Software Defined WAN</a>(Sigcomm13).Google在全球有几十个数据中心，这些数据中心之间通常通过2-3条专线与其他数据中心进行连接。本文描述了Google如何通过SDN/OpenFlow对数据中心间的网络进行改造，通过对跨数据中心的流量进行智能调度，最大化数据中心网络链路的利用率。Google通过强大的网络基础设施，使得它的跨越全球的数据中心就像一个局域网，从而为后续很多系统实现跨数据中心的同步复制提供了网络层面的保障。</p>\n</li>\n</ol>\n<h3 id=\"2-3-计算分析系统\"><a href=\"#2-3-计算分析系统\" class=\"headerlink\" title=\"2.3 计算分析系统\"></a>2.3 计算分析系统</h3><p>自MapReduce之后，Google又不断地开发出新的分布式计算系统，一方面是为了提供更易用的编程接口(比如新的DSL/SQL语言支持)，另一方面是为了适应不同场景(图计算/流计算/即席查询/内存计算/交互式报表等)的需求。</p>\n<ol start=\"12\">\n<li><p><a href=\"http://cloud.pubs.dbs.uni-leipzig.de/sites/cloud.pubs.dbs.uni-leipzig.de/files/Pike2005InterpretingthedataParallelanalysiswithSawzall.pdf\">Interpreting the Data: Parallel Analysis with Sawzall</a>(Scientific Programming05).Google为了简化MapReduce程序的编写，而提出的一种新的DSL。后来Google又推出了Tenzing/Dremel等数据分析系统，到了2010年就把Sawzall给开源了，项目主页：<a href=\"http://code.google.com/p/szl/%E3%80%82%E8%99%BD%E7%84%B6%E4%B8%8ETenzing/Dremel%E7%9B%B8%E6%AF%94%EF%BC%8C\">http://code.google.com/p/szl/。虽然与Tenzing/Dremel相比，</a> Sawzall所能做的事情还是比较有限，但是它是最早的，同时作为一种DSL毕竟还是要比直接写MapReduce job要更易用些。</p>\n<p>本文第一作者Rob Pike，当今世界上最著名的程序员之一，&lt;&lt;Unix编程环境&gt;&gt; &lt;&lt;程序设计实践&gt;&gt;作者。70年代就加入贝尔实验室，跟随Ken Thompson&amp;DMR(二人因为发明Unix和C语言共同获得1983年图灵奖)参与开发了Unix，后来又跟Ken一块设计了UTF-8。2002年起加入Google，之后搞了Sawzall，目前跟Ken Thompson一块在Google设计开发Go语言。</p>\n</li>\n<li><p><a href=\"http://pages.cs.wisc.edu/~akella/CS838/F12/838-CloudPapers/FlumeJava.pdf\">FlumeJava: Easy, Efficient Data-Parallel Pipelines</a>(PLDI10).由于实际的数据处理中，通常都不是单个的MapReduce Job，而是多个MapReduce Job组成的Pipeline。为了简化Pipleline的管理和编程，提出了FlumeJava框架。由框架负责MapReduce Job的提交/中间数据管理，同时还会对执行过程进行优化，用户可以方便地对Pipeline进行开发/测试/运行。另外FlumeJava没有采用新的DSL，而是以Java类库的方式提供给用户，用户只需要使用Java语言编写即可。</p>\n</li>\n<li><p><a href=\"https://kowshik.github.io/JPregel/pregel_paper.pdf\">Pregel: A System for Large-Scale Graph Processing</a>(SIGMOD10).Google的图处理框架。Pregel这个名称是为了纪念欧拉，在他提出的格尼斯堡七桥问题中，那些桥所在的河就叫Pregel，而正是格尼斯堡七桥问题导致了图论的诞生。最初是为了解决PageRank计算问题，由于MapReduce并不适于这种场景，所以需要发展新的计算模型去完成这项计算任务，在这个过程中逐步提炼出一个通用的图计算框架，并用来解决更多的问题。核心思想源自BSP模型，这个就更早了，是在上世纪80年代由Leslie Valiant(2010年图灵奖得主)提出，之后在1990的Communications of the ACM 上，正式发表了题为A bridging model for parallel computation的文章。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub36632\">Dremel: Interactive Analysis of Web-Scale Datasets</a>(VLDB10).由于MapReduce的延迟太大，无法满足交互式查询的需求，Google开发了Dremel系统。Dremel主要做了三件事：</p>\n<ul>\n<li><p>将嵌套记录转换为列式存储，并提供快速的反向组装</p>\n</li>\n<li><p>类sql的查询语言</p>\n</li>\n<li><p>类搜索系统的查询执行树</p>\n</li>\n</ul>\n<p>通过列式存储降低io，将速度提高一个数量级，这类似于诸如Vertica这样的列存式数据库，与传统行式存储不同，它们只需要读取查询语句中真正必需的那些字段数据；通过类搜索系统的查询执行系统取代mr(MapReduce)，再提高一个数量级。它类似于Hive，应该说查询层像Hive，都具有类似于SQL的查询语言，都可以用来做数据挖掘和分析；但hive是基于mr，所以实时性要差，Dremel则由于它的查询执行引擎类似于搜索服务系统，因此非常适合于交互式的数据分析方式，具有较低的延迟，但是通常数据规模要小于mr；而与传统数据库的区别是，它具有更高的可扩展性和容错性，结构相对简单，可以支持更多的底层存储方式。其中的数据转化与存储方式，巧妙地将Protobuf格式的嵌套记录转换成了列式存储，同时还能够快速的进行重组，是其比较独特的一点。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub37200\">Tenzing A SQL Implementation On The MapReduce Framework</a>(VLDB11).Tenzing是一个建立在MapReduce之上的用于Google数据的ad hoc分析的SQL查询引擎。Tenzing提供了一个具有如下关键特征的完整SQL实现(还具有几个扩展)：异构性，高性能，可扩展性，可靠性，元数据感知，低延时，支持列式存储和结构化数据，容易扩展。Tenzing的发表算是很晚的了，与之相比Facebook在VLDB09上就发表了Hive的论文。与开源系统Hive的优势在于它跟底层所依赖的MapReduce系统都是一个公司内的产品，因此它可以对MapReduce做很多改动，以满足Tenzing某些特殊性的需求，最大化Tenzing的性能。 </p>\n</li>\n<li><p><a href=\"http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf\">PowerDrill：</a><a href=\"http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf\">Processing a Trillion Cells per Mouse Click</a>(VLDB12).Google推出的基于内存的列存数据库，该系统在2008年就已经在Google内部上线。与Dremel相比虽然都是面向分析场景，但是PowerDrill主要面向的是少量核心数据集上的多维分析，由于数据集相对少同时分析需求多所以可以放到内存，在把数据加载到内存分析之前会进行复杂的预处理以尽量减少内存占用。而Dremel则更加适合面向大量数据集的分析，不需要把数据加载到内存。主要采用了如下技术进行加速和内存优化：</p>\n<ol>\n<li>导入时对数据进行分区，然后查询时根据分区进行过滤尽量避免进行全量扫描 </li>\n<li>底层数据采用列式存储，可以跳过不需要的列 </li>\n<li>采用全局/chunk两级字典对列值进行编码，一方面可以加速计算(chunk级的字典可以用来进行针对用户查询的chunk过滤，编码后的value变成了更短的int类型与原始值相比可以更快速的进行相关运算)，另一方面还可以达到数据压缩的目的，与通用压缩算法相比采用这种编码方式的优点是：读取时不需要进行解压这样的预处理，同时支持随机读取 </li>\n<li>编码后的数据进行压缩还可以达到1.4-2倍的压缩比，为了避免压缩带来的性能降低，采用了压缩与编码的混合策略，对数据进行分层，最热的数据是解压后的编码数据，然后稍冷的数据也还会进行压缩 </li>\n<li>对数据行根据partition key进行重排序，提高压缩比 </li>\n<li>查询分布式执行，对于同一个查询会分成多个子查询并发给多个机器执行，同时同一个子查询会发给两台机器同时执行，只要有一个返回即可，但是另一个最终也要执行完以进行数据预热</li>\n</ol>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub41378\">MillWheel: Fault-Tolerant Stream Processing at Internet Scale</a>(VLDB13).Google的流计算系统，被广泛应用于构建低延迟数据处理应用的框架。用户只需要描述好关于计算的有向图，编写每个节点的应用程序代码。系统负责管理持久化状态和连续的记录流，同时将一切置于框架提供的容错性保证之下。虽然发布的比较晚，但是其中的一些机制(比如Low Watermark)被借鉴到开源的 <strong>Flink</strong> 系统中。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub42851\">Mesa: Geo-Replicated, Near Real-Time, Scalable Data Warehousing</a>(VLDB14).Google的跨数据中心数据仓库系统，主要是为了满足广告业务的场景需求，随着广告平台的不断发展，客户对各自的广告活动的可视化提出了更高的要求。对于更具体和更细粒度的信息需求，直接导致了数据规模的急速增长。虽然Google已经把核心广告数据迁移到了Spanner+F1上，但是对于这种广告效果实时统计需求来言，由于涉及非常多的指标这些指标可能是保存在成百上千张表中，同时这些指标与用户点击日志相关通常对应着非常大的峰值访问量，超过了Spanner+F1这样的OLTP系统的处理能力。为此Google构建了Mesa从而能处理持续增长的数据量，同时它还提供了一致性和近实时查询数据的能力。具体实现方法是：将增量更新进行batch，提交者负责为增量数据分配版本号，利用Paxos对跨数据中心的版本数据库进行更新，基于MVCC机制提供一致性访问。底层通过Bigtable存储元数据，通过<a href=\"http://static.googleusercontent.com/media/research.google.com/en/us/university/relations/facultysummit2010/storage_architecture_and_challenges.pdf\">Colossus</a>来存储数据文件，此外还利用<a href=\"http://en.wikipedia.org/wiki/MapReduce\">MapReduce</a>来对连续增量数据进行合并，而为Mesa提供增量更新的上游应用通常是一个流计算系统。可以看到Mesa系统本身结合了批量处理与实时计算，还要满足OLTP+OLAP的场景需求，同时采用了分层架构实现存储计算的分离。既像一个分布式数据库，又像一个大数据准实时处理系统。</p>\n</li>\n<li><p><a href=\"https://research.google.com/pubs/archive/45394.pdf\">Shasta: Interactive Reporting At Scale</a>(SIGMOD16).Google的交互式报表系统，也主要是为了满足广告业务的场景需求，与Mesa的区别在于Shasta是构建于Mesa之上的更上层封装。主要为了解决如下挑战：1)用户查询请求的低延迟要求 2)底层事务型数据库的schema与实际展现给用户的视图不友好，报表系统的开发人员需要进行复杂的转换，一个查询视图底层可能涉及多种数据源(比如F1/Mesa/Bigtable等) 3)数据实时性需求，用户修改了广告预算后希望可以在新的报表结果中可以马上体现出来。为了解决这些问题，在F1和Mesa系统之上构建了Shasta。主要从两个层面进行解决：语言层面，在SQL之上设计了一种新的语言RVL(Relational View Language)，通过该语言提供的机制(自动聚合/子句引用/视图模板/文本替换等)可以比SQL更加方便地描述用户的查询视图，RVL编译器会把RVL语句翻译成SQL，在这个过程中还会进行查询优化；系统层面，直接利用了F1的分布式查询引擎，但是进行了一些扩展比如增加单独的UDF server让UDF的执行更加安全，为了确保实时性需要直接访问F1，但是为了降低延迟在F1之上增加了一个只读的分布式Cache层。</p>\n</li>\n<li><p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45390.pdf\">Goods: Organizing Google’s Datasets</a>(SIGMOD16).Google的元数据仓库Goods(Google DataSet Search)。Google内部积累了大量的数据集，而这些数据散落在各种不同的存储系统中(GFS/Bigtable/Spanner等)。面临的问题就是如何组织管理这些数据，使得公司内部工程师可以方便地找到他们需要的数据，实现数据价值的最大化。Google的做法很多方面都更像一个小型的搜索引擎，不过在这个系统里被索引的数据由网页变成了Google内部生产系统产生的各种数据，用户变成了内部的数据开发人员。整个做法看起来要费劲很多，很大程度上是因为内部系统众多但是没有一个统一的入口平台，只能采用更加自动化(不依赖人和其他系统)的做法：要爬取各个系统的日志，通过日志解析数据的元信息(这个过程中还是比较费劲的，比如为了确定数据的Schema，要把Google中央代码库里的所有protobuf定义拿过来试看哪个能匹配上)，然后把这些信息(大小/owner/访问权限/时间戳/文件格式/上下游/依赖关系/Schema/内容摘要等)保存一个中央的数据字典中(存储在Bigtable中目前已经索引了260亿条数据集信息)，提供给内部用户查询。这中间解决了如下一些问题和挑战：Schema探测/数据自动摘要/血缘分析/聚类/搜索结果ranking/过期数据管理/数据备份等。本文可以让我们一窥Google是如何管理内部数据资产的，有哪些地方可以借鉴。</p>\n</li>\n</ol>\n<h2 id=\"2-4-存储-amp-数据库\"><a href=\"#2-4-存储-amp-数据库\" class=\"headerlink\" title=\"2.4 存储&amp;数据库\"></a>2.4 存储&amp;数据库</h2><ol start=\"22\">\n<li><p><a href=\"https://ai.google/research/pubs/pub36726\">Percalator:</a><a href=\"https://ai.google/research/pubs/pub36726\">Large-scale Incremental Processing Using Distributed Transactions and Notifications</a>(OSDI10).基于Bigtable的增量索引更新系统，Google新一代索引系统”咖啡因“实时性提升的关键。此前Google的索引构建是基于MapReduce，全量索引更新一次可能需要几天才能完成，为了提高索引更新的实时性Google构建了增量更新系统。Bigtable只支持单行的原子更新，但是一个网页的更新通常涉及到其他多个网页(网页间存在链接关系比如更新的这个网页上就有其他网页的锚文本)的更新。为了解决这个问题，Percolator在Bigtable之上通过两阶段提交实现了跨行事务。同时网页更新后还要触发一系列的处理流程，Percolator又实现了类似于数据库里面的触发器机制，当Percolator中的某个cell数据发生变化，就触发应用开发者指定的Observer程序。此外开源分布式数据库TiDB就参考了Percalator的事务模型。</p>\n</li>\n<li><p><a href=\"http://cidrdb.org/cidr2011/Papers/CIDR11_Paper32.pdf\">Megastore: Providing Scalable, Highly Available Storage for Interactive Services</a>(CIDR11).Google在2008年的SIGMOD上就介绍了Megastore，但是直到2011年才发表完整论文。Megastore本身基于Bigtable，在保留可扩展/高性能/低延迟/高可用等优点的前提下，引入了传统关系数据库中的很多概念比如关系数据模型/事务/索引，同时基于Paxos实现了全球化同步复制，可以说是最早的分布式数据库实现了。它本身也提供了分布式事务支持，但是论文中并没有描述相关实现细节，猜测应该跟Percalator类似。虽然此后被Spanner所替代，但是它的继任者Spanner很多特性都是受它影响。</p>\n</li>\n<li><p><a href=\"http://research.google.com/archive/spanner-osdi2012.pdf\">Spanner: Google’s Globally-Distributed Database</a>(OSDI12).2009年Jeff Dean的一次分享(<a href=\"http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\">Designs, Lessons and Advice from Building Large Distributed)</a>中首次提到Spanner，也是过了3年到了2012年才发表完整论文。做为Megastore的继任者，它主要解决了Megastore存在的几个问题：性能、查询语言支持弱、分区不灵活。另外一个重要的创新是基于原子钟和GPS硬件实现了TrueTime API，并基于这个API实现了更强的一致性保证。除此之外其他部分则与Megastore非常类似，但是在文中对其分布式事务的实现细节进行了描述。</p>\n</li>\n<li><p><a href=\"https://ai.google/research/pubs/pub41344\">F1: A Distributed SQL Database That Scales</a>(VLDB13).基于Spanner实现的分布式SQL数据库，主要实现了一个分布式并行查询引擎，支持一致性索引和非阻塞的在线Schema变更。与Spanner配合替换掉了Google核心广告系统中的MySQL数据库。F1这个名字来自生物遗传学，代指杂交一代，表示它结合了传统关系数据库和NoSQL系统两者的特性。</p>\n</li>\n</ol>\n<h3 id=\"2-5-AI\"><a href=\"#2-5-AI\" class=\"headerlink\" title=\"2.5 AI\"></a>2.5 AI</h3><ol start=\"26\">\n<li><p><a href=\"https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf\">TensorFlow: A System for Large-Scale Machine Learning</a>(OSDI16).</p>\n</li>\n<li><p><a href=\"http://www.cs.toronto.edu/~pekhimenko/courses/csc2231-f17/Papers/tpu.pdf\">In-Datacenter Performance Analysis of a Tensor Processing Unit</a>(SIGARCH17).Google TPU。与往常一样，在Google公布此文的时候，新一代更强大的TPU已经开发完成。由于本文更偏重硬件，具体内容没有看。但是其中的第四作者David Patterson还是值得特别来介绍一下，因为在体系结构领域的贡献(RISC、RAID、体系结构的量化研究方法)，他和John Hennessy共同获得了2017年的图灵奖：<a href=\"http://www.edu.cn/ke_yan_yu_fa_zhan/zui_jin_geng_xin/201803/t20180322_1591118_2.shtml\">相关新闻</a>。2016年加入Google就是去做TPU的；2018年，与他共同获得图灵奖的John Hennessy(斯坦福第十任校长、MIPS公司创始人)被任命为Google母公司Alphabet的新任主席。</p>\n</li>\n</ol>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h2><p>在前面两节我们对过去20年Google在分布式系统领域的经典论文进行了系统地梳理和介绍，通过这个过程我们可以看到：</p>\n<p>每当Google发表一篇相关论文，通常都会产生一个与之对应的开源系统。比如GFS/HDFS，MapReduce/Hadoop MapReduce，BigTable/HBase，Chubby/ZooKeeper，FlumeJava/Plume，Dapper/Zipkin等等。如果把数据中心看做一台计算机的话，在数据中心之上的各种分布式系统就像当年的Unix和C语言，Hadoop及各种开源系统就像当年的Linux，而开启这个时代的人们尤其是Jeff Dean/Sanjay Ghemawat就像当年的Ken Thompson/Dennis M. Ritche，Hadoop创始人Doug Cutting就像当年的Linus Torvalds。Ken Thompson/Dennis M. Ritche因为Unix和C方面的贡献获得1983年图灵奖，或许在将来的某一天Jeff Dean/Sanjay Ghemawat也能摘得桂冠。</p>\n<p>观察上图，我们还可以看到随着时间的推进，Google自底向上地逐步构建出一个庞大的软硬件基础设施Stack，同时每个系统内部也在不断地自我进化。而不同的系统之间，可能是互补关系，可能是继承关系，可能是替换关系。通过对这个演化过程的观察，我们也总结出一些内在的趋势和规律。论文本身固然重要，但是这些趋势和规律也很有意义。</p>\n<h3 id=\"3-1-两个维度，三个层次\"><a href=\"#3-1-两个维度，三个层次\" class=\"headerlink\" title=\"3.1 两个维度，三个层次\"></a>3.1 两个维度，三个层次</h3><p>如题”他山之石”，人们常说不能总是低头拉车，还要注意抬头看路。那么应该如何走出去看看，看什么呢？我们可以将其划分为两个维度(时间和空间)，三个层次(架构、细节和实现)，如下图：</p>\n<p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817180305.png\" alt=\"img\"></p>\n<p>两个维度：时间维度上可以分为过去，现在和未来。Google的那些论文就属于未来，看看它们，那可能是未来要做的，当然慢慢地它们也会成为过去；经典的理论的东西，放到过去这个维度，它们是非常重要的，这决定了对系统理解的深度和高度；现在，就是正在做的或者符合目前实际环境可以直接借鉴的。人们有时候往往喜欢抓着未来，总是忽略了过去和现在，又或者是仅看着当前，忽略了未来和过去。空间维度上可以分为上层和底层，上层是指依赖于我们自己系统的那些应用，底层则指我们的系统本身底层所依赖的那些。有时候为了继续前进，需要跳出当前的框框，从多个维度上去学习，通过不断学习反过来进一步促进当前系统的演化。</p>\n<p>三个层次：如果要了解其他系统，可以从三个层次去学习，先大概了解架构，然后深入到一些具体的细节问题，最后如果有时间还可以继续深入到代码级别。结合本文的第一张图来说就是：可以通过Google论文了解整体架构，然后通过开源系统相关wiki或文档可以了解到更细节的一些东西，最后结合开源系统还可以看到实际的代码实现。</p>\n<h3 id=\"3-2-合久必分，分久必合\"><a href=\"#3-2-合久必分，分久必合\" class=\"headerlink\" title=\"3.2 合久必分，分久必合\"></a>3.2 合久必分，分久必合</h3><h4 id=\"3-2-1-分\"><a href=\"#3-2-1-分\" class=\"headerlink\" title=\"3.2.1 分\"></a>3.2.1 分</h4><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817180548.png\" alt=\"img\"></p>\n<p>实例：</p>\n<p>1.越来越多的计算被Offload到非CPU的计算单元：Google TPU</p>\n<p>2.<a href=\"http://cs.brown.edu/~ugur/fits_all.pdf\">“One Size Fits All”: An Idea Whose Time Has Come and Gone</a>：各种新的计算模型如Pregel MillWheel Dremel PowerDrill Mesa</p>\n<p>3.计算存储分离：Mesa CFS+Spanner+F1</p>\n<h4 id=\"3-2-1-合\"><a href=\"#3-2-1-合\" class=\"headerlink\" title=\"3.2.1 合\"></a>3.2.1 合</h4><p><img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817180736.png\" alt=\"img\"></p>\n<p>实例：</p>\n<p>1.分布式数据库：从MegaStore开始到后来的Spanner F1，不断弥补着NoSQL的不足。同时Spanner自身仍在不断演化，开始具备更加丰富的SQL和OLAP支持。</p>\n<p>2.流处理和批处理的统一：Cloud DataFlow完成了编程接口层面的统一，而Mesa则解决了数据层面的结合。</p>\n<p>3.在线离线混部：Borg。</p>\n<p>4.软硬件结合：整个基础设施，就是在解决一个软件(分布式系统)如何适配新硬件(面向互联网设计的数据中心)的问题。通过上层分布式系统屏蔽底层数据中心细节，实现”Datacenter As a Computer“。</p>\n<h3 id=\"3-3-理论与实践相结合\"><a href=\"#3-3-理论与实践相结合\" class=\"headerlink\" title=\"3.3 理论与实践相结合\"></a>3.3 理论与实践相结合</h3><h4 id=\"3-3-1-”新瓶装旧酒“\"><a href=\"#3-3-1-”新瓶装旧酒“\" class=\"headerlink\" title=\"3.3.1 ”新瓶装旧酒“\"></a>3.3.1 ”新瓶装旧酒“</h4><p>纵观过去的20年，我们可以看到如果单纯从理论上看，Google的这些论文并没有提出新理论。它们所依赖的那些基础理论(主要来自分布式系统和关系数据库领域)，基本上都是上个世纪70/80年代就已经提出的。而Google的系统只是把这些经典理论结合自己的业务场景(互联网搜索和广告)，进行了实践并发扬广大使之成为业界潮流。看起来虽然是”新瓶装旧酒”，但是却不能小觑这一点，因为旧酒在新瓶里可能会产生新的化学反应，进而创造出新的完全不同的“酒”。如果忽略了它，当新”酒“成为新浪潮之时，就再也无法站立在浪潮之巅。</p>\n<h4 id=\"3-3-2-两个阶段\"><a href=\"#3-3-2-两个阶段\" class=\"headerlink\" title=\"3.3.2 两个阶段\"></a>3.3.2 两个阶段</h4><p>如果从理论与实践的这个角度来看，我们可以把过去的20年分成两个阶段：前十年主要解决的是可扩展性问题，理论主要源自分布式系统领域；后十年在解决了可扩展问题后，开始考虑易用性问题，提供更加方便的编程接口和一致性模型，这个阶段更多地是借鉴传统关系数据库领域的一些做法。再回到当下，从AI的再度流行中我们依然可以看到其所依赖的理论基础，依然是在上个世纪就已经提出的，而今天在互联网时代大规模的数据和计算能力这个背景下，重新焕发了生命。在解决完可扩展易用性问题后，使得可以对大规模数据进行方便地存储计算和查询之后，下一个十年人们开始关注如何进一步挖掘数据，如何借助这些数据去完成以前未完成的构想，这个过程中仍在不断学习应用前人的经典理论。</p>\n<h4 id=\"3-3-3-实践联系理论\"><a href=\"#3-3-3-实践联系理论\" class=\"headerlink\" title=\"3.3.3 实践联系理论\"></a>3.3.3 实践联系理论</h4><p>从另一个方面来说，如果要真正理解这些论文，除了论文本身内容之外，也还需要去了解传统的分布式系统和关系数据库理论。比如Spanner那篇论文，如果只看论文本身，没有关系数据库和分布式系统理论基础的话估计很难看懂。有时候可能还需要多看看论文的参考文献，之后再看才会理解一些。很多研究领域的大牛们，经常会调侃做工程的家伙们，他们说”这些家伙看着就像生活在5,60年代的老家伙“，为什么呢，因为这些家伙们总是用一些很丑陋的方法去解决一个科学家们早在几十年前就给出了完美解决方案的问题，但是这些家伙看起来对此一无所知。当然了，做工程的也会挖苦下那些研究家们老是指指点点，从来不肯俯下身子来解决实际问题。但是实际上，如果你是做工程的，那就应该多看看研究家们的成果，其实很多问题的确是人家n多年前就已经提出并很好解决了的。如果是做研究的，那就多接触下工程实践，理解下现实需求，弥补下理论与实践的差距。</p>\n<h4 id=\"3-3-4-分布式理论实践\"><a href=\"#3-3-4-分布式理论实践\" class=\"headerlink\" title=\"3.3.4 分布式理论实践\"></a>3.3.4 分布式理论实践</h4><p>具体到分布式系统领域，我们可以发现正是通过与实践相结合，理论才逐渐赢得科学界和工业界的重视。在此之前，分布式理论研究一直处于非常尴尬的状态，与实践的隔阂尤其严重，很多研究工作局限在研究领域，严重脱离现实世界。关于这一点从图灵奖的颁发上可以看出来，自1966年图灵奖首次颁发以来，直到2013年Lamport获奖之前，可以说还没有一个人因为在分布式系统领域的贡献而获得图灵奖。虽然有些获奖者的研究领域也涉及到分布式系统，但是他们获奖更多是因为在其他领域的贡献。而反观程序设计语言/算法/关系数据库等领域均有多人获奖，同时这些领域的研究成果早已被广泛应用在工业界，通过实践证明了其价值。可以说正是因为互联网的兴起，在Google等公司的分布式系统实践下，分布式理论逐渐被广泛应用到各个实际系统中，这也是 Lamport能够获得图灵奖的重要原因。</p>\n<h2 id=\"4-云计算的起源与发展\"><a href=\"#4-云计算的起源与发展\" class=\"headerlink\" title=\"4.云计算的起源与发展\"></a>4.云计算的起源与发展</h2><p>本节我们将跳出Google论文的范畴，以更广泛的视角看一下今天的云计算。下面更多的是描述一些历史，进行一些”考古”，希望这个过程可以带来更多的启发和思考。</p>\n<h3 id=\"4-1-从Google论文说起\"><a href=\"#4-1-从Google论文说起\" class=\"headerlink\" title=\"4.1 从Google论文说起\"></a>4.1 从Google论文说起</h3><h4 id=\"4-1-1-“冰山一角”\"><a href=\"#4-1-1-“冰山一角”\" class=\"headerlink\" title=\"4.1.1 “冰山一角”\"></a>4.1.1 “冰山一角”</h4><p>首先还是回到第一张图，我们把图缩小一下，并重点关注图的顶部。</p>\n<img src=\"https://gitee.com/coderzc/blogimage/raw/master/20210817181035.jpg\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<p>可以看到，在Google强大的软硬件基础设施之上，在其云平台上暴露给外部用户使用的则寥寥无几。这个场景就像我们看到了一座冰山，露在水面上的只有那一角。即便是已经开放给外部用户的Cloud Bigtable是2015年才发布的，此时距离Bigtable论文发表已经过了快10年。Cloud Spanner是2017年，也已经是论文发表5年之后。虽然在2008年就推出了GAE，但是也一直不温不火。</p>\n<p>将Google的这些系统与AWS的各种云产品对比一下，可以发现两者的出发点类似都是为了实现”Datacenter As a Computer“，但是目标用户不同。Google这些系统面向的是内部的搜索广告业务，而AWS则致力于让外部客户也能实现”Datacenter As a Computer“。就好比一个是面向大企业客户的国有大银行，一个是面向小微客户的普惠金融。从技术-&gt;产品-&gt;商品-&gt;服务的角度来看，Google在技术上做到了独步天下，但是要提供给外部客户后面的短板仍然需要补足。</p>\n<p>早在2011年，Google员工Amazon前员工Steve Yegge在G+上发表了一篇文章对Google和Amazon进行了有趣的对比：<a href=\"https://blog.csdn.net/maray/article/details/19553301\">Stevey’s Google Platforms Rant</a> ，<a href=\"https://news.cnblogs.com/n/120344/\">中文版</a>。其中非常重要的一点就是Amazon对于服务及服务化的重视。</p>\n<p>2015年Sundar Pichai成为Google新任CEO。进行了一系列调整，找来了VMware的联合创始人Diane Greene领导谷歌的企业及云业务，相关新闻：<a href=\"http://www.sohu.com/a/67216913_118794\">谷歌公有云GCP轰隆崛起？</a>，可以看到Google正在做出很多改变，开始将云计算作为公司重要战略。同时开源了很多技术如Kubernetes和TensorFlow，试图通过容器、CloudNative和AI等新兴领域实现弯道超车。</p>\n<h4 id=\"4-1-2-为啥要发论文\"><a href=\"#4-1-2-为啥要发论文\" class=\"headerlink\" title=\"4.1.2 为啥要发论文\"></a>4.1.2 为啥要发论文</h4><p>还有一个有趣的对比，可以看到在过去20年Google发表了非常多的论文来介绍它的内部系统，但是反观Amazon，对于它的云产品内部实现可以说介绍的非常少，相关论文只有寥寥几篇。</p>\n<p>对于Google来说，发表论文主要是为了增加个人和公司的业界影响力，便于赢得声誉吸引人才。当然Google内部同样有非常严格的保密机制，禁止员工向外界透露内部系统信息，除非获得了授权。通过前面的一些论文也可以看到，从系统做出来上线算，真正论文发表通常是5年之后的事情了，而发表的时候内部已经有下一代系统了。按照中国古话说”富贵不还乡，如锦衣夜行“，内部再牛逼别人看不到就没有存在感。</p>\n<p>反观Amazon，则没有这个苦恼，因为它云平台上的所有系统都是对外开放的，外面的人可以切实地感受到它的存在，大部分情况下都不需要通过论文来提升存在感。</p>\n<h3 id=\"4-2-“5朵云”的起源\"><a href=\"#4-2-“5朵云”的起源\" class=\"headerlink\" title=\"4.2 “5朵云”的起源\"></a>4.2 “5朵云”的起源</h3><p>IBM的CEO Thomas J. Watson在1943年说过这样一段话：”I think there is a world market for maybe five computers,” 后来在Cloud Computing概念提出后，逐步演变成5朵云的说法。</p>\n<h3 id=\"4-3-AWS\"><a href=\"#4-3-AWS\" class=\"headerlink\" title=\"4.3 AWS\"></a>4.3 AWS</h3><p>关于售卖计算能力给外部客户的想法最早源自2003年Benjamin Black和Chris Pinkham写的一篇报告中，这个想法引起了Jeff Bezos的兴趣。之后2004年就开干了，当时大家一致觉得Pinkham最适合去干这件事，但是他那个时候正想着回到他的家乡南非，于是Amazon就让他在南非开了新的办公室，在那里他们创建了EC2团队并开发出了EC2。Benjamin Black 在一篇文章(<a href=\"http://blog.b3k.us/2009/01/25/ec2-origins.html\">EC2 Origins</a>)中介绍了这段有趣的历史。</p>\n<p>2006年AWS正式上线了EC2和S3，自此拉开了云计算的序幕。其后续整个发展的详细历程可以参考：<a href=\"https://en.wikipedia.org/wiki/Timeline_of_Amazon_Web_Services\">Timeline of Amazon Web Services</a>。</p>\n<p>此外还有一个比较有意思的问题：<a href=\"https://www.zhihu.com/question/20058413/answer/325838352\">为什么 AWS 云计算服务是亚马逊先做出来，而不是 Google ？</a>其中有偶然也有必然，简要总结一下就是”天时、地利、人和“。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://www.gcppodcast.com/post/episode-46-borg-and-k8s-with-john-wilkes/\">https://www.gcppodcast.com/post/episode-46-borg-and-k8s-with-john-wilkes/</a></p>\n<p><a href=\"https://blog.risingstack.com/the-history-of-kubernetes/\">https://blog.risingstack.com/the-history-of-kubernetes/</a></p>\n<p><a href=\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/44843.pdf\">Borg, Omega, and Kubernetes</a></p>\n<p><a href=\"http://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/\">http://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)\">https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)</a></p>\n<p><a href=\"https://www.zhihu.com/question/35736161\">如何看待谷歌工程师透露谷歌有20亿行代码，相当于写40遍Windows？</a></p>\n<p><a href=\"https://www.oschina.net/translate/google-borg-twitter-mesos\">Return of the Borg: How Twitter Rebuilt Google’s Secret Weapon</a></p>\n<p><a href=\"http://www.infoq.com/cn/news/2014/08/google-data-warehouse-mesa\">http://www.infoq.com/cn/news/2014/08/google-data-warehouse-mesa</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Amazon_Web_Services\">https://en.wikipedia.org/wiki/Amazon_Web_Services</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Thomas_J._Watson\">https://en.wikipedia.org/wiki/Thomas_J._Watson</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksgjze0a0001nnvbam8f811o","category_id":"cksgjzedc0012nnvb9hzv09bp","_id":"cksgjzegk0015nnvb3lcvb9r1"},{"post_id":"cksgjze0f0003nnvb0qpm6zg3","category_id":"cksgjzedc0012nnvb9hzv09bp","_id":"cksgjzegk0016nnvb2agl2q0y"},{"post_id":"cksgjze0h0004nnvbf72m38gf","category_id":"cksgjzegb0014nnvb0gh7ckzp","_id":"cksgjzegk0018nnvb0i5c3fso"},{"post_id":"cksgjze0j0005nnvb0oic31wy","category_id":"cksgjzegk0017nnvbce0wcs9k","_id":"cksgjzegl001bnnvba35f228c"},{"post_id":"cksgjze0k0006nnvb1np02nwh","category_id":"cksgjzegk0017nnvbce0wcs9k","_id":"cksgjzegl001cnnvb0fwq9zyx"},{"post_id":"cksgjze0k0007nnvb5d875iuq","category_id":"cksgjzegk001annvb3p4125a3","_id":"cksgjzegl001fnnvb4nph9ec3"},{"post_id":"cksgjze0l0008nnvb7yvb7ta3","category_id":"cksgjzegk001annvb3p4125a3","_id":"cksgjzegl001gnnvbcdrj13ru"},{"post_id":"cksgjze0m0009nnvbgz3z5xyd","category_id":"cksgjzegl001ennvbhodj70fb","_id":"cksgjzegl001jnnvb11erehau"},{"post_id":"cksgjze0n000annvb19k50bc1","category_id":"cksgjzegl001ennvbhodj70fb","_id":"cksgjzegm001lnnvb8vykd5y4"},{"post_id":"cksgjze0o000bnnvbfj4u9wwo","category_id":"cksgjzegl001ennvbhodj70fb","_id":"cksgjzegm001nnnvb4jba06up"},{"post_id":"cksgjze0o000cnnvb5r31567p","category_id":"cksgjzegl001ennvbhodj70fb","_id":"cksgjzegm001onnvbf7i08ixm"},{"post_id":"cksgjze0p000dnnvb2y0rdjbt","category_id":"cksgjzegm001mnnvb2hrgcxkd","_id":"cksgjzegm001rnnvb0j7kcxhc"},{"post_id":"cksgjze0p000ennvbazqbd50n","category_id":"cksgjzegm001mnnvb2hrgcxkd","_id":"cksgjzegn001tnnvbfas52bre"},{"post_id":"cksgjze0s000gnnvbhdcj95mr","category_id":"cksgjzegm001mnnvb2hrgcxkd","_id":"cksgjzegn001xnnvbfj0q2gqh"},{"post_id":"cksgjze0y000innvb1dmb3o0q","category_id":"cksgjzegm001mnnvb2hrgcxkd","_id":"cksgjzegn001znnvbcqx91mxe"},{"post_id":"cksgjze0z000jnnvbb8nh4wfm","category_id":"cksgjzegm001mnnvb2hrgcxkd","_id":"cksgjzegn0020nnvb2o18hd5h"},{"post_id":"cksgjze10000knnvb3vsg82js","category_id":"cksgjzegn001ynnvbera58zen","_id":"cksgjzego0023nnvbgh0ma55c"},{"post_id":"cksgjze10000mnnvbc9ur9ao3","category_id":"cksgjzegn001ynnvbera58zen","_id":"cksgjzego0025nnvbccc50obt"},{"post_id":"cksgjze12000nnnvb716bdi8i","category_id":"cksgjzegn001ynnvbera58zen","_id":"cksgjzego0026nnvbg5qf0onw"},{"post_id":"cksgjze13000onnvb0zrg424c","category_id":"cksgjzego0024nnvbehg07xwc","_id":"cksgjzego0029nnvb2oqxaswt"},{"post_id":"cksgjze14000pnnvbbr2i9o4o","category_id":"cksgjzego0024nnvbehg07xwc","_id":"cksgjzegp002bnnvbho3f0vmk"},{"post_id":"cksgjze16000qnnvb365u0y4e","category_id":"cksgjzego0024nnvbehg07xwc","_id":"cksgjzegp002dnnvb51j712mg"},{"post_id":"cksgjze16000rnnvb50sd66pn","category_id":"cksgjzego0024nnvbehg07xwc","_id":"cksgjzegp002fnnvb7b1t8n9z"},{"post_id":"cksgjze17000snnvba9nv70c0","category_id":"cksgjzego0024nnvbehg07xwc","_id":"cksgjzegp002hnnvb8r6r07lm"},{"post_id":"cksgjze1a000tnnvbbkc85njn","category_id":"cksgjzego0024nnvbehg07xwc","_id":"cksgjzegq002innvb0rkj5dul"},{"post_id":"cksgjze1b000unnvbgb71369m","category_id":"cksgjzegp002gnnvba82f79ha","_id":"cksgjzegq002lnnvbef68364d"},{"post_id":"cksgjze1b000vnnvb8wln1iz5","category_id":"cksgjzegp002gnnvba82f79ha","_id":"cksgjzegq002nnnvb8htz825d"},{"post_id":"cksgjze1c000wnnvb6zq2gtr3","category_id":"cksgjzegp002gnnvba82f79ha","_id":"cksgjzegq002pnnvb54a5conx"},{"post_id":"cksgjze1c000xnnvb94mg7o5h","category_id":"cksgjzegp002gnnvba82f79ha","_id":"cksgjzegr002rnnvb4gomflww"},{"post_id":"cksgjze1s000ynnvb7lfn12tw","category_id":"cksgjzedc0012nnvb9hzv09bp","_id":"cksgjzegr002tnnvbb1ro87ib"},{"post_id":"cksgjze1v0010nnvb0i1ufi69","category_id":"cksgjzegk0017nnvbce0wcs9k","_id":"cksgjzegr002unnvbg5v4fnfh"},{"post_id":"cksgjze230011nnvb9dq6bshu","category_id":"cksgjzegr002snnvb4u6vdywy","_id":"cksgjzegr002vnnvb9dlegn5y"},{"post_id":"cksgjze0p000fnnvb5lvu10ef","category_id":"cksgjzegm001mnnvb2hrgcxkd","_id":"cksgkanjy0000eevbgvwtf83p"}],"PostTag":[],"Tag":[{"name":"机器学习","_id":"cksgjze0u000hnnvb6dj0cd5s"}]}}