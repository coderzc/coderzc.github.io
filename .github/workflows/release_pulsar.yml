name: Release pulsar

on:
  workflow_dispatch:
    inputs:
      repository_url:
        required: true
        default: 'apache/pulsar'
      repository_branch:
        required: true
        default: 'branch-2.9'
      release_candidate_version:
        required: true
        default: '2.9.5-candidate-1'
      release_version:
        required: true
        default: '2.9.5'
      deploy_maven:
        required: true
        default: 'false'
      deploy_svn:
        required: true
        default: 'false'
      deploy_docker:
        required: true
        default: 'false'  
      release_svn:
        required: true
        default: 'false'        
        
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
       
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          
      - name: Update Trust = Trust myself
        run: |
          echo -e "trust\n5\ny" | gpg --batch --no-tty --command-fd 0 --edit-key ${{ secrets.GPG_PUBLICK_KEY }}
          gpg --armor --export-secret-key zhaocong@apache.org > 1.txt
          head -c 20 1.txt
          
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository_url }}
          ref: ${{ github.event.inputs.repository_branch }}
          fetch-depth: 1      

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
        
      - name: Package
        run: |
          mvn -v
          mvn clean install -DskipTests | grep -v "Downloading\|Downloaded\|Progress"
          
      - name: Check
        run: |
         src/check-binary-license.sh distribution/server/target/apache-pulsar-${{ github.event.inputs.release_version }}-bin.tar.gz
         tar -xvzf target/apache-pulsar-${{ github.event.inputs.release_version }}-src.tar.gz
         cd apache-pulsar-${{ github.event.inputs.release_version }}-src
         mvn apache-rat:check
         cd ../
         rm -rf apache-pulsar-${{ github.event.inputs.release_version }}-src
        
      - name: Release to maven
        if: github.event.inputs.deploy_maven == 'true'
        run: |
          export GPG_TTY=$(tty)
          export APACHE_USER=${{ secrets.RELEASE_USERNAME }}
          export APACHE_PASSWORD=${{ secrets.RELEASE_PASSWORD }}
          curl -s -o /tmp/mvn-apache-settings.xml https://raw.githubusercontent.com/apache/pulsar/master/src/settings.xml
          mvn deploy -DskipTests -Papache-release --settings /tmp/mvn-apache-settings.xml | grep -v "Downloading\|Downloaded\|Progress"
          mvn deploy -DskipTests -Papache-release --settings /tmp/mvn-apache-settings.xml -f tests/pom.xml -pl org.apache.pulsar.tests:tests-parent,org.apache.pulsar.tests:integration | grep -v "Downloading\|Downloaded\|Progress"
        
      - name: Release to svn
        if: github.event.inputs.deploy_svn == 'true'
        run: |
          export GPG_TTY=$(tty)
          cd ../ && svn co --depth=empty https://dist.apache.org/repos/dist/dev/pulsar pulsar-dist-dev && cd pulsar-dist-dev
          mkdir -p pulsar-${{ github.event.inputs.release_candidate_version }}
          cd pulsar-${{ github.event.inputs.release_candidate_version }}
          $GITHUB_WORKSPACE/src/stage-release.sh .
          cat *.sha512
          cd ../
          svn add --parents pulsar-${{ github.event.inputs.release_candidate_version }}/*
          svn ci -m 'Staging artifacts and signature for Pulsar release ${{ github.event.inputs.release_version }}' --username "${{ secrets.RELEASE_USERNAME }}" --password "${{ secrets.RELEASE_PASSWORD }}"
          
      - name: Release to docker
        if: github.event.inputs.deploy_docker == 'true'
        run: |
          export GPG_TTY=$(tty)
          cd ./docker
          ./build.sh
          docker images
          DOCKER_USER=${{ secrets.DOCKERHUB_USERNAME }} DOCKER_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }} DOCKER_ORG=${{ secrets.DOCKERHUB_USERNAME }} ./publish.sh
          
      - name: Release artifacts svn
        if: github.event.inputs.release_svn == 'true'
        run: |
          svn move -m "Release Apache Pulsar ${{ github.event.inputs.release_version }}" https://dist.apache.org/repos/dist/dev/pulsar/pulsar-${{ github.event.release_candidate_version }} https://dist.apache.org/repos/dist/release/pulsar/pulsar-${{ github.event.inputs.release_version }}
          
